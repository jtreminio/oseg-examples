/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.IntegrationConfigurationCollectionRep
import com.launchdarkly.client.models.IntegrationConfigurationPost
import com.launchdarkly.client.models.IntegrationConfigurationsRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class IntegrationsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create integration configuration
     * Create a new integration configuration. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationKey The integration key
     * @param integrationConfigurationPost 
     * @return IntegrationConfigurationsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createIntegrationConfiguration(integrationKey: kotlin.String, integrationConfigurationPost: IntegrationConfigurationPost) : IntegrationConfigurationsRep {
        val localVarResponse = createIntegrationConfigurationWithHttpInfo(integrationKey = integrationKey, integrationConfigurationPost = integrationConfigurationPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationConfigurationsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create integration configuration
     * Create a new integration configuration. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationKey The integration key
     * @param integrationConfigurationPost 
     * @return ApiResponse<IntegrationConfigurationsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createIntegrationConfigurationWithHttpInfo(integrationKey: kotlin.String, integrationConfigurationPost: IntegrationConfigurationPost) : ApiResponse<IntegrationConfigurationsRep?> {
        val localVariableConfig = createIntegrationConfigurationRequestConfig(integrationKey = integrationKey, integrationConfigurationPost = integrationConfigurationPost)

        return request<IntegrationConfigurationPost, IntegrationConfigurationsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createIntegrationConfiguration
     *
     * @param integrationKey The integration key
     * @param integrationConfigurationPost 
     * @return RequestConfig
     */
    fun createIntegrationConfigurationRequestConfig(integrationKey: kotlin.String, integrationConfigurationPost: IntegrationConfigurationPost) : RequestConfig<IntegrationConfigurationPost> {
        val localVariableBody = integrationConfigurationPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/integration-configurations/keys/{integrationKey}".replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete integration configuration
     * Delete an integration configuration by ID. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationConfigurationId The ID of the integration configuration to be deleted
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteIntegrationConfiguration(integrationConfigurationId: kotlin.String) : Unit {
        val localVarResponse = deleteIntegrationConfigurationWithHttpInfo(integrationConfigurationId = integrationConfigurationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete integration configuration
     * Delete an integration configuration by ID. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationConfigurationId The ID of the integration configuration to be deleted
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteIntegrationConfigurationWithHttpInfo(integrationConfigurationId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteIntegrationConfigurationRequestConfig(integrationConfigurationId = integrationConfigurationId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteIntegrationConfiguration
     *
     * @param integrationConfigurationId The ID of the integration configuration to be deleted
     * @return RequestConfig
     */
    fun deleteIntegrationConfigurationRequestConfig(integrationConfigurationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/integration-configurations/{integrationConfigurationId}".replace("{"+"integrationConfigurationId"+"}", encodeURIComponent(integrationConfigurationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all configurations for the integration
     * Get all integration configurations with the specified integration key. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta))).
     * @param integrationKey Integration key
     * @return IntegrationConfigurationCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAllIntegrationConfigurations(integrationKey: kotlin.String) : IntegrationConfigurationCollectionRep {
        val localVarResponse = getAllIntegrationConfigurationsWithHttpInfo(integrationKey = integrationKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationConfigurationCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all configurations for the integration
     * Get all integration configurations with the specified integration key. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta))).
     * @param integrationKey Integration key
     * @return ApiResponse<IntegrationConfigurationCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAllIntegrationConfigurationsWithHttpInfo(integrationKey: kotlin.String) : ApiResponse<IntegrationConfigurationCollectionRep?> {
        val localVariableConfig = getAllIntegrationConfigurationsRequestConfig(integrationKey = integrationKey)

        return request<Unit, IntegrationConfigurationCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllIntegrationConfigurations
     *
     * @param integrationKey Integration key
     * @return RequestConfig
     */
    fun getAllIntegrationConfigurationsRequestConfig(integrationKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-configurations/keys/{integrationKey}".replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get an integration configuration
     * Get integration configuration with the specified ID. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationConfigurationId Integration configuration ID
     * @return IntegrationConfigurationsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIntegrationConfiguration(integrationConfigurationId: kotlin.String) : IntegrationConfigurationsRep {
        val localVarResponse = getIntegrationConfigurationWithHttpInfo(integrationConfigurationId = integrationConfigurationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationConfigurationsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get an integration configuration
     * Get integration configuration with the specified ID. (Excludes [persistent store](/tag/Persistent-store-integrations-(beta)) and [flag import configurations](/tag/Flag-import-configurations-(beta)).)
     * @param integrationConfigurationId Integration configuration ID
     * @return ApiResponse<IntegrationConfigurationsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIntegrationConfigurationWithHttpInfo(integrationConfigurationId: kotlin.String) : ApiResponse<IntegrationConfigurationsRep?> {
        val localVariableConfig = getIntegrationConfigurationRequestConfig(integrationConfigurationId = integrationConfigurationId)

        return request<Unit, IntegrationConfigurationsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIntegrationConfiguration
     *
     * @param integrationConfigurationId Integration configuration ID
     * @return RequestConfig
     */
    fun getIntegrationConfigurationRequestConfig(integrationConfigurationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-configurations/{integrationConfigurationId}".replace("{"+"integrationConfigurationId"+"}", encodeURIComponent(integrationConfigurationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update integration configuration
     * Update an integration configuration. Updating an integration configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param integrationConfigurationId The ID of the integration configuration
     * @param patchOperation 
     * @return IntegrationConfigurationsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateIntegrationConfiguration(integrationConfigurationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : IntegrationConfigurationsRep {
        val localVarResponse = updateIntegrationConfigurationWithHttpInfo(integrationConfigurationId = integrationConfigurationId, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationConfigurationsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update integration configuration
     * Update an integration configuration. Updating an integration configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param integrationConfigurationId The ID of the integration configuration
     * @param patchOperation 
     * @return ApiResponse<IntegrationConfigurationsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateIntegrationConfigurationWithHttpInfo(integrationConfigurationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<IntegrationConfigurationsRep?> {
        val localVariableConfig = updateIntegrationConfigurationRequestConfig(integrationConfigurationId = integrationConfigurationId, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, IntegrationConfigurationsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateIntegrationConfiguration
     *
     * @param integrationConfigurationId The ID of the integration configuration
     * @param patchOperation 
     * @return RequestConfig
     */
    fun updateIntegrationConfigurationRequestConfig(integrationConfigurationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/integration-configurations/{integrationConfigurationId}".replace("{"+"integrationConfigurationId"+"}", encodeURIComponent(integrationConfigurationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
