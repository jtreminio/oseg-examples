/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InsightsRepositoryCollection
import com.launchdarkly.client.models.InsightsRepositoryProjectCollection
import com.launchdarkly.client.models.InsightsRepositoryProjectMappings
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.ValidationFailedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class InsightsRepositoriesBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Associate repositories with projects
     * Associate repositories with projects
     * @param insightsRepositoryProjectMappings 
     * @return InsightsRepositoryProjectCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun associateRepositoriesAndProjects(insightsRepositoryProjectMappings: InsightsRepositoryProjectMappings) : InsightsRepositoryProjectCollection {
        val localVarResponse = associateRepositoriesAndProjectsWithHttpInfo(insightsRepositoryProjectMappings = insightsRepositoryProjectMappings)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsRepositoryProjectCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Associate repositories with projects
     * Associate repositories with projects
     * @param insightsRepositoryProjectMappings 
     * @return ApiResponse<InsightsRepositoryProjectCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun associateRepositoriesAndProjectsWithHttpInfo(insightsRepositoryProjectMappings: InsightsRepositoryProjectMappings) : ApiResponse<InsightsRepositoryProjectCollection?> {
        val localVariableConfig = associateRepositoriesAndProjectsRequestConfig(insightsRepositoryProjectMappings = insightsRepositoryProjectMappings)

        return request<InsightsRepositoryProjectMappings, InsightsRepositoryProjectCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation associateRepositoriesAndProjects
     *
     * @param insightsRepositoryProjectMappings 
     * @return RequestConfig
     */
    fun associateRepositoriesAndProjectsRequestConfig(insightsRepositoryProjectMappings: InsightsRepositoryProjectMappings) : RequestConfig<InsightsRepositoryProjectMappings> {
        val localVariableBody = insightsRepositoryProjectMappings
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/engineering-insights/repositories/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove repository project association
     * Remove repository project association
     * @param repositoryKey The repository key
     * @param projectKey The project key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteRepositoryProject(repositoryKey: kotlin.String, projectKey: kotlin.String) : Unit {
        val localVarResponse = deleteRepositoryProjectWithHttpInfo(repositoryKey = repositoryKey, projectKey = projectKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove repository project association
     * Remove repository project association
     * @param repositoryKey The repository key
     * @param projectKey The project key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteRepositoryProjectWithHttpInfo(repositoryKey: kotlin.String, projectKey: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteRepositoryProjectRequestConfig(repositoryKey = repositoryKey, projectKey = projectKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteRepositoryProject
     *
     * @param repositoryKey The repository key
     * @param projectKey The project key
     * @return RequestConfig
     */
    fun deleteRepositoryProjectRequestConfig(repositoryKey: kotlin.String, projectKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/engineering-insights/repositories/{repositoryKey}/projects/{projectKey}".replace("{"+"repositoryKey"+"}", encodeURIComponent(repositoryKey.toString())).replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List repositories
     * Get a list of repositories  ### Expanding the repository collection response  LaunchDarkly supports expanding the repository collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;projects&#x60; includes details on all of the LaunchDarkly projects associated with each repository  For example, use &#x60;?expand&#x3D;projects&#x60; to include the &#x60;projects&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param expand Expand properties in response. Options: &#x60;projects&#x60; (optional)
     * @return InsightsRepositoryCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInsightsRepositories(expand: kotlin.String? = null) : InsightsRepositoryCollection {
        val localVarResponse = getInsightsRepositoriesWithHttpInfo(expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsRepositoryCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List repositories
     * Get a list of repositories  ### Expanding the repository collection response  LaunchDarkly supports expanding the repository collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;projects&#x60; includes details on all of the LaunchDarkly projects associated with each repository  For example, use &#x60;?expand&#x3D;projects&#x60; to include the &#x60;projects&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param expand Expand properties in response. Options: &#x60;projects&#x60; (optional)
     * @return ApiResponse<InsightsRepositoryCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInsightsRepositoriesWithHttpInfo(expand: kotlin.String?) : ApiResponse<InsightsRepositoryCollection?> {
        val localVariableConfig = getInsightsRepositoriesRequestConfig(expand = expand)

        return request<Unit, InsightsRepositoryCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInsightsRepositories
     *
     * @param expand Expand properties in response. Options: &#x60;projects&#x60; (optional)
     * @return RequestConfig
     */
    fun getInsightsRepositoriesRequestConfig(expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/repositories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
