/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.ApprovalSettings
import com.launchdarkly.client.models.Conflict
import com.launchdarkly.client.models.CopiedFromEnv
import com.launchdarkly.client.models.CustomWorkflowMeta
import com.launchdarkly.client.models.IntegrationMetadata
import com.launchdarkly.client.models.ReviewResponse

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id The ID of this approval request
 * @param version Version of the approval request
 * @param creationDate 
 * @param serviceKind 
 * @param reviewStatus Current status of the review of this approval request
 * @param allReviews An array of individual reviews of this approval request
 * @param notifyMemberIds An array of member IDs. These members are notified to review the approval request.
 * @param status Current status of the approval request
 * @param instructions 
 * @param conflicts Details on any conflicting approval requests
 * @param links The location and content type of related resources
 * @param requestorId The ID of the member who requested the approval
 * @param description A human-friendly name for the approval request
 * @param appliedDate 
 * @param appliedByMemberId The member ID of the member who applied the approval request
 * @param appliedByServiceTokenId The service token ID of the service token which applied the approval request
 * @param executionDate 
 * @param operatingOnId ID of scheduled change to edit or delete
 * @param integrationMetadata 
 * @param source 
 * @param customWorkflowMetadata 
 * @param resourceId String representation of a resource
 * @param approvalSettings 
 */


data class ApprovalRequestResponse (

    /* The ID of this approval request */
    @Json(name = "_id")
    val id: kotlin.String,

    /* Version of the approval request */
    @Json(name = "_version")
    val version: kotlin.Int,

    @Json(name = "creationDate")
    val creationDate: kotlin.Long,

    @Json(name = "serviceKind")
    val serviceKind: kotlin.String,

    /* Current status of the review of this approval request */
    @Json(name = "reviewStatus")
    val reviewStatus: ApprovalRequestResponse.ReviewStatus,

    /* An array of individual reviews of this approval request */
    @Json(name = "allReviews")
    val allReviews: kotlin.collections.List<ReviewResponse>,

    /* An array of member IDs. These members are notified to review the approval request. */
    @Json(name = "notifyMemberIds")
    val notifyMemberIds: kotlin.collections.List<kotlin.String>,

    /* Current status of the approval request */
    @Json(name = "status")
    val status: ApprovalRequestResponse.Status,

    @Json(name = "instructions")
    val instructions: kotlin.collections.List<kotlin.collections.Map<kotlin.String, kotlin.Any>>,

    /* Details on any conflicting approval requests */
    @Json(name = "conflicts")
    val conflicts: kotlin.collections.List<Conflict>,

    /* The location and content type of related resources */
    @Json(name = "_links")
    val links: kotlin.collections.Map<kotlin.String, kotlin.Any>,

    /* The ID of the member who requested the approval */
    @Json(name = "requestorId")
    val requestorId: kotlin.String? = null,

    /* A human-friendly name for the approval request */
    @Json(name = "description")
    val description: kotlin.String? = null,

    @Json(name = "appliedDate")
    val appliedDate: kotlin.Long? = null,

    /* The member ID of the member who applied the approval request */
    @Json(name = "appliedByMemberId")
    val appliedByMemberId: kotlin.String? = null,

    /* The service token ID of the service token which applied the approval request */
    @Json(name = "appliedByServiceTokenId")
    val appliedByServiceTokenId: kotlin.String? = null,

    @Json(name = "executionDate")
    val executionDate: kotlin.Long? = null,

    /* ID of scheduled change to edit or delete */
    @Json(name = "operatingOnId")
    val operatingOnId: kotlin.String? = null,

    @Json(name = "integrationMetadata")
    val integrationMetadata: IntegrationMetadata? = null,

    @Json(name = "source")
    val source: CopiedFromEnv? = null,

    @Json(name = "customWorkflowMetadata")
    val customWorkflowMetadata: CustomWorkflowMeta? = null,

    /* String representation of a resource */
    @Json(name = "resourceId")
    val resourceId: kotlin.String? = null,

    @Json(name = "approvalSettings")
    val approvalSettings: ApprovalSettings? = null

) {

    /**
     * Current status of the review of this approval request
     *
     * Values: approved,declined,pending
     */
    @JsonClass(generateAdapter = false)
    enum class ReviewStatus(val value: kotlin.String) {
        @Json(name = "approved") approved("approved"),
        @Json(name = "declined") declined("declined"),
        @Json(name = "pending") pending("pending");
    }
    /**
     * Current status of the approval request
     *
     * Values: pending,completed,failed,scheduled
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "pending") pending("pending"),
        @Json(name = "completed") completed("completed"),
        @Json(name = "failed") failed("failed"),
        @Json(name = "scheduled") scheduled("scheduled");
    }

}

