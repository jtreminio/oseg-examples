/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.FlagLinkCollectionRep
import com.launchdarkly.client.models.FlagLinkPost
import com.launchdarkly.client.models.FlagLinkRep
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class FlagLinksBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create flag link
     * Create a new flag link. Flag links let you reference external resources and associate them with your flags.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param flagLinkPost 
     * @return FlagLinkRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createFlagLink(projectKey: kotlin.String, featureFlagKey: kotlin.String, flagLinkPost: FlagLinkPost) : FlagLinkRep {
        val localVarResponse = createFlagLinkWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, flagLinkPost = flagLinkPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagLinkRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create flag link
     * Create a new flag link. Flag links let you reference external resources and associate them with your flags.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param flagLinkPost 
     * @return ApiResponse<FlagLinkRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createFlagLinkWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, flagLinkPost: FlagLinkPost) : ApiResponse<FlagLinkRep?> {
        val localVariableConfig = createFlagLinkRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, flagLinkPost = flagLinkPost)

        return request<FlagLinkPost, FlagLinkRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createFlagLink
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param flagLinkPost 
     * @return RequestConfig
     */
    fun createFlagLinkRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, flagLinkPost: FlagLinkPost) : RequestConfig<FlagLinkPost> {
        val localVariableBody = flagLinkPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete flag link
     * Delete a flag link by ID or key.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID or Key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteFlagLink(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : Unit {
        val localVarResponse = deleteFlagLinkWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete flag link
     * Delete a flag link by ID or key.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID or Key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFlagLinkWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteFlagLinkRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFlagLink
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID or Key
     * @return RequestConfig
     */
    fun deleteFlagLinkRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List flag links
     * Get a list of all flag links.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @return FlagLinkCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlagLinks(projectKey: kotlin.String, featureFlagKey: kotlin.String) : FlagLinkCollectionRep {
        val localVarResponse = getFlagLinksWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagLinkCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List flag links
     * Get a list of all flag links.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @return ApiResponse<FlagLinkCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlagLinksWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String) : ApiResponse<FlagLinkCollectionRep?> {
        val localVariableConfig = getFlagLinksRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey)

        return request<Unit, FlagLinkCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlagLinks
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @return RequestConfig
     */
    fun getFlagLinksRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update flag link
     * Update a flag link. Updating a flag link uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID
     * @param patchOperation 
     * @return FlagLinkRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateFlagLink(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : FlagLinkRep {
        val localVarResponse = updateFlagLinkWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, id = id, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagLinkRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update flag link
     * Update a flag link. Updating a flag link uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID
     * @param patchOperation 
     * @return ApiResponse<FlagLinkRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateFlagLinkWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<FlagLinkRep?> {
        val localVariableConfig = updateFlagLinkRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, id = id, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, FlagLinkRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateFlagLink
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param id The flag link ID
     * @param patchOperation 
     * @return RequestConfig
     */
    fun updateFlagLinkRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/flag-links/projects/{projectKey}/flags/{featureFlagKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
