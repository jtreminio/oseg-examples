/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InsightGroup
import com.launchdarkly.client.models.InsightGroupCollection
import com.launchdarkly.client.models.InsightScores
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchFailedErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.PostInsightGroupParams
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.ValidationFailedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class InsightsScoresBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create insight group
     * Create insight group
     * @param postInsightGroupParams 
     * @return InsightGroup
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createInsightGroup(postInsightGroupParams: PostInsightGroupParams) : InsightGroup {
        val localVarResponse = createInsightGroupWithHttpInfo(postInsightGroupParams = postInsightGroupParams)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightGroup
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create insight group
     * Create insight group
     * @param postInsightGroupParams 
     * @return ApiResponse<InsightGroup?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createInsightGroupWithHttpInfo(postInsightGroupParams: PostInsightGroupParams) : ApiResponse<InsightGroup?> {
        val localVariableConfig = createInsightGroupRequestConfig(postInsightGroupParams = postInsightGroupParams)

        return request<PostInsightGroupParams, InsightGroup>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createInsightGroup
     *
     * @param postInsightGroupParams 
     * @return RequestConfig
     */
    fun createInsightGroupRequestConfig(postInsightGroupParams: PostInsightGroupParams) : RequestConfig<PostInsightGroupParams> {
        val localVariableBody = postInsightGroupParams
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/engineering-insights/insights/group",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete insight group
     * Delete insight group
     * @param insightGroupKey The insight group key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteInsightGroup(insightGroupKey: kotlin.String) : Unit {
        val localVarResponse = deleteInsightGroupWithHttpInfo(insightGroupKey = insightGroupKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete insight group
     * Delete insight group
     * @param insightGroupKey The insight group key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteInsightGroupWithHttpInfo(insightGroupKey: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteInsightGroupRequestConfig(insightGroupKey = insightGroupKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteInsightGroup
     *
     * @param insightGroupKey The insight group key
     * @return RequestConfig
     */
    fun deleteInsightGroupRequestConfig(insightGroupKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/engineering-insights/insights/groups/{insightGroupKey}".replace("{"+"insightGroupKey"+"}", encodeURIComponent(insightGroupKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get insight group
     * Get insight group  ### Expanding the insight group response  LaunchDarkly supports expanding the insight group response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;scores&#x60; includes details on all of the scores used in the engineering insights metrics views for this group * &#x60;environment&#x60; includes details on each environment associated with this group  For example, use &#x60;?expand&#x3D;scores&#x60; to include the &#x60;scores&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param insightGroupKey The insight group key
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60; (optional)
     * @return InsightGroup
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInsightGroup(insightGroupKey: kotlin.String, expand: kotlin.String? = null) : InsightGroup {
        val localVarResponse = getInsightGroupWithHttpInfo(insightGroupKey = insightGroupKey, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightGroup
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get insight group
     * Get insight group  ### Expanding the insight group response  LaunchDarkly supports expanding the insight group response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;scores&#x60; includes details on all of the scores used in the engineering insights metrics views for this group * &#x60;environment&#x60; includes details on each environment associated with this group  For example, use &#x60;?expand&#x3D;scores&#x60; to include the &#x60;scores&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param insightGroupKey The insight group key
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60; (optional)
     * @return ApiResponse<InsightGroup?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInsightGroupWithHttpInfo(insightGroupKey: kotlin.String, expand: kotlin.String?) : ApiResponse<InsightGroup?> {
        val localVariableConfig = getInsightGroupRequestConfig(insightGroupKey = insightGroupKey, expand = expand)

        return request<Unit, InsightGroup>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInsightGroup
     *
     * @param insightGroupKey The insight group key
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60; (optional)
     * @return RequestConfig
     */
    fun getInsightGroupRequestConfig(insightGroupKey: kotlin.String, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/insights/groups/{insightGroupKey}".replace("{"+"insightGroupKey"+"}", encodeURIComponent(insightGroupKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List insight groups
     * List groups for which you are collecting insights  ### Expanding the insight groups collection response  LaunchDarkly supports expanding the insight groups collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;scores&#x60; includes details on all of the scores used in the engineering insights metrics views for each group * &#x60;environment&#x60; includes details on each environment associated with each group * &#x60;metadata&#x60; includes counts of the number of insight groups with particular indicators, such as \&quot;execellent,\&quot; \&quot;good,\&quot; \&quot;fair,\&quot; and so on.  For example, use &#x60;?expand&#x3D;scores&#x60; to include the &#x60;scores&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param limit The number of insight groups to return. Default is 20. Must be between 1 and 20 inclusive. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Sort flag list by field. Prefix field with &lt;code&gt;-&lt;/code&gt; to sort in descending order. Allowed fields: name (optional)
     * @param query Filter list of insights groups by name. (optional)
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60;, &#x60;metadata&#x60; (optional)
     * @return InsightGroupCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInsightGroups(limit: kotlin.Long? = null, offset: kotlin.Long? = null, sort: kotlin.String? = null, query: kotlin.String? = null, expand: kotlin.String? = null) : InsightGroupCollection {
        val localVarResponse = getInsightGroupsWithHttpInfo(limit = limit, offset = offset, sort = sort, query = query, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightGroupCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List insight groups
     * List groups for which you are collecting insights  ### Expanding the insight groups collection response  LaunchDarkly supports expanding the insight groups collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;scores&#x60; includes details on all of the scores used in the engineering insights metrics views for each group * &#x60;environment&#x60; includes details on each environment associated with each group * &#x60;metadata&#x60; includes counts of the number of insight groups with particular indicators, such as \&quot;execellent,\&quot; \&quot;good,\&quot; \&quot;fair,\&quot; and so on.  For example, use &#x60;?expand&#x3D;scores&#x60; to include the &#x60;scores&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param limit The number of insight groups to return. Default is 20. Must be between 1 and 20 inclusive. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Sort flag list by field. Prefix field with &lt;code&gt;-&lt;/code&gt; to sort in descending order. Allowed fields: name (optional)
     * @param query Filter list of insights groups by name. (optional)
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60;, &#x60;metadata&#x60; (optional)
     * @return ApiResponse<InsightGroupCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInsightGroupsWithHttpInfo(limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, query: kotlin.String?, expand: kotlin.String?) : ApiResponse<InsightGroupCollection?> {
        val localVariableConfig = getInsightGroupsRequestConfig(limit = limit, offset = offset, sort = sort, query = query, expand = expand)

        return request<Unit, InsightGroupCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInsightGroups
     *
     * @param limit The number of insight groups to return. Default is 20. Must be between 1 and 20 inclusive. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Sort flag list by field. Prefix field with &lt;code&gt;-&lt;/code&gt; to sort in descending order. Allowed fields: name (optional)
     * @param query Filter list of insights groups by name. (optional)
     * @param expand Options: &#x60;scores&#x60;, &#x60;environment&#x60;, &#x60;metadata&#x60; (optional)
     * @return RequestConfig
     */
    fun getInsightGroupsRequestConfig(limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, query: kotlin.String?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/insights/groups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get insight scores
     * Return insights scores, based on the given parameters. This data is also used in engineering insights metrics views.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return InsightScores
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInsightsScores(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String? = null) : InsightScores {
        val localVarResponse = getInsightsScoresWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightScores
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get insight scores
     * Return insights scores, based on the given parameters. This data is also used in engineering insights metrics views.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return ApiResponse<InsightScores?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInsightsScoresWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?) : ApiResponse<InsightScores?> {
        val localVariableConfig = getInsightsScoresRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey)

        return request<Unit, InsightScores>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInsightsScores
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return RequestConfig
     */
    fun getInsightsScoresRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                put("environmentKey", listOf(environmentKey.toString()))
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/insights/scores",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Patch insight group
     * Update an insight group. Updating an insight group uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param insightGroupKey The insight group key
     * @param patchOperation 
     * @return InsightGroup
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchInsightGroup(insightGroupKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : InsightGroup {
        val localVarResponse = patchInsightGroupWithHttpInfo(insightGroupKey = insightGroupKey, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightGroup
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Patch insight group
     * Update an insight group. Updating an insight group uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param insightGroupKey The insight group key
     * @param patchOperation 
     * @return ApiResponse<InsightGroup?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchInsightGroupWithHttpInfo(insightGroupKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<InsightGroup?> {
        val localVariableConfig = patchInsightGroupRequestConfig(insightGroupKey = insightGroupKey, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, InsightGroup>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchInsightGroup
     *
     * @param insightGroupKey The insight group key
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchInsightGroupRequestConfig(insightGroupKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/engineering-insights/insights/groups/{insightGroupKey}".replace("{"+"insightGroupKey"+"}", encodeURIComponent(insightGroupKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
