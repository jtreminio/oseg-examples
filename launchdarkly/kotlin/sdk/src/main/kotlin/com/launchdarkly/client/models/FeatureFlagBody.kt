/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.ClientSideAvailabilityPost
import com.launchdarkly.client.models.CustomProperty
import com.launchdarkly.client.models.Defaults
import com.launchdarkly.client.models.FlagPrerequisitePost
import com.launchdarkly.client.models.MigrationSettingsPost
import com.launchdarkly.client.models.Variation

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name A human-friendly name for the feature flag
 * @param key A unique key used to reference the flag in your code
 * @param description Description of the feature flag. Defaults to an empty string.
 * @param includeInSnippet Deprecated, use <code>clientSideAvailability</code>. Whether this flag should be made available to the client-side JavaScript SDK. Defaults to <code>false</code>.
 * @param clientSideAvailability 
 * @param variations An array of possible variations for the flag. The variation values must be unique. If omitted, two boolean variations of <code>true</code> and <code>false</code> will be used.
 * @param temporary Whether the flag is a temporary flag. Defaults to <code>true</code>.
 * @param tags Tags for the feature flag. Defaults to an empty array.
 * @param customProperties 
 * @param defaults 
 * @param purpose Purpose of the flag
 * @param migrationSettings 
 * @param maintainerId The ID of the member who maintains this feature flag
 * @param maintainerTeamKey The key of the team that maintains this feature flag
 * @param initialPrerequisites Initial set of prerequisite flags for all environments
 */


data class FeatureFlagBody (

    /* A human-friendly name for the feature flag */
    @Json(name = "name")
    val name: kotlin.String,

    /* A unique key used to reference the flag in your code */
    @Json(name = "key")
    val key: kotlin.String,

    /* Description of the feature flag. Defaults to an empty string. */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Deprecated, use <code>clientSideAvailability</code>. Whether this flag should be made available to the client-side JavaScript SDK. Defaults to <code>false</code>. */
    @Json(name = "includeInSnippet")
    @Deprecated(message = "This property is deprecated.")
    val includeInSnippet: kotlin.Boolean? = null,

    @Json(name = "clientSideAvailability")
    val clientSideAvailability: ClientSideAvailabilityPost? = null,

    /* An array of possible variations for the flag. The variation values must be unique. If omitted, two boolean variations of <code>true</code> and <code>false</code> will be used. */
    @Json(name = "variations")
    val variations: kotlin.collections.List<Variation>? = null,

    /* Whether the flag is a temporary flag. Defaults to <code>true</code>. */
    @Json(name = "temporary")
    val temporary: kotlin.Boolean? = null,

    /* Tags for the feature flag. Defaults to an empty array. */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "customProperties")
    val customProperties: kotlin.collections.Map<kotlin.String, CustomProperty>? = null,

    @Json(name = "defaults")
    val defaults: Defaults? = null,

    /* Purpose of the flag */
    @Json(name = "purpose")
    val purpose: FeatureFlagBody.Purpose? = null,

    @Json(name = "migrationSettings")
    val migrationSettings: MigrationSettingsPost? = null,

    /* The ID of the member who maintains this feature flag */
    @Json(name = "maintainerId")
    val maintainerId: kotlin.String? = null,

    /* The key of the team that maintains this feature flag */
    @Json(name = "maintainerTeamKey")
    val maintainerTeamKey: kotlin.String? = null,

    /* Initial set of prerequisite flags for all environments */
    @Json(name = "initialPrerequisites")
    val initialPrerequisites: kotlin.collections.List<FlagPrerequisitePost>? = null

) {

    /**
     * Purpose of the flag
     *
     * Values: migration,holdout
     */
    @JsonClass(generateAdapter = false)
    enum class Purpose(val value: kotlin.String) {
        @Json(name = "migration") migration("migration"),
        @Json(name = "holdout") holdout("holdout");
    }

}

