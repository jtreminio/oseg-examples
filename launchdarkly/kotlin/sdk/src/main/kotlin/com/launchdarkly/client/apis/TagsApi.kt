/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.Error
import com.launchdarkly.client.models.TagsCollection

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class TagsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * List tags
     * Get a list of tags.
     * @param kind Fetch tags associated with the specified resource type. Options are &#x60;flag&#x60;, &#x60;project&#x60;, &#x60;environment&#x60;, &#x60;segment&#x60;, &#x60;metric&#x60;. Returns all types by default. (optional)
     * @param pre Return tags with the specified prefix (optional)
     * @param archived Whether or not to return archived flags (optional)
     * @param limit The number of tags to return. Maximum is 1000. (optional)
     * @param offset The index of the first tag to return. Default is 0. (optional)
     * @param asOf The time to retrieve tags as of. Default is the current time. (optional)
     * @return TagsCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTags(kind: kotlin.collections.List<kotlin.String>? = null, pre: kotlin.String? = null, archived: kotlin.Boolean? = null, limit: kotlin.Int? = null, offset: kotlin.Int? = null, asOf: kotlin.String? = null) : TagsCollection {
        val localVarResponse = getTagsWithHttpInfo(kind = kind, pre = pre, archived = archived, limit = limit, offset = offset, asOf = asOf)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TagsCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List tags
     * Get a list of tags.
     * @param kind Fetch tags associated with the specified resource type. Options are &#x60;flag&#x60;, &#x60;project&#x60;, &#x60;environment&#x60;, &#x60;segment&#x60;, &#x60;metric&#x60;. Returns all types by default. (optional)
     * @param pre Return tags with the specified prefix (optional)
     * @param archived Whether or not to return archived flags (optional)
     * @param limit The number of tags to return. Maximum is 1000. (optional)
     * @param offset The index of the first tag to return. Default is 0. (optional)
     * @param asOf The time to retrieve tags as of. Default is the current time. (optional)
     * @return ApiResponse<TagsCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTagsWithHttpInfo(kind: kotlin.collections.List<kotlin.String>?, pre: kotlin.String?, archived: kotlin.Boolean?, limit: kotlin.Int?, offset: kotlin.Int?, asOf: kotlin.String?) : ApiResponse<TagsCollection?> {
        val localVariableConfig = getTagsRequestConfig(kind = kind, pre = pre, archived = archived, limit = limit, offset = offset, asOf = asOf)

        return request<Unit, TagsCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTags
     *
     * @param kind Fetch tags associated with the specified resource type. Options are &#x60;flag&#x60;, &#x60;project&#x60;, &#x60;environment&#x60;, &#x60;segment&#x60;, &#x60;metric&#x60;. Returns all types by default. (optional)
     * @param pre Return tags with the specified prefix (optional)
     * @param archived Whether or not to return archived flags (optional)
     * @param limit The number of tags to return. Maximum is 1000. (optional)
     * @param offset The index of the first tag to return. Default is 0. (optional)
     * @param asOf The time to retrieve tags as of. Default is the current time. (optional)
     * @return RequestConfig
     */
    fun getTagsRequestConfig(kind: kotlin.collections.List<kotlin.String>?, pre: kotlin.String?, archived: kotlin.Boolean?, limit: kotlin.Int?, offset: kotlin.Int?, asOf: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (kind != null) {
                    put("kind", toMultiValue(kind.toList(), "multi"))
                }
                if (pre != null) {
                    put("pre", listOf(pre.toString()))
                }
                if (archived != null) {
                    put("archived", listOf(archived.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (asOf != null) {
                    put("asOf", listOf(asOf.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/tags",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
