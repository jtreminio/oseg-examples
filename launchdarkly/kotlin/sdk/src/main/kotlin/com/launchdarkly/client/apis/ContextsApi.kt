/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ContextAttributeNamesCollection
import com.launchdarkly.client.models.ContextAttributeValuesCollection
import com.launchdarkly.client.models.ContextInstanceEvaluations
import com.launchdarkly.client.models.ContextInstanceSearch
import com.launchdarkly.client.models.ContextInstances
import com.launchdarkly.client.models.ContextKindsCollectionRep
import com.launchdarkly.client.models.ContextSearch
import com.launchdarkly.client.models.Contexts
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.UpsertContextKindPayload
import com.launchdarkly.client.models.UpsertResponseRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class ContextsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Delete context instances
     * Delete context instances by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteContextInstances(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : Unit {
        val localVarResponse = deleteContextInstancesWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete context instances
     * Delete context instances by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteContextInstancesWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteContextInstancesRequestConfig(projectKey = projectKey, environmentKey = environmentKey, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteContextInstances
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @return RequestConfig
     */
    fun deleteContextInstancesRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Evaluate flags for context instance
     * Evaluate flags for a context instance, for example, to determine the expected flag variation. **Do not use this API instead of an SDK.** The LaunchDarkly SDKs are specialized for the tasks of evaluating feature flags in your application at scale and generating analytics events based on those evaluations. This API is not designed for that use case. Any evaluations you perform with this API will not be reflected in features such as flag statuses and flag insights. Context instances evaluated by this API will not appear in the Contexts list. To learn more, read [Comparing LaunchDarkly&#39;s SDKs and REST API](https://docs.launchdarkly.com/guide/api/comparing-sdk-rest-api).  ### Filtering   LaunchDarkly supports the &#x60;filter&#x60; query param for filtering, with the following fields:  - &#x60;query&#x60; filters for a string that matches against the flags&#39; keys and names. It is not case sensitive. For example: &#x60;filter&#x3D;query equals dark-mode&#x60;. - &#x60;tags&#x60; filters the list to flags that have all of the tags in the list. For example: &#x60;filter&#x3D;tags contains [\&quot;beta\&quot;,\&quot;q1\&quot;]&#x60;.  You can also apply multiple filters at once. For example, setting &#x60;filter&#x3D;query equals dark-mode, tags contains [\&quot;beta\&quot;,\&quot;q1\&quot;]&#x60; matches flags which match the key or name &#x60;dark-mode&#x60; and are tagged &#x60;beta&#x60; and &#x60;q1&#x60;. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param requestBody 
     * @param limit The number of feature flags to return. Defaults to -1, which returns all flags (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order (optional)
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @return ContextInstanceEvaluations
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun evaluateContextInstance(projectKey: kotlin.String, environmentKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>, limit: kotlin.Long? = null, offset: kotlin.Long? = null, sort: kotlin.String? = null, filter: kotlin.String? = null) : ContextInstanceEvaluations {
        val localVarResponse = evaluateContextInstanceWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, requestBody = requestBody, limit = limit, offset = offset, sort = sort, filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextInstanceEvaluations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Evaluate flags for context instance
     * Evaluate flags for a context instance, for example, to determine the expected flag variation. **Do not use this API instead of an SDK.** The LaunchDarkly SDKs are specialized for the tasks of evaluating feature flags in your application at scale and generating analytics events based on those evaluations. This API is not designed for that use case. Any evaluations you perform with this API will not be reflected in features such as flag statuses and flag insights. Context instances evaluated by this API will not appear in the Contexts list. To learn more, read [Comparing LaunchDarkly&#39;s SDKs and REST API](https://docs.launchdarkly.com/guide/api/comparing-sdk-rest-api).  ### Filtering   LaunchDarkly supports the &#x60;filter&#x60; query param for filtering, with the following fields:  - &#x60;query&#x60; filters for a string that matches against the flags&#39; keys and names. It is not case sensitive. For example: &#x60;filter&#x3D;query equals dark-mode&#x60;. - &#x60;tags&#x60; filters the list to flags that have all of the tags in the list. For example: &#x60;filter&#x3D;tags contains [\&quot;beta\&quot;,\&quot;q1\&quot;]&#x60;.  You can also apply multiple filters at once. For example, setting &#x60;filter&#x3D;query equals dark-mode, tags contains [\&quot;beta\&quot;,\&quot;q1\&quot;]&#x60; matches flags which match the key or name &#x60;dark-mode&#x60; and are tagged &#x60;beta&#x60; and &#x60;q1&#x60;. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param requestBody 
     * @param limit The number of feature flags to return. Defaults to -1, which returns all flags (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order (optional)
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @return ApiResponse<ContextInstanceEvaluations?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun evaluateContextInstanceWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, filter: kotlin.String?) : ApiResponse<ContextInstanceEvaluations?> {
        val localVariableConfig = evaluateContextInstanceRequestConfig(projectKey = projectKey, environmentKey = environmentKey, requestBody = requestBody, limit = limit, offset = offset, sort = sort, filter = filter)

        return request<kotlin.collections.Map<kotlin.String, kotlin.Any>, ContextInstanceEvaluations>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation evaluateContextInstance
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param requestBody 
     * @param limit The number of feature flags to return. Defaults to -1, which returns all flags (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort A comma-separated list of fields to sort by. Fields prefixed by a dash ( - ) sort in descending order (optional)
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @return RequestConfig
     */
    fun evaluateContextInstanceRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, requestBody: kotlin.collections.Map<kotlin.String, kotlin.Any>, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, filter: kotlin.String?) : RequestConfig<kotlin.collections.Map<kotlin.String, kotlin.Any>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/flags/evaluate".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get context attribute names
     * Get context attribute names.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;name&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 100) (optional)
     * @return ContextAttributeNamesCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContextAttributeNames(projectKey: kotlin.String, environmentKey: kotlin.String, filter: kotlin.String? = null, limit: kotlin.Long? = null) : ContextAttributeNamesCollection {
        val localVarResponse = getContextAttributeNamesWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, filter = filter, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextAttributeNamesCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get context attribute names
     * Get context attribute names.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;name&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 100) (optional)
     * @return ApiResponse<ContextAttributeNamesCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContextAttributeNamesWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?) : ApiResponse<ContextAttributeNamesCollection?> {
        val localVariableConfig = getContextAttributeNamesRequestConfig(projectKey = projectKey, environmentKey = environmentKey, filter = filter, limit = limit)

        return request<Unit, ContextAttributeNamesCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContextAttributeNames
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;name&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 100) (optional)
     * @return RequestConfig
     */
    fun getContextAttributeNamesRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/context-attributes".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get context attribute values
     * Get context attribute values.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param attributeName The attribute name
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;value&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 50) (optional)
     * @return ContextAttributeValuesCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContextAttributeValues(projectKey: kotlin.String, environmentKey: kotlin.String, attributeName: kotlin.String, filter: kotlin.String? = null, limit: kotlin.Long? = null) : ContextAttributeValuesCollection {
        val localVarResponse = getContextAttributeValuesWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, attributeName = attributeName, filter = filter, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextAttributeValuesCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get context attribute values
     * Get context attribute values.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param attributeName The attribute name
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;value&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 50) (optional)
     * @return ApiResponse<ContextAttributeValuesCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContextAttributeValuesWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, attributeName: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?) : ApiResponse<ContextAttributeValuesCollection?> {
        val localVariableConfig = getContextAttributeValuesRequestConfig(projectKey = projectKey, environmentKey = environmentKey, attributeName = attributeName, filter = filter, limit = limit)

        return request<Unit, ContextAttributeValuesCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContextAttributeValues
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param attributeName The attribute name
     * @param filter A comma-separated list of context filters. This endpoint only accepts &#x60;kind&#x60; filters, with the &#x60;equals&#x60; operator, and &#x60;value&#x60; filters, with the &#x60;startsWith&#x60; operator. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 100, default: 50) (optional)
     * @return RequestConfig
     */
    fun getContextAttributeValuesRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, attributeName: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/context-attributes/{attributeName}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"attributeName"+"}", encodeURIComponent(attributeName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get context instances
     * Get context instances by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @param limit Specifies the maximum number of context instances to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return ContextInstances
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContextInstances(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, limit: kotlin.Long? = null, continuationToken: kotlin.String? = null, sort: kotlin.String? = null, filter: kotlin.String? = null, includeTotalCount: kotlin.Boolean? = null) : ContextInstances {
        val localVarResponse = getContextInstancesWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, id = id, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextInstances
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get context instances
     * Get context instances by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @param limit Specifies the maximum number of context instances to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return ApiResponse<ContextInstances?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContextInstancesWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : ApiResponse<ContextInstances?> {
        val localVariableConfig = getContextInstancesRequestConfig(projectKey = projectKey, environmentKey = environmentKey, id = id, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return request<Unit, ContextInstances>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContextInstances
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param id The context instance ID
     * @param limit Specifies the maximum number of context instances to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return RequestConfig
     */
    fun getContextInstancesRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (continuationToken != null) {
                    put("continuationToken", listOf(continuationToken.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (includeTotalCount != null) {
                    put("includeTotalCount", listOf(includeTotalCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get context kinds
     * Get all context kinds for a given project.
     * @param projectKey The project key
     * @return ContextKindsCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContextKindsByProjectKey(projectKey: kotlin.String) : ContextKindsCollectionRep {
        val localVarResponse = getContextKindsByProjectKeyWithHttpInfo(projectKey = projectKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextKindsCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get context kinds
     * Get all context kinds for a given project.
     * @param projectKey The project key
     * @return ApiResponse<ContextKindsCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContextKindsByProjectKeyWithHttpInfo(projectKey: kotlin.String) : ApiResponse<ContextKindsCollectionRep?> {
        val localVariableConfig = getContextKindsByProjectKeyRequestConfig(projectKey = projectKey)

        return request<Unit, ContextKindsCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContextKindsByProjectKey
     *
     * @param projectKey The project key
     * @return RequestConfig
     */
    fun getContextKindsByProjectKeyRequestConfig(projectKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/context-kinds".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get contexts
     * Get contexts based on kind and key.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param kind The context kind
     * @param key The context key
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return Contexts
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContexts(projectKey: kotlin.String, environmentKey: kotlin.String, kind: kotlin.String, key: kotlin.String, limit: kotlin.Long? = null, continuationToken: kotlin.String? = null, sort: kotlin.String? = null, filter: kotlin.String? = null, includeTotalCount: kotlin.Boolean? = null) : Contexts {
        val localVarResponse = getContextsWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, kind = kind, key = key, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Contexts
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get contexts
     * Get contexts based on kind and key.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param kind The context kind
     * @param key The context key
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return ApiResponse<Contexts?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getContextsWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, kind: kotlin.String, key: kotlin.String, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : ApiResponse<Contexts?> {
        val localVariableConfig = getContextsRequestConfig(projectKey = projectKey, environmentKey = environmentKey, kind = kind, key = key, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return request<Unit, Contexts>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getContexts
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param kind The context kind
     * @param key The context key
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return RequestConfig
     */
    fun getContextsRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, kind: kotlin.String, key: kotlin.String, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (continuationToken != null) {
                    put("continuationToken", listOf(continuationToken.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (includeTotalCount != null) {
                    put("includeTotalCount", listOf(includeTotalCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/contexts/{kind}/{key}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"kind"+"}", encodeURIComponent(kind.toString())).replace("{"+"key"+"}", encodeURIComponent(key.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create or update context kind
     * Create or update a context kind by key. Only the included fields will be updated.
     * @param projectKey The project key
     * @param key The context kind key
     * @param upsertContextKindPayload 
     * @return UpsertResponseRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putContextKind(projectKey: kotlin.String, key: kotlin.String, upsertContextKindPayload: UpsertContextKindPayload) : UpsertResponseRep {
        val localVarResponse = putContextKindWithHttpInfo(projectKey = projectKey, key = key, upsertContextKindPayload = upsertContextKindPayload)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpsertResponseRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create or update context kind
     * Create or update a context kind by key. Only the included fields will be updated.
     * @param projectKey The project key
     * @param key The context kind key
     * @param upsertContextKindPayload 
     * @return ApiResponse<UpsertResponseRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putContextKindWithHttpInfo(projectKey: kotlin.String, key: kotlin.String, upsertContextKindPayload: UpsertContextKindPayload) : ApiResponse<UpsertResponseRep?> {
        val localVariableConfig = putContextKindRequestConfig(projectKey = projectKey, key = key, upsertContextKindPayload = upsertContextKindPayload)

        return request<UpsertContextKindPayload, UpsertResponseRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putContextKind
     *
     * @param projectKey The project key
     * @param key The context kind key
     * @param upsertContextKindPayload 
     * @return RequestConfig
     */
    fun putContextKindRequestConfig(projectKey: kotlin.String, key: kotlin.String, upsertContextKindPayload: UpsertContextKindPayload) : RequestConfig<UpsertContextKindPayload> {
        val localVariableBody = upsertContextKindPayload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/projects/{projectKey}/context-kinds/{key}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"key"+"}", encodeURIComponent(key.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search for context instances
     *  Search for context instances.  You can use either the query parameters or the request body parameters. If both are provided, there is an error.  To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). To learn more about context instances, read [Context instances](https://docs.launchdarkly.com/home/observability/multi-contexts#context-instances). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextInstanceSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return ContextInstances
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchContextInstances(projectKey: kotlin.String, environmentKey: kotlin.String, contextInstanceSearch: ContextInstanceSearch, limit: kotlin.Long? = null, continuationToken: kotlin.String? = null, sort: kotlin.String? = null, filter: kotlin.String? = null, includeTotalCount: kotlin.Boolean? = null) : ContextInstances {
        val localVarResponse = searchContextInstancesWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, contextInstanceSearch = contextInstanceSearch, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContextInstances
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search for context instances
     *  Search for context instances.  You can use either the query parameters or the request body parameters. If both are provided, there is an error.  To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). To learn more about context instances, read [Context instances](https://docs.launchdarkly.com/home/observability/multi-contexts#context-instances). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextInstanceSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return ApiResponse<ContextInstances?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchContextInstancesWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, contextInstanceSearch: ContextInstanceSearch, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : ApiResponse<ContextInstances?> {
        val localVariableConfig = searchContextInstancesRequestConfig(projectKey = projectKey, environmentKey = environmentKey, contextInstanceSearch = contextInstanceSearch, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return request<ContextInstanceSearch, ContextInstances>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchContextInstances
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextInstanceSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to context instances with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. This endpoint only accepts an &#x60;applicationId&#x60; filter. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching context instances. Defaults to true. (optional)
     * @return RequestConfig
     */
    fun searchContextInstancesRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, contextInstanceSearch: ContextInstanceSearch, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : RequestConfig<ContextInstanceSearch> {
        val localVariableBody = contextInstanceSearch
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (continuationToken != null) {
                    put("continuationToken", listOf(continuationToken.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (includeTotalCount != null) {
                    put("includeTotalCount", listOf(includeTotalCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/context-instances/search".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search for contexts
     *  Search for contexts.  You can use either the query parameters or the request body parameters. If both are provided, there is an error.  To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). To learn more about contexts, read [Contexts and context kinds](https://docs.launchdarkly.com/home/observability/contexts#contexts-and-context-kinds). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return Contexts
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchContexts(projectKey: kotlin.String, environmentKey: kotlin.String, contextSearch: ContextSearch, limit: kotlin.Long? = null, continuationToken: kotlin.String? = null, sort: kotlin.String? = null, filter: kotlin.String? = null, includeTotalCount: kotlin.Boolean? = null) : Contexts {
        val localVarResponse = searchContextsWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, contextSearch = contextSearch, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Contexts
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search for contexts
     *  Search for contexts.  You can use either the query parameters or the request body parameters. If both are provided, there is an error.  To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). To learn more about contexts, read [Contexts and context kinds](https://docs.launchdarkly.com/home/observability/contexts#contexts-and-context-kinds). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return ApiResponse<Contexts?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchContextsWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, contextSearch: ContextSearch, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : ApiResponse<Contexts?> {
        val localVariableConfig = searchContextsRequestConfig(projectKey = projectKey, environmentKey = environmentKey, contextSearch = contextSearch, limit = limit, continuationToken = continuationToken, sort = sort, filter = filter, includeTotalCount = includeTotalCount)

        return request<ContextSearch, Contexts>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchContexts
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param contextSearch 
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param continuationToken Limits results to contexts with sort values after the value specified. You can use this for pagination, however, we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports sorting by timestamp in ascending order by specifying &#x60;ts&#x60; for this value, or descending order by specifying &#x60;-ts&#x60;. (optional)
     * @param filter A comma-separated list of context filters. To learn more about the filter syntax, read [Filtering contexts and context instances](/tag/Contexts#filtering-contexts-and-context-instances). (optional)
     * @param includeTotalCount Specifies whether to include or omit the total count of matching contexts. Defaults to true. (optional)
     * @return RequestConfig
     */
    fun searchContextsRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, contextSearch: ContextSearch, limit: kotlin.Long?, continuationToken: kotlin.String?, sort: kotlin.String?, filter: kotlin.String?, includeTotalCount: kotlin.Boolean?) : RequestConfig<ContextSearch> {
        val localVariableBody = contextSearch
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (continuationToken != null) {
                    put("continuationToken", listOf(continuationToken.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (includeTotalCount != null) {
                    put("includeTotalCount", listOf(includeTotalCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/environments/{environmentKey}/contexts/search".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
