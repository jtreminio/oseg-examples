/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.DependentMetricGroupRepWithMetrics
import com.launchdarkly.client.models.DependentMetricOrMetricGroupRep
import com.launchdarkly.client.models.FlagRep
import com.launchdarkly.client.models.LayerSnapshotRep
import com.launchdarkly.client.models.MetricV2Rep
import com.launchdarkly.client.models.TreatmentRep

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param hypothesis The expected outcome of this experiment
 * @param status The status of the iteration: <code>not_started</code>, <code>running</code>, <code>stopped</code>
 * @param createdAt 
 * @param id The iteration ID
 * @param startedAt 
 * @param endedAt 
 * @param winningTreatmentId The ID of the treatment chosen when the experiment stopped
 * @param winningReason The reason you stopped the experiment
 * @param canReshuffleTraffic Whether the experiment may reassign traffic to different variations when the experiment audience changes (true) or must keep all traffic assigned to its initial variation (false).
 * @param flags Details on the flag used in this experiment
 * @param primaryMetric 
 * @param primarySingleMetric 
 * @param primaryFunnel 
 * @param randomizationUnit The unit of randomization for this iteration
 * @param attributes The available attribute filters for this iteration
 * @param treatments Details on the variations you are testing in the experiment
 * @param secondaryMetrics Deprecated, use <code>metrics</code> instead. Details on the secondary metrics for this experiment.
 * @param metrics Details on the metrics for this experiment
 * @param layerSnapshot 
 */


data class IterationRep (

    /* The expected outcome of this experiment */
    @Json(name = "hypothesis")
    val hypothesis: kotlin.String,

    /* The status of the iteration: <code>not_started</code>, <code>running</code>, <code>stopped</code> */
    @Json(name = "status")
    val status: kotlin.String,

    @Json(name = "createdAt")
    val createdAt: kotlin.Long,

    /* The iteration ID */
    @Json(name = "_id")
    val id: kotlin.String? = null,

    @Json(name = "startedAt")
    val startedAt: kotlin.Long? = null,

    @Json(name = "endedAt")
    val endedAt: kotlin.Long? = null,

    /* The ID of the treatment chosen when the experiment stopped */
    @Json(name = "winningTreatmentId")
    val winningTreatmentId: kotlin.String? = null,

    /* The reason you stopped the experiment */
    @Json(name = "winningReason")
    val winningReason: kotlin.String? = null,

    /* Whether the experiment may reassign traffic to different variations when the experiment audience changes (true) or must keep all traffic assigned to its initial variation (false). */
    @Json(name = "canReshuffleTraffic")
    val canReshuffleTraffic: kotlin.Boolean? = null,

    /* Details on the flag used in this experiment */
    @Json(name = "flags")
    val flags: kotlin.collections.Map<kotlin.String, FlagRep>? = null,

    @Json(name = "primaryMetric")
    val primaryMetric: DependentMetricOrMetricGroupRep? = null,

    @Json(name = "primarySingleMetric")
    val primarySingleMetric: MetricV2Rep? = null,

    @Json(name = "primaryFunnel")
    val primaryFunnel: DependentMetricGroupRepWithMetrics? = null,

    /* The unit of randomization for this iteration */
    @Json(name = "randomizationUnit")
    val randomizationUnit: kotlin.String? = null,

    /* The available attribute filters for this iteration */
    @Json(name = "attributes")
    val attributes: kotlin.collections.List<kotlin.String>? = null,

    /* Details on the variations you are testing in the experiment */
    @Json(name = "treatments")
    val treatments: kotlin.collections.List<TreatmentRep>? = null,

    /* Deprecated, use <code>metrics</code> instead. Details on the secondary metrics for this experiment. */
    @Json(name = "secondaryMetrics")
    @Deprecated(message = "This property is deprecated.")
    val secondaryMetrics: kotlin.collections.List<MetricV2Rep>? = null,

    /* Details on the metrics for this experiment */
    @Json(name = "metrics")
    val metrics: kotlin.collections.List<DependentMetricOrMetricGroupRep>? = null,

    @Json(name = "layerSnapshot")
    val layerSnapshot: LayerSnapshotRep? = null

) {


}

