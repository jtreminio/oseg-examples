/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.IntegrationDeliveryConfiguration
import com.launchdarkly.client.models.IntegrationDeliveryConfigurationCollection
import com.launchdarkly.client.models.IntegrationDeliveryConfigurationPost
import com.launchdarkly.client.models.IntegrationDeliveryConfigurationResponse
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchFailedErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class IntegrationDeliveryConfigurationsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create delivery configuration
     * Create a delivery configuration.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param integrationDeliveryConfigurationPost 
     * @return IntegrationDeliveryConfiguration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createIntegrationDeliveryConfiguration(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, integrationDeliveryConfigurationPost: IntegrationDeliveryConfigurationPost) : IntegrationDeliveryConfiguration {
        val localVarResponse = createIntegrationDeliveryConfigurationWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, integrationDeliveryConfigurationPost = integrationDeliveryConfigurationPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfiguration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create delivery configuration
     * Create a delivery configuration.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param integrationDeliveryConfigurationPost 
     * @return ApiResponse<IntegrationDeliveryConfiguration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createIntegrationDeliveryConfigurationWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, integrationDeliveryConfigurationPost: IntegrationDeliveryConfigurationPost) : ApiResponse<IntegrationDeliveryConfiguration?> {
        val localVariableConfig = createIntegrationDeliveryConfigurationRequestConfig(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, integrationDeliveryConfigurationPost = integrationDeliveryConfigurationPost)

        return request<IntegrationDeliveryConfigurationPost, IntegrationDeliveryConfiguration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createIntegrationDeliveryConfiguration
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param integrationDeliveryConfigurationPost 
     * @return RequestConfig
     */
    fun createIntegrationDeliveryConfigurationRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, integrationDeliveryConfigurationPost: IntegrationDeliveryConfigurationPost) : RequestConfig<IntegrationDeliveryConfigurationPost> {
        val localVariableBody = integrationDeliveryConfigurationPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete delivery configuration
     * Delete a delivery configuration.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteIntegrationDeliveryConfiguration(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : Unit {
        val localVarResponse = deleteIntegrationDeliveryConfigurationWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete delivery configuration
     * Delete a delivery configuration.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteIntegrationDeliveryConfigurationWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteIntegrationDeliveryConfigurationRequestConfig(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteIntegrationDeliveryConfiguration
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return RequestConfig
     */
    fun deleteIntegrationDeliveryConfigurationRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get delivery configurations by environment
     * Get delivery configurations by environment.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @return IntegrationDeliveryConfigurationCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIntegrationDeliveryConfigurationByEnvironment(projectKey: kotlin.String, environmentKey: kotlin.String) : IntegrationDeliveryConfigurationCollection {
        val localVarResponse = getIntegrationDeliveryConfigurationByEnvironmentWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfigurationCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get delivery configurations by environment
     * Get delivery configurations by environment.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @return ApiResponse<IntegrationDeliveryConfigurationCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIntegrationDeliveryConfigurationByEnvironmentWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String) : ApiResponse<IntegrationDeliveryConfigurationCollection?> {
        val localVariableConfig = getIntegrationDeliveryConfigurationByEnvironmentRequestConfig(projectKey = projectKey, environmentKey = environmentKey)

        return request<Unit, IntegrationDeliveryConfigurationCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIntegrationDeliveryConfigurationByEnvironment
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @return RequestConfig
     */
    fun getIntegrationDeliveryConfigurationByEnvironmentRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get delivery configuration by ID
     * Get delivery configuration by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return IntegrationDeliveryConfiguration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIntegrationDeliveryConfigurationById(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : IntegrationDeliveryConfiguration {
        val localVarResponse = getIntegrationDeliveryConfigurationByIdWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfiguration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get delivery configuration by ID
     * Get delivery configuration by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return ApiResponse<IntegrationDeliveryConfiguration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIntegrationDeliveryConfigurationByIdWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : ApiResponse<IntegrationDeliveryConfiguration?> {
        val localVariableConfig = getIntegrationDeliveryConfigurationByIdRequestConfig(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return request<Unit, IntegrationDeliveryConfiguration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIntegrationDeliveryConfigurationById
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return RequestConfig
     */
    fun getIntegrationDeliveryConfigurationByIdRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List all delivery configurations
     * List all delivery configurations.
     * @return IntegrationDeliveryConfigurationCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIntegrationDeliveryConfigurations() : IntegrationDeliveryConfigurationCollection {
        val localVarResponse = getIntegrationDeliveryConfigurationsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfigurationCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List all delivery configurations
     * List all delivery configurations.
     * @return ApiResponse<IntegrationDeliveryConfigurationCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIntegrationDeliveryConfigurationsWithHttpInfo() : ApiResponse<IntegrationDeliveryConfigurationCollection?> {
        val localVariableConfig = getIntegrationDeliveryConfigurationsRequestConfig()

        return request<Unit, IntegrationDeliveryConfigurationCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIntegrationDeliveryConfigurations
     *
     * @return RequestConfig
     */
    fun getIntegrationDeliveryConfigurationsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-capabilities/featureStore",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update delivery configuration
     * Update an integration delivery configuration. Updating an integration delivery configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @param patchOperation 
     * @return IntegrationDeliveryConfiguration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchIntegrationDeliveryConfiguration(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : IntegrationDeliveryConfiguration {
        val localVarResponse = patchIntegrationDeliveryConfigurationWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfiguration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update delivery configuration
     * Update an integration delivery configuration. Updating an integration delivery configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @param patchOperation 
     * @return ApiResponse<IntegrationDeliveryConfiguration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchIntegrationDeliveryConfigurationWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<IntegrationDeliveryConfiguration?> {
        val localVariableConfig = patchIntegrationDeliveryConfigurationRequestConfig(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, IntegrationDeliveryConfiguration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchIntegrationDeliveryConfiguration
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchIntegrationDeliveryConfigurationRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Validate delivery configuration
     * Validate the saved delivery configuration, using the &#x60;validationRequest&#x60; in the integration&#39;s &#x60;manifest.json&#x60; file.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return IntegrationDeliveryConfigurationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun validateIntegrationDeliveryConfiguration(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : IntegrationDeliveryConfigurationResponse {
        val localVarResponse = validateIntegrationDeliveryConfigurationWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IntegrationDeliveryConfigurationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Validate delivery configuration
     * Validate the saved delivery configuration, using the &#x60;validationRequest&#x60; in the integration&#39;s &#x60;manifest.json&#x60; file.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return ApiResponse<IntegrationDeliveryConfigurationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun validateIntegrationDeliveryConfigurationWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : ApiResponse<IntegrationDeliveryConfigurationResponse?> {
        val localVariableConfig = validateIntegrationDeliveryConfigurationRequestConfig(projectKey = projectKey, environmentKey = environmentKey, integrationKey = integrationKey, id = id)

        return request<Unit, IntegrationDeliveryConfigurationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation validateIntegrationDeliveryConfiguration
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param integrationKey The integration key
     * @param id The configuration ID
     * @return RequestConfig
     */
    fun validateIntegrationDeliveryConfigurationRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, integrationKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/integration-capabilities/featureStore/{projectKey}/{environmentKey}/{integrationKey}/{id}/validate".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
