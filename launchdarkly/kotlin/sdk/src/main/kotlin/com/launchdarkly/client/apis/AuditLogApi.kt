/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.AuditLogEntryListingRepCollection
import com.launchdarkly.client.models.AuditLogEntryRep
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatementPost
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class AuditLogApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * List audit log entries
     * Get a list of all audit log entries. The query parameters let you restrict the results that return by date ranges, resource specifiers, or a full-text search query.  LaunchDarkly uses a resource specifier syntax to name resources or collections of resources. To learn more, read [About the resource specifier syntax](https://docs.launchdarkly.com/home/account/role-resources#about-the-resource-specifier-syntax). 
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries this returns occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries this returns occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param spec A resource specifier that lets you filter audit log listings by resource (optional)
     * @return AuditLogEntryListingRepCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAuditLogEntries(before: kotlin.Long? = null, after: kotlin.Long? = null, q: kotlin.String? = null, limit: kotlin.Long? = null, spec: kotlin.String? = null) : AuditLogEntryListingRepCollection {
        val localVarResponse = getAuditLogEntriesWithHttpInfo(before = before, after = after, q = q, limit = limit, spec = spec)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuditLogEntryListingRepCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List audit log entries
     * Get a list of all audit log entries. The query parameters let you restrict the results that return by date ranges, resource specifiers, or a full-text search query.  LaunchDarkly uses a resource specifier syntax to name resources or collections of resources. To learn more, read [About the resource specifier syntax](https://docs.launchdarkly.com/home/account/role-resources#about-the-resource-specifier-syntax). 
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries this returns occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries this returns occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param spec A resource specifier that lets you filter audit log listings by resource (optional)
     * @return ApiResponse<AuditLogEntryListingRepCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAuditLogEntriesWithHttpInfo(before: kotlin.Long?, after: kotlin.Long?, q: kotlin.String?, limit: kotlin.Long?, spec: kotlin.String?) : ApiResponse<AuditLogEntryListingRepCollection?> {
        val localVariableConfig = getAuditLogEntriesRequestConfig(before = before, after = after, q = q, limit = limit, spec = spec)

        return request<Unit, AuditLogEntryListingRepCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAuditLogEntries
     *
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries this returns occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries this returns occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param spec A resource specifier that lets you filter audit log listings by resource (optional)
     * @return RequestConfig
     */
    fun getAuditLogEntriesRequestConfig(before: kotlin.Long?, after: kotlin.Long?, q: kotlin.String?, limit: kotlin.Long?, spec: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (spec != null) {
                    put("spec", listOf(spec.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/auditlog",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get audit log entry
     * Fetch a detailed audit log entry representation. The detailed representation includes several fields that are not present in the summary representation, including:  - &#x60;delta&#x60;: the JSON patch body that was used in the request to update the entity - &#x60;previousVersion&#x60;: a JSON representation of the previous version of the entity - &#x60;currentVersion&#x60;: a JSON representation of the current version of the entity 
     * @param id The ID of the audit log entry
     * @return AuditLogEntryRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAuditLogEntry(id: kotlin.String) : AuditLogEntryRep {
        val localVarResponse = getAuditLogEntryWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuditLogEntryRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get audit log entry
     * Fetch a detailed audit log entry representation. The detailed representation includes several fields that are not present in the summary representation, including:  - &#x60;delta&#x60;: the JSON patch body that was used in the request to update the entity - &#x60;previousVersion&#x60;: a JSON representation of the previous version of the entity - &#x60;currentVersion&#x60;: a JSON representation of the current version of the entity 
     * @param id The ID of the audit log entry
     * @return ApiResponse<AuditLogEntryRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAuditLogEntryWithHttpInfo(id: kotlin.String) : ApiResponse<AuditLogEntryRep?> {
        val localVariableConfig = getAuditLogEntryRequestConfig(id = id)

        return request<Unit, AuditLogEntryRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAuditLogEntry
     *
     * @param id The ID of the audit log entry
     * @return RequestConfig
     */
    fun getAuditLogEntryRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/auditlog/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search audit log entries
     * Search your audit log entries. The query parameters let you restrict the results that return by date ranges, or a full-text search query. The request body lets you restrict the results that return by resource specifiers.  LaunchDarkly uses a resource specifier syntax to name resources or collections of resources. To learn more, read [About the resource specifier syntax](https://docs.launchdarkly.com/home/account/role-resources#about-the-resource-specifier-syntax). 
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries returned occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param statementPost  (optional)
     * @return AuditLogEntryListingRepCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postAuditLogEntries(before: kotlin.Long? = null, after: kotlin.Long? = null, q: kotlin.String? = null, limit: kotlin.Long? = null, statementPost: kotlin.collections.List<StatementPost>? = null) : AuditLogEntryListingRepCollection {
        val localVarResponse = postAuditLogEntriesWithHttpInfo(before = before, after = after, q = q, limit = limit, statementPost = statementPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuditLogEntryListingRepCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search audit log entries
     * Search your audit log entries. The query parameters let you restrict the results that return by date ranges, or a full-text search query. The request body lets you restrict the results that return by resource specifiers.  LaunchDarkly uses a resource specifier syntax to name resources or collections of resources. To learn more, read [About the resource specifier syntax](https://docs.launchdarkly.com/home/account/role-resources#about-the-resource-specifier-syntax). 
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries returned occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param statementPost  (optional)
     * @return ApiResponse<AuditLogEntryListingRepCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postAuditLogEntriesWithHttpInfo(before: kotlin.Long?, after: kotlin.Long?, q: kotlin.String?, limit: kotlin.Long?, statementPost: kotlin.collections.List<StatementPost>?) : ApiResponse<AuditLogEntryListingRepCollection?> {
        val localVariableConfig = postAuditLogEntriesRequestConfig(before = before, after = after, q = q, limit = limit, statementPost = statementPost)

        return request<kotlin.collections.List<StatementPost>, AuditLogEntryListingRepCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postAuditLogEntries
     *
     * @param before A timestamp filter, expressed as a Unix epoch time in milliseconds.  All entries returned occurred before the timestamp. (optional)
     * @param after A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned occurred after the timestamp. (optional)
     * @param q Text to search for. You can search for the full or partial name of the resource. (optional)
     * @param limit A limit on the number of audit log entries that return. Set between 1 and 20. The default is 10. (optional)
     * @param statementPost  (optional)
     * @return RequestConfig
     */
    fun postAuditLogEntriesRequestConfig(before: kotlin.Long?, after: kotlin.Long?, q: kotlin.String?, limit: kotlin.Long?, statementPost: kotlin.collections.List<StatementPost>?) : RequestConfig<kotlin.collections.List<StatementPost>> {
        val localVariableBody = statementPost
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/auditlog",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
