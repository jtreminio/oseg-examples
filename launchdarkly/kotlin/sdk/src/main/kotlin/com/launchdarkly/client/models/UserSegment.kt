/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.Access
import com.launchdarkly.client.models.FlagListingRep
import com.launchdarkly.client.models.Link
import com.launchdarkly.client.models.SegmentMetadata
import com.launchdarkly.client.models.SegmentTarget
import com.launchdarkly.client.models.UserSegmentRule

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name A human-friendly name for the segment.
 * @param tags Tags for the segment. Defaults to an empty array.
 * @param creationDate 
 * @param lastModifiedDate 
 * @param key A unique key used to reference the segment
 * @param links The location and content type of related resources
 * @param rules An array of the targeting rules for this segment.
 * @param version Version of the segment
 * @param deleted Whether the segment has been deleted
 * @param generation For big segments, how many times this segment has been created.
 * @param description A description of the segment's purpose. Defaults to <code>null</code> and is omitted in the response if not provided.
 * @param included An array of keys for included targets. Included individual targets are always segment members, regardless of segment rules. For list-based segments over 15,000 entries, also called big segments, this array is either empty or omitted.
 * @param excluded An array of keys for excluded targets. Segment rules bypass individual excluded targets, so they will never be included based on rules. Excluded targets may still be included explicitly. This value is omitted for list-based segments over 15,000 entries, also called big segments.
 * @param includedContexts 
 * @param excludedContexts 
 * @param access 
 * @param flags A list of flags targeting this segment. Only included when getting a single segment, using the <code>getSegment</code> endpoint.
 * @param unbounded Whether this is a standard segment (<code>false</code>) or a big segment (<code>true</code>). Standard segments include rule-based segments and smaller list-based segments. Big segments include larger list-based segments and synced segments. If omitted, the segment is a standard segment.
 * @param unboundedContextKind For big segments, the targeted context kind.
 * @param unboundedMetadata 
 * @param `external` The external data store backing this segment. Only applies to synced segments.
 * @param externalLink The URL for the external data store backing this segment. Only applies to synced segments.
 * @param importInProgress Whether an import is currently in progress for the specified segment. Only applies to big segments.
 */


data class UserSegment (

    /* A human-friendly name for the segment. */
    @Json(name = "name")
    val name: kotlin.String,

    /* Tags for the segment. Defaults to an empty array. */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>,

    @Json(name = "creationDate")
    val creationDate: kotlin.Long,

    @Json(name = "lastModifiedDate")
    val lastModifiedDate: kotlin.Long,

    /* A unique key used to reference the segment */
    @Json(name = "key")
    val key: kotlin.String,

    /* The location and content type of related resources */
    @Json(name = "_links")
    val links: kotlin.collections.Map<kotlin.String, Link>,

    /* An array of the targeting rules for this segment. */
    @Json(name = "rules")
    val rules: kotlin.collections.List<UserSegmentRule>,

    /* Version of the segment */
    @Json(name = "version")
    val version: kotlin.Int,

    /* Whether the segment has been deleted */
    @Json(name = "deleted")
    val deleted: kotlin.Boolean,

    /* For big segments, how many times this segment has been created. */
    @Json(name = "generation")
    val generation: kotlin.Int,

    /* A description of the segment's purpose. Defaults to <code>null</code> and is omitted in the response if not provided. */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* An array of keys for included targets. Included individual targets are always segment members, regardless of segment rules. For list-based segments over 15,000 entries, also called big segments, this array is either empty or omitted. */
    @Json(name = "included")
    val included: kotlin.collections.List<kotlin.String>? = null,

    /* An array of keys for excluded targets. Segment rules bypass individual excluded targets, so they will never be included based on rules. Excluded targets may still be included explicitly. This value is omitted for list-based segments over 15,000 entries, also called big segments. */
    @Json(name = "excluded")
    val excluded: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "includedContexts")
    val includedContexts: kotlin.collections.List<SegmentTarget>? = null,

    @Json(name = "excludedContexts")
    val excludedContexts: kotlin.collections.List<SegmentTarget>? = null,

    @Json(name = "_access")
    val access: Access? = null,

    /* A list of flags targeting this segment. Only included when getting a single segment, using the <code>getSegment</code> endpoint. */
    @Json(name = "_flags")
    val flags: kotlin.collections.List<FlagListingRep>? = null,

    /* Whether this is a standard segment (<code>false</code>) or a big segment (<code>true</code>). Standard segments include rule-based segments and smaller list-based segments. Big segments include larger list-based segments and synced segments. If omitted, the segment is a standard segment. */
    @Json(name = "unbounded")
    val unbounded: kotlin.Boolean? = null,

    /* For big segments, the targeted context kind. */
    @Json(name = "unboundedContextKind")
    val unboundedContextKind: kotlin.String? = null,

    @Json(name = "_unboundedMetadata")
    val unboundedMetadata: SegmentMetadata? = null,

    /* The external data store backing this segment. Only applies to synced segments. */
    @Json(name = "_external")
    val `external`: kotlin.String? = null,

    /* The URL for the external data store backing this segment. Only applies to synced segments. */
    @Json(name = "_externalLink")
    val externalLink: kotlin.String? = null,

    /* Whether an import is currently in progress for the specified segment. Only applies to big segments. */
    @Json(name = "_importInProgress")
    val importInProgress: kotlin.Boolean? = null

) {


}

