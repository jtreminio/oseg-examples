/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ExpiringUserTargetGetResponse
import com.launchdarkly.client.models.ExpiringUserTargetPatchResponse
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchUsersRequest
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.UserFlagSetting
import com.launchdarkly.client.models.UserFlagSettings
import com.launchdarkly.client.models.ValuePut

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class UserSettingsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Get expiring dates on flags for user
     * Get a list of flags for which the given user is scheduled for removal.
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @return ExpiringUserTargetGetResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getExpiringFlagsForUser(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String) : ExpiringUserTargetGetResponse {
        @Suppress("DEPRECATION")
        val localVarResponse = getExpiringFlagsForUserWithHttpInfo(projectKey = projectKey, userKey = userKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExpiringUserTargetGetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get expiring dates on flags for user
     * Get a list of flags for which the given user is scheduled for removal.
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @return ApiResponse<ExpiringUserTargetGetResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getExpiringFlagsForUserWithHttpInfo(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String) : ApiResponse<ExpiringUserTargetGetResponse?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getExpiringFlagsForUserRequestConfig(projectKey = projectKey, userKey = userKey, environmentKey = environmentKey)

        return request<Unit, ExpiringUserTargetGetResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getExpiringFlagsForUser
     *
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getExpiringFlagsForUserRequestConfig(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get flag setting for user
     * Get a single flag setting for a user by flag key. &lt;br /&gt;&lt;br /&gt;The &#x60;_value&#x60; is the flag variation that the user receives. The &#x60;setting&#x60; indicates whether you&#39;ve explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be &#x60;false&#x60;. The example response indicates that the user &#x60;Abbie_Braun&#x60; has the &#x60;sort.order&#x60; flag enabled.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @return UserFlagSetting
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSetting(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String) : UserFlagSetting {
        @Suppress("DEPRECATION")
        val localVarResponse = getUserFlagSettingWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey, featureFlagKey = featureFlagKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserFlagSetting
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get flag setting for user
     * Get a single flag setting for a user by flag key. &lt;br /&gt;&lt;br /&gt;The &#x60;_value&#x60; is the flag variation that the user receives. The &#x60;setting&#x60; indicates whether you&#39;ve explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be &#x60;false&#x60;. The example response indicates that the user &#x60;Abbie_Braun&#x60; has the &#x60;sort.order&#x60; flag enabled.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @return ApiResponse<UserFlagSetting?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSettingWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String) : ApiResponse<UserFlagSetting?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUserFlagSettingRequestConfig(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey, featureFlagKey = featureFlagKey)

        return request<Unit, UserFlagSetting>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserFlagSetting
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSettingRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List flag settings for user
     * Get the current flag settings for a given user. &lt;br /&gt;&lt;br /&gt;The &#x60;_value&#x60; is the flag variation that the user receives. The &#x60;setting&#x60; indicates whether you&#39;ve explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be &#x60;false&#x60;. The example response indicates that the user &#x60;Abbie_Braun&#x60; has the &#x60;sort.order&#x60; flag enabled and the &#x60;alternate.page&#x60; flag disabled, and that the user has not been explicitly targeted to receive a particular variation.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return UserFlagSettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSettings(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : UserFlagSettings {
        @Suppress("DEPRECATION")
        val localVarResponse = getUserFlagSettingsWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserFlagSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List flag settings for user
     * Get the current flag settings for a given user. &lt;br /&gt;&lt;br /&gt;The &#x60;_value&#x60; is the flag variation that the user receives. The &#x60;setting&#x60; indicates whether you&#39;ve explicitly targeted a user to receive a particular variation. For example, if you have turned off a feature flag for a user, this setting will be &#x60;false&#x60;. The example response indicates that the user &#x60;Abbie_Braun&#x60; has the &#x60;sort.order&#x60; flag enabled and the &#x60;alternate.page&#x60; flag disabled, and that the user has not been explicitly targeted to receive a particular variation.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return ApiResponse<UserFlagSettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSettingsWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : ApiResponse<UserFlagSettings?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUserFlagSettingsRequestConfig(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return request<Unit, UserFlagSettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUserFlagSettings
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUserFlagSettingsRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update expiring user target for flags
     * Schedule the specified user for removal from individual targeting on one or more flags. The user must already be individually targeted for each flag.  You can add, update, or remove a scheduled removal date. You can only schedule a user for removal on a single variation per flag.  Updating an expiring target uses the semantic patch format. To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating expiring user targets.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating expiring user targets&lt;/strong&gt;&lt;/summary&gt;  #### addExpireUserTargetDate  Adds a date and time that LaunchDarkly will remove the user from the flag&#39;s individual targeting.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag * &#x60;value&#x60;: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.  #### updateExpireUserTargetDate  Updates the date and time that LaunchDarkly will remove the user from the flag&#39;s individual targeting.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag * &#x60;value&#x60;: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag. * &#x60;version&#x60;: The version of the expiring user target to update. If included, update will fail if version doesn&#39;t match current version of the expiring user target.  #### removeExpireUserTargetDate  Removes the scheduled removal of the user from the flag&#39;s individual targeting. The user will remain part of the flag&#39;s individual targeting until explicitly removed, or until another removal is scheduled.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag  &lt;/details&gt; 
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @param patchUsersRequest 
     * @return ExpiringUserTargetPatchResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun patchExpiringFlagsForUser(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String, patchUsersRequest: PatchUsersRequest) : ExpiringUserTargetPatchResponse {
        @Suppress("DEPRECATION")
        val localVarResponse = patchExpiringFlagsForUserWithHttpInfo(projectKey = projectKey, userKey = userKey, environmentKey = environmentKey, patchUsersRequest = patchUsersRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExpiringUserTargetPatchResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update expiring user target for flags
     * Schedule the specified user for removal from individual targeting on one or more flags. The user must already be individually targeted for each flag.  You can add, update, or remove a scheduled removal date. You can only schedule a user for removal on a single variation per flag.  Updating an expiring target uses the semantic patch format. To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating expiring user targets.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating expiring user targets&lt;/strong&gt;&lt;/summary&gt;  #### addExpireUserTargetDate  Adds a date and time that LaunchDarkly will remove the user from the flag&#39;s individual targeting.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag * &#x60;value&#x60;: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag.  #### updateExpireUserTargetDate  Updates the date and time that LaunchDarkly will remove the user from the flag&#39;s individual targeting.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag * &#x60;value&#x60;: The time, in Unix milliseconds, when LaunchDarkly should remove the user from individual targeting for this flag. * &#x60;version&#x60;: The version of the expiring user target to update. If included, update will fail if version doesn&#39;t match current version of the expiring user target.  #### removeExpireUserTargetDate  Removes the scheduled removal of the user from the flag&#39;s individual targeting. The user will remain part of the flag&#39;s individual targeting until explicitly removed, or until another removal is scheduled.  ##### Parameters  * &#x60;flagKey&#x60;: The flag key * &#x60;variationId&#x60;: ID of a variation on the flag  &lt;/details&gt; 
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @param patchUsersRequest 
     * @return ApiResponse<ExpiringUserTargetPatchResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun patchExpiringFlagsForUserWithHttpInfo(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String, patchUsersRequest: PatchUsersRequest) : ApiResponse<ExpiringUserTargetPatchResponse?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = patchExpiringFlagsForUserRequestConfig(projectKey = projectKey, userKey = userKey, environmentKey = environmentKey, patchUsersRequest = patchUsersRequest)

        return request<PatchUsersRequest, ExpiringUserTargetPatchResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchExpiringFlagsForUser
     *
     * @param projectKey The project key
     * @param userKey The user key
     * @param environmentKey The environment key
     * @param patchUsersRequest 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun patchExpiringFlagsForUserRequestConfig(projectKey: kotlin.String, userKey: kotlin.String, environmentKey: kotlin.String, patchUsersRequest: PatchUsersRequest) : RequestConfig<PatchUsersRequest> {
        val localVariableBody = patchUsersRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update flag settings for user
     * Enable or disable a feature flag for a user based on their key.  Omitting the &#x60;setting&#x60; attribute from the request body, or including a &#x60;setting&#x60; of &#x60;null&#x60;, erases the current setting for a user.  If you previously patched the flag, and the patch included the user&#39;s data, LaunchDarkly continues to use that data. If LaunchDarkly has never encountered the user&#39;s key before, it calculates the flag values based on the user key alone. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @param valuePut 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun putFlagSetting(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String, valuePut: ValuePut) : Unit {
        @Suppress("DEPRECATION")
        val localVarResponse = putFlagSettingWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey, featureFlagKey = featureFlagKey, valuePut = valuePut)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update flag settings for user
     * Enable or disable a feature flag for a user based on their key.  Omitting the &#x60;setting&#x60; attribute from the request body, or including a &#x60;setting&#x60; of &#x60;null&#x60;, erases the current setting for a user.  If you previously patched the flag, and the patch included the user&#39;s data, LaunchDarkly continues to use that data. If LaunchDarkly has never encountered the user&#39;s key before, it calculates the flag values based on the user key alone. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @param valuePut 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun putFlagSettingWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String, valuePut: ValuePut) : ApiResponse<Unit?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = putFlagSettingRequestConfig(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey, featureFlagKey = featureFlagKey, valuePut = valuePut)

        return request<ValuePut, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putFlagSetting
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @param featureFlagKey The feature flag key
     * @param valuePut 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun putFlagSettingRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String, featureFlagKey: kotlin.String, valuePut: ValuePut) : RequestConfig<ValuePut> {
        val localVariableBody = valuePut
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
