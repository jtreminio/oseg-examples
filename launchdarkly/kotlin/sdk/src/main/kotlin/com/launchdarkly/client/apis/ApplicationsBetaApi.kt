/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ApplicationCollectionRep
import com.launchdarkly.client.models.ApplicationRep
import com.launchdarkly.client.models.ApplicationVersionRep
import com.launchdarkly.client.models.ApplicationVersionsCollectionRep
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class ApplicationsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Delete application
     * Delete an application.
     * @param applicationKey The application key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteApplication(applicationKey: kotlin.String) : Unit {
        val localVarResponse = deleteApplicationWithHttpInfo(applicationKey = applicationKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete application
     * Delete an application.
     * @param applicationKey The application key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteApplicationWithHttpInfo(applicationKey: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteApplicationRequestConfig(applicationKey = applicationKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteApplication
     *
     * @param applicationKey The application key
     * @return RequestConfig
     */
    fun deleteApplicationRequestConfig(applicationKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/applications/{applicationKey}".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete application version
     * Delete an application version.
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteApplicationVersion(applicationKey: kotlin.String, versionKey: kotlin.String) : Unit {
        val localVarResponse = deleteApplicationVersionWithHttpInfo(applicationKey = applicationKey, versionKey = versionKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete application version
     * Delete an application version.
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteApplicationVersionWithHttpInfo(applicationKey: kotlin.String, versionKey: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteApplicationVersionRequestConfig(applicationKey = applicationKey, versionKey = versionKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteApplicationVersion
     *
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @return RequestConfig
     */
    fun deleteApplicationVersionRequestConfig(applicationKey: kotlin.String, versionKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/applications/{applicationKey}/versions/{versionKey}".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())).replace("{"+"versionKey"+"}", encodeURIComponent(versionKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get application by key
     *  Retrieve an application by the application key.  ### Expanding the application response  LaunchDarkly supports expanding the \&quot;Get application\&quot; response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;flags&#x60; includes details on the flags that have been evaluated by the application  For example, use &#x60;?expand&#x3D;flags&#x60; to include the &#x60;flags&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param applicationKey The application key
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return ApplicationRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApplication(applicationKey: kotlin.String, expand: kotlin.String? = null) : ApplicationRep {
        val localVarResponse = getApplicationWithHttpInfo(applicationKey = applicationKey, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get application by key
     *  Retrieve an application by the application key.  ### Expanding the application response  LaunchDarkly supports expanding the \&quot;Get application\&quot; response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;flags&#x60; includes details on the flags that have been evaluated by the application  For example, use &#x60;?expand&#x3D;flags&#x60; to include the &#x60;flags&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param applicationKey The application key
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return ApiResponse<ApplicationRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApplicationWithHttpInfo(applicationKey: kotlin.String, expand: kotlin.String?) : ApiResponse<ApplicationRep?> {
        val localVariableConfig = getApplicationRequestConfig(applicationKey = applicationKey, expand = expand)

        return request<Unit, ApplicationRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApplication
     *
     * @param applicationKey The application key
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return RequestConfig
     */
    fun getApplicationRequestConfig(applicationKey: kotlin.String, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/applications/{applicationKey}".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get application versions by application key
     * Get a list of versions for a specific application in an account.
     * @param applicationKey The application key
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;supported&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of versions to return. Defaults to 50. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @return ApplicationVersionsCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApplicationVersions(applicationKey: kotlin.String, filter: kotlin.String? = null, limit: kotlin.Long? = null, offset: kotlin.Long? = null, sort: kotlin.String? = null) : ApplicationVersionsCollectionRep {
        val localVarResponse = getApplicationVersionsWithHttpInfo(applicationKey = applicationKey, filter = filter, limit = limit, offset = offset, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationVersionsCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get application versions by application key
     * Get a list of versions for a specific application in an account.
     * @param applicationKey The application key
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;supported&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of versions to return. Defaults to 50. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @return ApiResponse<ApplicationVersionsCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApplicationVersionsWithHttpInfo(applicationKey: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?) : ApiResponse<ApplicationVersionsCollectionRep?> {
        val localVariableConfig = getApplicationVersionsRequestConfig(applicationKey = applicationKey, filter = filter, limit = limit, offset = offset, sort = sort)

        return request<Unit, ApplicationVersionsCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApplicationVersions
     *
     * @param applicationKey The application key
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;supported&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of versions to return. Defaults to 50. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @return RequestConfig
     */
    fun getApplicationVersionsRequestConfig(applicationKey: kotlin.String, filter: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/applications/{applicationKey}/versions".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get applications
     *  Get a list of applications.  ### Expanding the applications response  LaunchDarkly supports expanding the \&quot;Get applications\&quot; response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;flags&#x60; includes details on the flags that have been evaluated by the application  For example, use &#x60;?expand&#x3D;flags&#x60; to include the &#x60;flags&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;kind&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of applications to return. Defaults to 10. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return ApplicationCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApplications(filter: kotlin.String? = null, limit: kotlin.Long? = null, offset: kotlin.Long? = null, sort: kotlin.String? = null, expand: kotlin.String? = null) : ApplicationCollectionRep {
        val localVarResponse = getApplicationsWithHttpInfo(filter = filter, limit = limit, offset = offset, sort = sort, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get applications
     *  Get a list of applications.  ### Expanding the applications response  LaunchDarkly supports expanding the \&quot;Get applications\&quot; response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;flags&#x60; includes details on the flags that have been evaluated by the application  For example, use &#x60;?expand&#x3D;flags&#x60; to include the &#x60;flags&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;kind&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of applications to return. Defaults to 10. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return ApiResponse<ApplicationCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApplicationsWithHttpInfo(filter: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, expand: kotlin.String?) : ApiResponse<ApplicationCollectionRep?> {
        val localVariableConfig = getApplicationsRequestConfig(filter = filter, limit = limit, offset = offset, sort = sort, expand = expand)

        return request<Unit, ApplicationCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApplications
     *
     * @param filter Accepts filter by &#x60;key&#x60;, &#x60;name&#x60;, &#x60;kind&#x60;, and &#x60;autoAdded&#x60;. To learn more about the filter syntax, read [Filtering applications and application versions](/tag/Applications-(beta)#filtering-contexts-and-context-instances). (optional)
     * @param limit The number of applications to return. Defaults to 10. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @param sort Accepts sorting order and fields. Fields can be comma separated. Possible fields are &#x60;creationDate&#x60;, &#x60;name&#x60;. Examples: &#x60;sort&#x3D;name&#x60; sort by names ascending, &#x60;sort&#x3D;-name,creationDate&#x60; sort by names descending and creationDate ascending. (optional)
     * @param expand A comma-separated list of properties that can reveal additional information in the response. Options: &#x60;flags&#x60;. (optional)
     * @return RequestConfig
     */
    fun getApplicationsRequestConfig(filter: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, sort: kotlin.String?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/applications",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update application
     * Update an application. You can update the &#x60;description&#x60; and &#x60;kind&#x60; fields. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application. To learn more, read [Updates](/#section/Overview/Updates).
     * @param applicationKey The application key
     * @param patchOperation 
     * @return ApplicationRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchApplication(applicationKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApplicationRep {
        val localVarResponse = patchApplicationWithHttpInfo(applicationKey = applicationKey, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update application
     * Update an application. You can update the &#x60;description&#x60; and &#x60;kind&#x60; fields. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application. To learn more, read [Updates](/#section/Overview/Updates).
     * @param applicationKey The application key
     * @param patchOperation 
     * @return ApiResponse<ApplicationRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchApplicationWithHttpInfo(applicationKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<ApplicationRep?> {
        val localVariableConfig = patchApplicationRequestConfig(applicationKey = applicationKey, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, ApplicationRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchApplication
     *
     * @param applicationKey The application key
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchApplicationRequestConfig(applicationKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/applications/{applicationKey}".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update application version
     * Update an application version. You can update the &#x60;supported&#x60; field. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application version. To learn more, read [Updates](/#section/Overview/Updates).
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @param patchOperation 
     * @return ApplicationVersionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchApplicationVersion(applicationKey: kotlin.String, versionKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApplicationVersionRep {
        val localVarResponse = patchApplicationVersionWithHttpInfo(applicationKey = applicationKey, versionKey = versionKey, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationVersionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update application version
     * Update an application version. You can update the &#x60;supported&#x60; field. Requires a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes to the application version. To learn more, read [Updates](/#section/Overview/Updates).
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @param patchOperation 
     * @return ApiResponse<ApplicationVersionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchApplicationVersionWithHttpInfo(applicationKey: kotlin.String, versionKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<ApplicationVersionRep?> {
        val localVariableConfig = patchApplicationVersionRequestConfig(applicationKey = applicationKey, versionKey = versionKey, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, ApplicationVersionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchApplicationVersion
     *
     * @param applicationKey The application key
     * @param versionKey The application version key
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchApplicationVersionRequestConfig(applicationKey: kotlin.String, versionKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/applications/{applicationKey}/versions/{versionKey}".replace("{"+"applicationKey"+"}", encodeURIComponent(applicationKey.toString())).replace("{"+"versionKey"+"}", encodeURIComponent(versionKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
