/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.Access
import com.launchdarkly.client.models.DependentExperimentRep
import com.launchdarkly.client.models.DependentMetricGroupRep
import com.launchdarkly.client.models.FlagListingRep
import com.launchdarkly.client.models.Link
import com.launchdarkly.client.models.MemberSummary
import com.launchdarkly.client.models.MetricEventDefaultRep
import com.launchdarkly.client.models.Modification

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id The ID of this metric
 * @param versionId The version ID of the metric
 * @param key A unique key to reference the metric
 * @param name A human-friendly name for the metric
 * @param kind The kind of event the metric tracks
 * @param links The location and content type of related resources
 * @param tags Tags for the metric
 * @param creationDate 
 * @param experimentCount The number of experiments using this metric
 * @param metricGroupCount The number of metric groups using this metric
 * @param attachedFlagCount The number of feature flags currently attached to this metric
 * @param site 
 * @param access 
 * @param lastModified 
 * @param maintainerId The ID of the member who maintains this metric
 * @param maintainer 
 * @param description Description of the metric
 * @param isNumeric For custom metrics, whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>).
 * @param successCriteria For custom metrics, the success criteria
 * @param unit For numeric custom metrics, the unit of measure
 * @param eventKey For custom metrics, the event key to use in your code
 * @param randomizationUnits An array of randomization units allowed for this metric
 * @param unitAggregationType The method by which multiple unit event values are aggregated
 * @param analysisType The method for analyzing metric events
 * @param percentileValue The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>.
 * @param eventDefault 
 * @param experiments 
 * @param metricGroups Metric groups that use this metric
 * @param isActive Whether the metric is active
 * @param attachedFeatures Details on the flags attached to this metric
 * @param version Version of the metric
 * @param selector For click metrics, the CSS selectors
 * @param urls 
 */


data class MetricRep (

    /* The ID of this metric */
    @Json(name = "_id")
    val id: kotlin.String,

    /* The version ID of the metric */
    @Json(name = "_versionId")
    val versionId: kotlin.String,

    /* A unique key to reference the metric */
    @Json(name = "key")
    val key: kotlin.String,

    /* A human-friendly name for the metric */
    @Json(name = "name")
    val name: kotlin.String,

    /* The kind of event the metric tracks */
    @Json(name = "kind")
    val kind: MetricRep.Kind,

    /* The location and content type of related resources */
    @Json(name = "_links")
    val links: kotlin.collections.Map<kotlin.String, Link>,

    /* Tags for the metric */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>,

    @Json(name = "_creationDate")
    val creationDate: kotlin.Long,

    /* The number of experiments using this metric */
    @Json(name = "experimentCount")
    val experimentCount: kotlin.Int? = null,

    /* The number of metric groups using this metric */
    @Json(name = "metricGroupCount")
    val metricGroupCount: kotlin.Int? = null,

    /* The number of feature flags currently attached to this metric */
    @Json(name = "_attachedFlagCount")
    val attachedFlagCount: kotlin.Int? = null,

    @Json(name = "_site")
    val site: Link? = null,

    @Json(name = "_access")
    val access: Access? = null,

    @Json(name = "lastModified")
    val lastModified: Modification? = null,

    /* The ID of the member who maintains this metric */
    @Json(name = "maintainerId")
    val maintainerId: kotlin.String? = null,

    @Json(name = "_maintainer")
    val maintainer: MemberSummary? = null,

    /* Description of the metric */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* For custom metrics, whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>). */
    @Json(name = "isNumeric")
    val isNumeric: kotlin.Boolean? = null,

    /* For custom metrics, the success criteria */
    @Json(name = "successCriteria")
    val successCriteria: MetricRep.SuccessCriteria? = null,

    /* For numeric custom metrics, the unit of measure */
    @Json(name = "unit")
    val unit: kotlin.String? = null,

    /* For custom metrics, the event key to use in your code */
    @Json(name = "eventKey")
    val eventKey: kotlin.String? = null,

    /* An array of randomization units allowed for this metric */
    @Json(name = "randomizationUnits")
    val randomizationUnits: kotlin.collections.List<kotlin.String>? = null,

    /* The method by which multiple unit event values are aggregated */
    @Json(name = "unitAggregationType")
    val unitAggregationType: MetricRep.UnitAggregationType? = null,

    /* The method for analyzing metric events */
    @Json(name = "analysisType")
    val analysisType: MetricRep.AnalysisType? = null,

    /* The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>. */
    @Json(name = "percentileValue")
    val percentileValue: kotlin.Int? = null,

    @Json(name = "eventDefault")
    val eventDefault: MetricEventDefaultRep? = null,

    @Json(name = "experiments")
    val experiments: kotlin.collections.List<DependentExperimentRep>? = null,

    /* Metric groups that use this metric */
    @Json(name = "metricGroups")
    val metricGroups: kotlin.collections.List<DependentMetricGroupRep>? = null,

    /* Whether the metric is active */
    @Json(name = "isActive")
    val isActive: kotlin.Boolean? = null,

    /* Details on the flags attached to this metric */
    @Json(name = "_attachedFeatures")
    val attachedFeatures: kotlin.collections.List<FlagListingRep>? = null,

    /* Version of the metric */
    @Json(name = "_version")
    val version: kotlin.Int? = null,

    /* For click metrics, the CSS selectors */
    @Json(name = "selector")
    val selector: kotlin.String? = null,

    @Json(name = "urls")
    val urls: kotlin.collections.List<kotlin.collections.Map<kotlin.String, kotlin.Any>>? = null

) {

    /**
     * The kind of event the metric tracks
     *
     * Values: pageview,click,custom
     */
    @JsonClass(generateAdapter = false)
    enum class Kind(val value: kotlin.String) {
        @Json(name = "pageview") pageview("pageview"),
        @Json(name = "click") click("click"),
        @Json(name = "custom") custom("custom");
    }
    /**
     * For custom metrics, the success criteria
     *
     * Values: HigherThanBaseline,LowerThanBaseline
     */
    @JsonClass(generateAdapter = false)
    enum class SuccessCriteria(val value: kotlin.String) {
        @Json(name = "HigherThanBaseline") HigherThanBaseline("HigherThanBaseline"),
        @Json(name = "LowerThanBaseline") LowerThanBaseline("LowerThanBaseline");
    }
    /**
     * The method by which multiple unit event values are aggregated
     *
     * Values: average,sum
     */
    @JsonClass(generateAdapter = false)
    enum class UnitAggregationType(val value: kotlin.String) {
        @Json(name = "average") average("average"),
        @Json(name = "sum") sum("sum");
    }
    /**
     * The method for analyzing metric events
     *
     * Values: mean,percentile
     */
    @JsonClass(generateAdapter = false)
    enum class AnalysisType(val value: kotlin.String) {
        @Json(name = "mean") mean("mean"),
        @Json(name = "percentile") percentile("percentile");
    }

}

