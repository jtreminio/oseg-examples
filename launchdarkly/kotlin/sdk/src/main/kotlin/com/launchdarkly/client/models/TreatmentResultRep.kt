/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.BayesianBetaBinomialStatsRep
import com.launchdarkly.client.models.BayesianNormalStatsRep
import com.launchdarkly.client.models.CredibleIntervalRep
import com.launchdarkly.client.models.Distribution
import com.launchdarkly.client.models.RelativeDifferenceRep

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param treatmentId The ID of the treatment
 * @param treatmentName The name of the treatment
 * @param mean The average value of the variation in this sample. It doesn’t capture the uncertainty in the measurement, so it should not be the only measurement you use to make decisions.
 * @param dataMean The mean of the data, with no priors effecting the result.
 * @param dataStdDev The standard deviation of the data, with no priors effecting the result.
 * @param credibleInterval 
 * @param pBest The likelihood that this variation has the biggest effect on the primary metric. The variation with the highest probability is likely the best of the variations you're testing
 * @param relativeDifferences Estimates of the relative difference between this treatment's mean and the mean of each other treatment
 * @param units The number of units exposed to this treatment that have event values, including those that are configured to default to 0
 * @param traffic The number of units exposed to this treatment.
 * @param eventValuesSum The sum of the event values for the units exposed to this treatment.
 * @param distribution 
 * @param correlation The outcome-covariate correlation
 * @param standardDeviationRatio The ratio of the outcome SD to covariate SD
 * @param covariateImbalance The imbalance between the covariate mean for the arm and the covariate mean for the experiment
 * @param varianceReduction The reduction in variance resulting from CUPED
 * @param model The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name
 * @param bayesianNormal 
 * @param bayesianBeta 
 */


data class TreatmentResultRep (

    /* The ID of the treatment */
    @Json(name = "treatmentId")
    val treatmentId: kotlin.String? = null,

    /* The name of the treatment */
    @Json(name = "treatmentName")
    val treatmentName: kotlin.String? = null,

    /* The average value of the variation in this sample. It doesn’t capture the uncertainty in the measurement, so it should not be the only measurement you use to make decisions. */
    @Json(name = "mean")
    val mean: java.math.BigDecimal? = null,

    /* The mean of the data, with no priors effecting the result. */
    @Json(name = "dataMean")
    val dataMean: java.math.BigDecimal? = null,

    /* The standard deviation of the data, with no priors effecting the result. */
    @Json(name = "dataStdDev")
    val dataStdDev: java.math.BigDecimal? = null,

    @Json(name = "credibleInterval")
    val credibleInterval: CredibleIntervalRep? = null,

    /* The likelihood that this variation has the biggest effect on the primary metric. The variation with the highest probability is likely the best of the variations you're testing */
    @Json(name = "pBest")
    val pBest: java.math.BigDecimal? = null,

    /* Estimates of the relative difference between this treatment's mean and the mean of each other treatment */
    @Json(name = "relativeDifferences")
    val relativeDifferences: kotlin.collections.List<RelativeDifferenceRep>? = null,

    /* The number of units exposed to this treatment that have event values, including those that are configured to default to 0 */
    @Json(name = "units")
    val units: kotlin.Long? = null,

    /* The number of units exposed to this treatment. */
    @Json(name = "traffic")
    val traffic: kotlin.Long? = null,

    /* The sum of the event values for the units exposed to this treatment. */
    @Json(name = "eventValuesSum")
    val eventValuesSum: java.math.BigDecimal? = null,

    @Json(name = "distribution")
    val distribution: Distribution? = null,

    /* The outcome-covariate correlation */
    @Json(name = "correlation")
    val correlation: java.math.BigDecimal? = null,

    /* The ratio of the outcome SD to covariate SD */
    @Json(name = "standardDeviationRatio")
    val standardDeviationRatio: java.math.BigDecimal? = null,

    /* The imbalance between the covariate mean for the arm and the covariate mean for the experiment */
    @Json(name = "covariateImbalance")
    val covariateImbalance: java.math.BigDecimal? = null,

    /* The reduction in variance resulting from CUPED */
    @Json(name = "varianceReduction")
    val varianceReduction: java.math.BigDecimal? = null,

    /* The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name */
    @Json(name = "model")
    val model: TreatmentResultRep.Model? = null,

    @Json(name = "bayesianNormal")
    val bayesianNormal: BayesianNormalStatsRep? = null,

    @Json(name = "bayesianBeta")
    val bayesianBeta: BayesianBetaBinomialStatsRep? = null

) {

    /**
     * The model used to calculate the results. Parameters specific to this model will be defined under the field under the same name
     *
     * Values: bayesianNormal,bayesianBeta
     */
    @JsonClass(generateAdapter = false)
    enum class Model(val value: kotlin.String) {
        @Json(name = "bayesianNormal") bayesianNormal("bayesianNormal"),
        @Json(name = "bayesianBeta") bayesianBeta("bayesianBeta");
    }

}

