/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.SourceEnv

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name A human-friendly name for the new environment
 * @param key A project-unique key for the new environment
 * @param color A color to indicate this environment in the UI
 * @param defaultTtl The default time (in minutes) that the PHP SDK can cache feature flag rules locally
 * @param secureMode Ensures that one end user of the client-side SDK cannot inspect the variations for another end user
 * @param defaultTrackEvents Enables tracking detailed information for new flags by default
 * @param confirmChanges Requires confirmation for all flag and segment changes via the UI in this environment
 * @param requireComments Requires comments for all flag and segment changes via the UI in this environment
 * @param tags Tags to apply to the new environment
 * @param source 
 * @param critical Whether the environment is critical
 */


data class EnvironmentPost (

    /* A human-friendly name for the new environment */
    @Json(name = "name")
    val name: kotlin.String,

    /* A project-unique key for the new environment */
    @Json(name = "key")
    val key: kotlin.String,

    /* A color to indicate this environment in the UI */
    @Json(name = "color")
    val color: kotlin.String,

    /* The default time (in minutes) that the PHP SDK can cache feature flag rules locally */
    @Json(name = "defaultTtl")
    val defaultTtl: kotlin.Int? = null,

    /* Ensures that one end user of the client-side SDK cannot inspect the variations for another end user */
    @Json(name = "secureMode")
    val secureMode: kotlin.Boolean? = null,

    /* Enables tracking detailed information for new flags by default */
    @Json(name = "defaultTrackEvents")
    val defaultTrackEvents: kotlin.Boolean? = null,

    /* Requires confirmation for all flag and segment changes via the UI in this environment */
    @Json(name = "confirmChanges")
    val confirmChanges: kotlin.Boolean? = null,

    /* Requires comments for all flag and segment changes via the UI in this environment */
    @Json(name = "requireComments")
    val requireComments: kotlin.Boolean? = null,

    /* Tags to apply to the new environment */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "source")
    val source: SourceEnv? = null,

    /* Whether the environment is critical */
    @Json(name = "critical")
    val critical: kotlin.Boolean? = null

) {


}

