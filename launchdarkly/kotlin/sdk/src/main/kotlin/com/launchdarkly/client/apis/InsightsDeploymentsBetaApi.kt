/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.DeploymentCollectionRep
import com.launchdarkly.client.models.DeploymentRep
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.PostDeploymentEventInput
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.ValidationFailedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class InsightsDeploymentsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create deployment event
     * Create deployment event
     * @param postDeploymentEventInput 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createDeploymentEvent(postDeploymentEventInput: PostDeploymentEventInput) : Unit {
        val localVarResponse = createDeploymentEventWithHttpInfo(postDeploymentEventInput = postDeploymentEventInput)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create deployment event
     * Create deployment event
     * @param postDeploymentEventInput 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun createDeploymentEventWithHttpInfo(postDeploymentEventInput: PostDeploymentEventInput) : ApiResponse<Unit?> {
        val localVariableConfig = createDeploymentEventRequestConfig(postDeploymentEventInput = postDeploymentEventInput)

        return request<PostDeploymentEventInput, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createDeploymentEvent
     *
     * @param postDeploymentEventInput 
     * @return RequestConfig
     */
    fun createDeploymentEventRequestConfig(postDeploymentEventInput: PostDeploymentEventInput) : RequestConfig<PostDeploymentEventInput> {
        val localVariableBody = postDeploymentEventInput
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/engineering-insights/deployment-events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get deployment
     * Get a deployment by ID.  The deployment ID is returned as part of the [List deployments](#operation/getDeployments) response. It is the &#x60;id&#x60; field of each element in the &#x60;items&#x60; array.  ### Expanding the deployment response  LaunchDarkly supports expanding the deployment response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;pullRequests&#x60; includes details on all of the pull requests associated with each deployment * &#x60;flagReferences&#x60; includes details on all of the references to flags in each deployment  For example, use &#x60;?expand&#x3D;pullRequests&#x60; to include the &#x60;pullRequests&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param deploymentID The deployment ID
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @return DeploymentRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDeployment(deploymentID: kotlin.String, expand: kotlin.String? = null) : DeploymentRep {
        val localVarResponse = getDeploymentWithHttpInfo(deploymentID = deploymentID, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeploymentRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get deployment
     * Get a deployment by ID.  The deployment ID is returned as part of the [List deployments](#operation/getDeployments) response. It is the &#x60;id&#x60; field of each element in the &#x60;items&#x60; array.  ### Expanding the deployment response  LaunchDarkly supports expanding the deployment response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;pullRequests&#x60; includes details on all of the pull requests associated with each deployment * &#x60;flagReferences&#x60; includes details on all of the references to flags in each deployment  For example, use &#x60;?expand&#x3D;pullRequests&#x60; to include the &#x60;pullRequests&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param deploymentID The deployment ID
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @return ApiResponse<DeploymentRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDeploymentWithHttpInfo(deploymentID: kotlin.String, expand: kotlin.String?) : ApiResponse<DeploymentRep?> {
        val localVariableConfig = getDeploymentRequestConfig(deploymentID = deploymentID, expand = expand)

        return request<Unit, DeploymentRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDeployment
     *
     * @param deploymentID The deployment ID
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @return RequestConfig
     */
    fun getDeploymentRequestConfig(deploymentID: kotlin.String, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/deployments/{deploymentID}".replace("{"+"deploymentID"+"}", encodeURIComponent(deploymentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List deployments
     * Get a list of deployments  ### Expanding the deployment collection response  LaunchDarkly supports expanding the deployment collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;pullRequests&#x60; includes details on all of the pull requests associated with each deployment * &#x60;flagReferences&#x60; includes details on all of the references to flags in each deployment  For example, use &#x60;?expand&#x3D;pullRequests&#x60; to include the &#x60;pullRequests&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param limit The number of deployments to return. Default is 20. Maximum allowed is 100. (optional)
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param after Identifier used for pagination (optional)
     * @param before Identifier used for pagination (optional)
     * @param kind The deployment kind (optional)
     * @param status The deployment status (optional)
     * @return DeploymentCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDeployments(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String? = null, limit: kotlin.Long? = null, expand: kotlin.String? = null, from: kotlin.Long? = null, to: kotlin.Long? = null, after: kotlin.String? = null, before: kotlin.String? = null, kind: kotlin.String? = null, status: kotlin.String? = null) : DeploymentCollectionRep {
        val localVarResponse = getDeploymentsWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, limit = limit, expand = expand, from = from, to = to, after = after, before = before, kind = kind, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeploymentCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List deployments
     * Get a list of deployments  ### Expanding the deployment collection response  LaunchDarkly supports expanding the deployment collection response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;pullRequests&#x60; includes details on all of the pull requests associated with each deployment * &#x60;flagReferences&#x60; includes details on all of the references to flags in each deployment  For example, use &#x60;?expand&#x3D;pullRequests&#x60; to include the &#x60;pullRequests&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param limit The number of deployments to return. Default is 20. Maximum allowed is 100. (optional)
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param after Identifier used for pagination (optional)
     * @param before Identifier used for pagination (optional)
     * @param kind The deployment kind (optional)
     * @param status The deployment status (optional)
     * @return ApiResponse<DeploymentCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDeploymentsWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, limit: kotlin.Long?, expand: kotlin.String?, from: kotlin.Long?, to: kotlin.Long?, after: kotlin.String?, before: kotlin.String?, kind: kotlin.String?, status: kotlin.String?) : ApiResponse<DeploymentCollectionRep?> {
        val localVariableConfig = getDeploymentsRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, limit = limit, expand = expand, from = from, to = to, after = after, before = before, kind = kind, status = status)

        return request<Unit, DeploymentCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDeployments
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param limit The number of deployments to return. Default is 20. Maximum allowed is 100. (optional)
     * @param expand Expand properties in response. Options: &#x60;pullRequests&#x60;, &#x60;flagReferences&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param after Identifier used for pagination (optional)
     * @param before Identifier used for pagination (optional)
     * @param kind The deployment kind (optional)
     * @param status The deployment status (optional)
     * @return RequestConfig
     */
    fun getDeploymentsRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, limit: kotlin.Long?, expand: kotlin.String?, from: kotlin.Long?, to: kotlin.Long?, after: kotlin.String?, before: kotlin.String?, kind: kotlin.String?, status: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                put("environmentKey", listOf(environmentKey.toString()))
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (kind != null) {
                    put("kind", listOf(kind.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/deployments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update deployment
     * Update a deployment by ID. Updating a deployment uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).&lt;br/&gt;&lt;br/&gt;The deployment ID is returned as part of the [List deployments](#operation/getDeployments) response. It is the &#x60;id&#x60; field of each element in the &#x60;items&#x60; array.
     * @param deploymentID The deployment ID
     * @param patchOperation 
     * @return DeploymentRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateDeployment(deploymentID: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : DeploymentRep {
        val localVarResponse = updateDeploymentWithHttpInfo(deploymentID = deploymentID, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeploymentRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update deployment
     * Update a deployment by ID. Updating a deployment uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).&lt;br/&gt;&lt;br/&gt;The deployment ID is returned as part of the [List deployments](#operation/getDeployments) response. It is the &#x60;id&#x60; field of each element in the &#x60;items&#x60; array.
     * @param deploymentID The deployment ID
     * @param patchOperation 
     * @return ApiResponse<DeploymentRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateDeploymentWithHttpInfo(deploymentID: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<DeploymentRep?> {
        val localVariableConfig = updateDeploymentRequestConfig(deploymentID = deploymentID, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, DeploymentRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateDeployment
     *
     * @param deploymentID The deployment ID
     * @param patchOperation 
     * @return RequestConfig
     */
    fun updateDeploymentRequestConfig(deploymentID: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/engineering-insights/deployments/{deploymentID}".replace("{"+"deploymentID"+"}", encodeURIComponent(deploymentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
