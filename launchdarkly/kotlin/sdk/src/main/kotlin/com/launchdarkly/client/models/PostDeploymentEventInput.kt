/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param projectKey The project key
 * @param environmentKey The environment key
 * @param applicationKey The application key. This defines the granularity at which you want to view your insights metrics. Typically it is the name of one of the GitHub repositories that you use in this project.<br/><br/>LaunchDarkly automatically creates a new application each time you send a unique application key.
 * @param version The application version. You can set the application version to any string that includes only letters, numbers, periods (<code>.</code>), hyphens (<code>-</code>), or underscores (<code>_</code>).<br/><br/>We recommend setting the application version to at least the first seven characters of the SHA or to the tag of the GitHub commit for this deployment.
 * @param eventType The event type
 * @param applicationName The application name. This defines how the application is displayed
 * @param applicationKind The kind of application. Default: <code>server</code>
 * @param versionName The version name. This defines how the version is displayed
 * @param eventTime 
 * @param eventMetadata A JSON object containing metadata about the event
 * @param deploymentMetadata A JSON object containing metadata about the deployment
 */


data class PostDeploymentEventInput (

    /* The project key */
    @Json(name = "projectKey")
    val projectKey: kotlin.String,

    /* The environment key */
    @Json(name = "environmentKey")
    val environmentKey: kotlin.String,

    /* The application key. This defines the granularity at which you want to view your insights metrics. Typically it is the name of one of the GitHub repositories that you use in this project.<br/><br/>LaunchDarkly automatically creates a new application each time you send a unique application key. */
    @Json(name = "applicationKey")
    val applicationKey: kotlin.String,

    /* The application version. You can set the application version to any string that includes only letters, numbers, periods (<code>.</code>), hyphens (<code>-</code>), or underscores (<code>_</code>).<br/><br/>We recommend setting the application version to at least the first seven characters of the SHA or to the tag of the GitHub commit for this deployment. */
    @Json(name = "version")
    val version: kotlin.String,

    /* The event type */
    @Json(name = "eventType")
    val eventType: PostDeploymentEventInput.EventType,

    /* The application name. This defines how the application is displayed */
    @Json(name = "applicationName")
    val applicationName: kotlin.String? = null,

    /* The kind of application. Default: <code>server</code> */
    @Json(name = "applicationKind")
    val applicationKind: PostDeploymentEventInput.ApplicationKind? = null,

    /* The version name. This defines how the version is displayed */
    @Json(name = "versionName")
    val versionName: kotlin.String? = null,

    @Json(name = "eventTime")
    val eventTime: kotlin.Long? = null,

    /* A JSON object containing metadata about the event */
    @Json(name = "eventMetadata")
    val eventMetadata: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* A JSON object containing metadata about the deployment */
    @Json(name = "deploymentMetadata")
    val deploymentMetadata: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null

) {

    /**
     * The event type
     *
     * Values: started,failed,finished,custom
     */
    @JsonClass(generateAdapter = false)
    enum class EventType(val value: kotlin.String) {
        @Json(name = "started") started("started"),
        @Json(name = "failed") failed("failed"),
        @Json(name = "finished") finished("finished"),
        @Json(name = "custom") custom("custom");
    }
    /**
     * The kind of application. Default: <code>server</code>
     *
     * Values: server,browser,mobile
     */
    @JsonClass(generateAdapter = false)
    enum class ApplicationKind(val value: kotlin.String) {
        @Json(name = "server") server("server"),
        @Json(name = "browser") browser("browser"),
        @Json(name = "mobile") mobile("mobile");
    }

}

