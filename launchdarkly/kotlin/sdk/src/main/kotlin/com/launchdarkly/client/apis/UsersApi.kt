/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.UserRecord
import com.launchdarkly.client.models.Users
import com.launchdarkly.client.models.UsersRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Delete user
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Delete context instances](/tag/Contexts#operation/deleteContextInstances) instead of this endpoint.  Delete a user by key. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun deleteUser(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : Unit {
        @Suppress("DEPRECATION")
        val localVarResponse = deleteUserWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete user
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Delete context instances](/tag/Contexts#operation/deleteContextInstances) instead of this endpoint.  Delete a user by key. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun deleteUserWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : ApiResponse<Unit?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = deleteUserRequestConfig(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun deleteUserRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/users/{projectKey}/{environmentKey}/{userKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Find users
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for context instances](/tag/Contexts#operation/searchContextInstances) instead of this endpoint.  Search users in LaunchDarkly based on their last active date, a user attribute filter set, or a search query.  An example user attribute filter set is &#x60;filter&#x3D;firstName:Anna,activeTrial:false&#x60;. This matches users that have the user attribute &#x60;firstName&#x60; set to &#x60;Anna&#x60;, that also have the attribute &#x60;activeTrial&#x60; set to &#x60;false&#x60;.  To paginate through results, follow the &#x60;next&#x60; link in the &#x60;_links&#x60; object. To learn more, read [Representations](/#section/Representations). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param q Full-text search for users based on name, first name, last name, e-mail address, or key (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param offset Deprecated, use &#x60;searchAfter&#x60; instead. Specifies the first item to return in the collection. (optional)
     * @param after A Unix epoch time in milliseconds specifying the maximum last time a user requested a feature flag from LaunchDarkly (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports the &#x60;userKey&#x60; and &#x60;lastSeen&#x60; fields. Fields prefixed by a dash ( - ) sort in descending order. (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param filter A comma-separated list of user attribute filters. Each filter is in the form of attributeKey:attributeValue (optional)
     * @return Users
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getSearchUsers(projectKey: kotlin.String, environmentKey: kotlin.String, q: kotlin.String? = null, limit: kotlin.Long? = null, offset: kotlin.Long? = null, after: kotlin.Long? = null, sort: kotlin.String? = null, searchAfter: kotlin.String? = null, filter: kotlin.String? = null) : Users {
        @Suppress("DEPRECATION")
        val localVarResponse = getSearchUsersWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, q = q, limit = limit, offset = offset, after = after, sort = sort, searchAfter = searchAfter, filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Users
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find users
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for context instances](/tag/Contexts#operation/searchContextInstances) instead of this endpoint.  Search users in LaunchDarkly based on their last active date, a user attribute filter set, or a search query.  An example user attribute filter set is &#x60;filter&#x3D;firstName:Anna,activeTrial:false&#x60;. This matches users that have the user attribute &#x60;firstName&#x60; set to &#x60;Anna&#x60;, that also have the attribute &#x60;activeTrial&#x60; set to &#x60;false&#x60;.  To paginate through results, follow the &#x60;next&#x60; link in the &#x60;_links&#x60; object. To learn more, read [Representations](/#section/Representations). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param q Full-text search for users based on name, first name, last name, e-mail address, or key (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param offset Deprecated, use &#x60;searchAfter&#x60; instead. Specifies the first item to return in the collection. (optional)
     * @param after A Unix epoch time in milliseconds specifying the maximum last time a user requested a feature flag from LaunchDarkly (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports the &#x60;userKey&#x60; and &#x60;lastSeen&#x60; fields. Fields prefixed by a dash ( - ) sort in descending order. (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param filter A comma-separated list of user attribute filters. Each filter is in the form of attributeKey:attributeValue (optional)
     * @return ApiResponse<Users?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getSearchUsersWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, q: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, after: kotlin.Long?, sort: kotlin.String?, searchAfter: kotlin.String?, filter: kotlin.String?) : ApiResponse<Users?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getSearchUsersRequestConfig(projectKey = projectKey, environmentKey = environmentKey, q = q, limit = limit, offset = offset, after = after, sort = sort, searchAfter = searchAfter, filter = filter)

        return request<Unit, Users>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSearchUsers
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param q Full-text search for users based on name, first name, last name, e-mail address, or key (optional)
     * @param limit Specifies the maximum number of items in the collection to return (max: 50, default: 20) (optional)
     * @param offset Deprecated, use &#x60;searchAfter&#x60; instead. Specifies the first item to return in the collection. (optional)
     * @param after A Unix epoch time in milliseconds specifying the maximum last time a user requested a feature flag from LaunchDarkly (optional)
     * @param sort Specifies a field by which to sort. LaunchDarkly supports the &#x60;userKey&#x60; and &#x60;lastSeen&#x60; fields. Fields prefixed by a dash ( - ) sort in descending order. (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @param filter A comma-separated list of user attribute filters. Each filter is in the form of attributeKey:attributeValue (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getSearchUsersRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, q: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?, after: kotlin.Long?, sort: kotlin.String?, searchAfter: kotlin.String?, filter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (q != null) {
                    put("q", listOf(q.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (searchAfter != null) {
                    put("searchAfter", listOf(searchAfter.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/user-search/{projectKey}/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get user
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Get context instances](/tag/Contexts#operation/getContextInstances) instead of this endpoint.  Get a user by key. The &#x60;user&#x60; object contains all attributes sent in &#x60;variation&#x60; calls for that key. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return UserRecord
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUser(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : UserRecord {
        @Suppress("DEPRECATION")
        val localVarResponse = getUserWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserRecord
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get user
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Get context instances](/tag/Contexts#operation/getContextInstances) instead of this endpoint.  Get a user by key. The &#x60;user&#x60; object contains all attributes sent in &#x60;variation&#x60; calls for that key. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return ApiResponse<UserRecord?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUserWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : ApiResponse<UserRecord?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUserRequestConfig(projectKey = projectKey, environmentKey = environmentKey, userKey = userKey)

        return request<Unit, UserRecord>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUser
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param userKey The user key
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUserRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, userKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/users/{projectKey}/{environmentKey}/{userKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"userKey"+"}", encodeURIComponent(userKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List users
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for contexts](/tag/Contexts#operation/searchContexts) instead of this endpoint.  List all users in the environment. Includes the total count of users. This is useful for exporting all users in the system for further analysis.  Each page displays users up to a set &#x60;limit&#x60;. The default is 20. To page through, follow the &#x60;next&#x60; link in the &#x60;_links&#x60; object. To learn more, read [Representations](/#section/Representations). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param limit The number of elements to return per page (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @return UsersRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUsers(projectKey: kotlin.String, environmentKey: kotlin.String, limit: kotlin.Long? = null, searchAfter: kotlin.String? = null) : UsersRep {
        @Suppress("DEPRECATION")
        val localVarResponse = getUsersWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, limit = limit, searchAfter = searchAfter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List users
     * &gt; ### Use contexts instead &gt; &gt; After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should use [Search for contexts](/tag/Contexts#operation/searchContexts) instead of this endpoint.  List all users in the environment. Includes the total count of users. This is useful for exporting all users in the system for further analysis.  Each page displays users up to a set &#x60;limit&#x60;. The default is 20. To page through, follow the &#x60;next&#x60; link in the &#x60;_links&#x60; object. To learn more, read [Representations](/#section/Representations). 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param limit The number of elements to return per page (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @return ApiResponse<UsersRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun getUsersWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, limit: kotlin.Long?, searchAfter: kotlin.String?) : ApiResponse<UsersRep?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = getUsersRequestConfig(projectKey = projectKey, environmentKey = environmentKey, limit = limit, searchAfter = searchAfter)

        return request<Unit, UsersRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getUsers
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param limit The number of elements to return per page (optional)
     * @param searchAfter Limits results to users with sort values after the value you specify. You can use this for pagination, but we recommend using the &#x60;next&#x60; link we provide instead. (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun getUsersRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, limit: kotlin.Long?, searchAfter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (searchAfter != null) {
                    put("searchAfter", listOf(searchAfter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/users/{projectKey}/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
