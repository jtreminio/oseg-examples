/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.Access
import com.launchdarkly.client.models.FlagConfigEvaluation
import com.launchdarkly.client.models.FlagConfigMigrationSettingsRep
import com.launchdarkly.client.models.FlagSummary
import com.launchdarkly.client.models.Link
import com.launchdarkly.client.models.Prerequisite
import com.launchdarkly.client.models.Rule
import com.launchdarkly.client.models.Target
import com.launchdarkly.client.models.VariationOrRolloutRep

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param on Whether the flag is on
 * @param archived Boolean indicating if the feature flag is archived
 * @param salt 
 * @param sel 
 * @param lastModified 
 * @param version Version of the feature flag
 * @param site 
 * @param environmentName The environment name
 * @param trackEvents Whether LaunchDarkly tracks events for the feature flag, for all rules
 * @param trackEventsFallthrough Whether LaunchDarkly tracks events for the feature flag, for the default rule
 * @param targets An array of the individual targets that will receive a specific variation based on their key. Individual targets with a context kind of 'user' are included here.
 * @param contextTargets An array of the individual targets that will receive a specific variation based on their key. Individual targets with context kinds other than 'user' are included here.
 * @param rules An array of the rules for how to serve a variation to specific targets based on their attributes
 * @param fallthrough 
 * @param offVariation The ID of the variation to serve when the flag is off
 * @param prerequisites An array of the prerequisite flags and their variations that are required before this flag takes effect
 * @param access 
 * @param debugEventsUntilDate 
 * @param summary 
 * @param evaluation 
 * @param migrationSettings 
 */


data class FeatureFlagConfig (

    /* Whether the flag is on */
    @Json(name = "on")
    val on: kotlin.Boolean,

    /* Boolean indicating if the feature flag is archived */
    @Json(name = "archived")
    val archived: kotlin.Boolean,

    @Json(name = "salt")
    val salt: kotlin.String,

    @Json(name = "sel")
    val sel: kotlin.String,

    @Json(name = "lastModified")
    val lastModified: kotlin.Long,

    /* Version of the feature flag */
    @Json(name = "version")
    val version: kotlin.Int,

    @Json(name = "_site")
    val site: Link,

    /* The environment name */
    @Json(name = "_environmentName")
    val environmentName: kotlin.String,

    /* Whether LaunchDarkly tracks events for the feature flag, for all rules */
    @Json(name = "trackEvents")
    val trackEvents: kotlin.Boolean,

    /* Whether LaunchDarkly tracks events for the feature flag, for the default rule */
    @Json(name = "trackEventsFallthrough")
    val trackEventsFallthrough: kotlin.Boolean,

    /* An array of the individual targets that will receive a specific variation based on their key. Individual targets with a context kind of 'user' are included here. */
    @Json(name = "targets")
    val targets: kotlin.collections.List<Target>? = null,

    /* An array of the individual targets that will receive a specific variation based on their key. Individual targets with context kinds other than 'user' are included here. */
    @Json(name = "contextTargets")
    val contextTargets: kotlin.collections.List<Target>? = null,

    /* An array of the rules for how to serve a variation to specific targets based on their attributes */
    @Json(name = "rules")
    val rules: kotlin.collections.List<Rule>? = null,

    @Json(name = "fallthrough")
    val fallthrough: VariationOrRolloutRep? = null,

    /* The ID of the variation to serve when the flag is off */
    @Json(name = "offVariation")
    val offVariation: kotlin.Int? = null,

    /* An array of the prerequisite flags and their variations that are required before this flag takes effect */
    @Json(name = "prerequisites")
    val prerequisites: kotlin.collections.List<Prerequisite>? = null,

    @Json(name = "_access")
    val access: Access? = null,

    @Json(name = "_debugEventsUntilDate")
    val debugEventsUntilDate: kotlin.Long? = null,

    @Json(name = "_summary")
    val summary: FlagSummary? = null,

    @Json(name = "evaluation")
    val evaluation: FlagConfigEvaluation? = null,

    @Json(name = "migrationSettings")
    val migrationSettings: FlagConfigMigrationSettingsRep? = null

) {


}

