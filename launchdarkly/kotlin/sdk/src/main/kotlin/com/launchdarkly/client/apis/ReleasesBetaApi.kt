/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.CreateReleaseInput
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.Release
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.UpdatePhaseStatusInput

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class ReleasesBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create a new release for flag
     * Creates a release by adding a flag to a release pipeline
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param createReleaseInput 
     * @return Release
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createReleaseForFlag(projectKey: kotlin.String, flagKey: kotlin.String, createReleaseInput: CreateReleaseInput) : Release {
        val localVarResponse = createReleaseForFlagWithHttpInfo(projectKey = projectKey, flagKey = flagKey, createReleaseInput = createReleaseInput)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Release
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new release for flag
     * Creates a release by adding a flag to a release pipeline
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param createReleaseInput 
     * @return ApiResponse<Release?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createReleaseForFlagWithHttpInfo(projectKey: kotlin.String, flagKey: kotlin.String, createReleaseInput: CreateReleaseInput) : ApiResponse<Release?> {
        val localVariableConfig = createReleaseForFlagRequestConfig(projectKey = projectKey, flagKey = flagKey, createReleaseInput = createReleaseInput)

        return request<CreateReleaseInput, Release>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createReleaseForFlag
     *
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param createReleaseInput 
     * @return RequestConfig
     */
    fun createReleaseForFlagRequestConfig(projectKey: kotlin.String, flagKey: kotlin.String, createReleaseInput: CreateReleaseInput) : RequestConfig<CreateReleaseInput> {
        val localVariableBody = createReleaseInput
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/projects/{projectKey}/flags/{flagKey}/release".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"flagKey"+"}", encodeURIComponent(flagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a release for flag
     * Deletes a release from a flag
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteReleaseByFlagKey(projectKey: kotlin.String, flagKey: kotlin.String) : Unit {
        val localVarResponse = deleteReleaseByFlagKeyWithHttpInfo(projectKey = projectKey, flagKey = flagKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a release for flag
     * Deletes a release from a flag
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteReleaseByFlagKeyWithHttpInfo(projectKey: kotlin.String, flagKey: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteReleaseByFlagKeyRequestConfig(projectKey = projectKey, flagKey = flagKey)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteReleaseByFlagKey
     *
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return RequestConfig
     */
    fun deleteReleaseByFlagKeyRequestConfig(projectKey: kotlin.String, flagKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/flags/{projectKey}/{flagKey}/release".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"flagKey"+"}", encodeURIComponent(flagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get release for flag
     * Get currently active release for a flag
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return Release
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getReleaseByFlagKey(projectKey: kotlin.String, flagKey: kotlin.String) : Release {
        val localVarResponse = getReleaseByFlagKeyWithHttpInfo(projectKey = projectKey, flagKey = flagKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Release
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get release for flag
     * Get currently active release for a flag
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return ApiResponse<Release?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReleaseByFlagKeyWithHttpInfo(projectKey: kotlin.String, flagKey: kotlin.String) : ApiResponse<Release?> {
        val localVariableConfig = getReleaseByFlagKeyRequestConfig(projectKey = projectKey, flagKey = flagKey)

        return request<Unit, Release>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReleaseByFlagKey
     *
     * @param projectKey The project key
     * @param flagKey The flag key
     * @return RequestConfig
     */
    fun getReleaseByFlagKeyRequestConfig(projectKey: kotlin.String, flagKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/flags/{projectKey}/{flagKey}/release".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"flagKey"+"}", encodeURIComponent(flagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Patch release for flag
     * This endpoint is only available for releases that are part of a legacy release pipeline. Releases for new release pipelines should use the [Update phase status for release](/tag/Releases-(beta)#operation/updatePhaseStatus) endpoint. To learn more about migrating from legacy release pipelines to fully automated release pipelines, read the [Release pipeline migration guide](https://docs.launchdarkly.com/guides/flags/release-pipeline-migration).  Update currently active release for a flag. Updating releases requires the [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) format. To learn more, read [Updates](/#section/Overview/Updates).  You can only use this endpoint to mark a release phase complete or incomplete. To indicate which phase to update, use the array index in the &#x60;path&#x60;. For example, to mark the first phase of a release as complete, use the following request body:  &#x60;&#x60;&#x60;   [     {       \&quot;op\&quot;: \&quot;replace\&quot;,       \&quot;path\&quot;: \&quot;/phase/0/complete\&quot;,       \&quot;value\&quot;: true     }   ] &#x60;&#x60;&#x60; 
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param patchOperation 
     * @return Release
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchReleaseByFlagKey(projectKey: kotlin.String, flagKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : Release {
        val localVarResponse = patchReleaseByFlagKeyWithHttpInfo(projectKey = projectKey, flagKey = flagKey, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Release
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Patch release for flag
     * This endpoint is only available for releases that are part of a legacy release pipeline. Releases for new release pipelines should use the [Update phase status for release](/tag/Releases-(beta)#operation/updatePhaseStatus) endpoint. To learn more about migrating from legacy release pipelines to fully automated release pipelines, read the [Release pipeline migration guide](https://docs.launchdarkly.com/guides/flags/release-pipeline-migration).  Update currently active release for a flag. Updating releases requires the [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) format. To learn more, read [Updates](/#section/Overview/Updates).  You can only use this endpoint to mark a release phase complete or incomplete. To indicate which phase to update, use the array index in the &#x60;path&#x60;. For example, to mark the first phase of a release as complete, use the following request body:  &#x60;&#x60;&#x60;   [     {       \&quot;op\&quot;: \&quot;replace\&quot;,       \&quot;path\&quot;: \&quot;/phase/0/complete\&quot;,       \&quot;value\&quot;: true     }   ] &#x60;&#x60;&#x60; 
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param patchOperation 
     * @return ApiResponse<Release?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchReleaseByFlagKeyWithHttpInfo(projectKey: kotlin.String, flagKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<Release?> {
        val localVariableConfig = patchReleaseByFlagKeyRequestConfig(projectKey = projectKey, flagKey = flagKey, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, Release>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchReleaseByFlagKey
     *
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchReleaseByFlagKeyRequestConfig(projectKey: kotlin.String, flagKey: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/flags/{projectKey}/{flagKey}/release".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"flagKey"+"}", encodeURIComponent(flagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update phase status for release
     * Updates the execution status of a phase of a release
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param phaseId The phase ID
     * @param updatePhaseStatusInput 
     * @return Release
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updatePhaseStatus(projectKey: kotlin.String, flagKey: kotlin.String, phaseId: kotlin.String, updatePhaseStatusInput: UpdatePhaseStatusInput) : Release {
        val localVarResponse = updatePhaseStatusWithHttpInfo(projectKey = projectKey, flagKey = flagKey, phaseId = phaseId, updatePhaseStatusInput = updatePhaseStatusInput)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Release
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update phase status for release
     * Updates the execution status of a phase of a release
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param phaseId The phase ID
     * @param updatePhaseStatusInput 
     * @return ApiResponse<Release?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updatePhaseStatusWithHttpInfo(projectKey: kotlin.String, flagKey: kotlin.String, phaseId: kotlin.String, updatePhaseStatusInput: UpdatePhaseStatusInput) : ApiResponse<Release?> {
        val localVariableConfig = updatePhaseStatusRequestConfig(projectKey = projectKey, flagKey = flagKey, phaseId = phaseId, updatePhaseStatusInput = updatePhaseStatusInput)

        return request<UpdatePhaseStatusInput, Release>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updatePhaseStatus
     *
     * @param projectKey The project key
     * @param flagKey The flag key
     * @param phaseId The phase ID
     * @param updatePhaseStatusInput 
     * @return RequestConfig
     */
    fun updatePhaseStatusRequestConfig(projectKey: kotlin.String, flagKey: kotlin.String, phaseId: kotlin.String, updatePhaseStatusInput: UpdatePhaseStatusInput) : RequestConfig<UpdatePhaseStatusInput> {
        val localVariableBody = updatePhaseStatusInput
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/projects/{projectKey}/flags/{flagKey}/release/phases/{phaseId}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"flagKey"+"}", encodeURIComponent(flagKey.toString())).replace("{"+"phaseId"+"}", encodeURIComponent(phaseId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
