/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.FlagTriggerInput
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.TriggerPost
import com.launchdarkly.client.models.TriggerWorkflowCollectionRep
import com.launchdarkly.client.models.TriggerWorkflowRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class FlagTriggersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create flag trigger
     * Create a new flag trigger.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param triggerPost 
     * @return TriggerWorkflowRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTriggerWorkflow(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, triggerPost: TriggerPost) : TriggerWorkflowRep {
        val localVarResponse = createTriggerWorkflowWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, triggerPost = triggerPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TriggerWorkflowRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create flag trigger
     * Create a new flag trigger.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param triggerPost 
     * @return ApiResponse<TriggerWorkflowRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTriggerWorkflowWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, triggerPost: TriggerPost) : ApiResponse<TriggerWorkflowRep?> {
        val localVariableConfig = createTriggerWorkflowRequestConfig(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, triggerPost = triggerPost)

        return request<TriggerPost, TriggerWorkflowRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTriggerWorkflow
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param triggerPost 
     * @return RequestConfig
     */
    fun createTriggerWorkflowRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, triggerPost: TriggerPost) : RequestConfig<TriggerPost> {
        val localVariableBody = triggerPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete flag trigger
     * Delete a flag trigger by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTriggerWorkflow(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : Unit {
        val localVarResponse = deleteTriggerWorkflowWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete flag trigger
     * Delete a flag trigger by ID.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTriggerWorkflowWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteTriggerWorkflowRequestConfig(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteTriggerWorkflow
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @return RequestConfig
     */
    fun deleteTriggerWorkflowRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get flag trigger by ID
     * Get a flag trigger by ID.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The flag trigger ID
     * @return TriggerWorkflowRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTriggerWorkflowById(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : TriggerWorkflowRep {
        val localVarResponse = getTriggerWorkflowByIdWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TriggerWorkflowRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get flag trigger by ID
     * Get a flag trigger by ID.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The flag trigger ID
     * @return ApiResponse<TriggerWorkflowRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTriggerWorkflowByIdWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : ApiResponse<TriggerWorkflowRep?> {
        val localVariableConfig = getTriggerWorkflowByIdRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return request<Unit, TriggerWorkflowRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTriggerWorkflowById
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The flag trigger ID
     * @return RequestConfig
     */
    fun getTriggerWorkflowByIdRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List flag triggers
     * Get a list of all flag triggers.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @return TriggerWorkflowCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTriggerWorkflows(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String) : TriggerWorkflowCollectionRep {
        val localVarResponse = getTriggerWorkflowsWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TriggerWorkflowCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List flag triggers
     * Get a list of all flag triggers.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @return ApiResponse<TriggerWorkflowCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTriggerWorkflowsWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String) : ApiResponse<TriggerWorkflowCollectionRep?> {
        val localVariableConfig = getTriggerWorkflowsRequestConfig(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey)

        return request<Unit, TriggerWorkflowCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTriggerWorkflows
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @return RequestConfig
     */
    fun getTriggerWorkflowsRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update flag trigger
     * Update a flag trigger. Updating a flag trigger uses the semantic patch format.  To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating flag triggers.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating flag triggers&lt;/strong&gt;&lt;/summary&gt;  #### replaceTriggerActionInstructions  Removes the existing trigger action and replaces it with the new instructions.  ##### Parameters  - &#x60;value&#x60;: An array of the new &#x60;kind&#x60;s of actions to perform when triggering. Supported flag actions are &#x60;turnFlagOn&#x60; and &#x60;turnFlagOff&#x60;.  Here&#39;s an example that replaces the existing action with new instructions to turn flag targeting off:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [     {       \&quot;kind\&quot;: \&quot;replaceTriggerActionInstructions\&quot;,       \&quot;value\&quot;: [ {\&quot;kind\&quot;: \&quot;turnFlagOff\&quot;} ]     }   ] } &#x60;&#x60;&#x60;  #### cycleTriggerUrl  Generates a new URL for this trigger. You must update any clients using the trigger to use this new URL.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;cycleTriggerUrl\&quot; }] } &#x60;&#x60;&#x60;  #### disableTrigger  Disables the trigger. This saves the trigger configuration, but the trigger stops running. To re-enable, use &#x60;enableTrigger&#x60;.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;disableTrigger\&quot; }] } &#x60;&#x60;&#x60;  #### enableTrigger  Enables the trigger. If you previously disabled the trigger, it begins running again.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;enableTrigger\&quot; }] } &#x60;&#x60;&#x60;  &lt;/details&gt; 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @param flagTriggerInput 
     * @return TriggerWorkflowRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchTriggerWorkflow(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, flagTriggerInput: FlagTriggerInput) : TriggerWorkflowRep {
        val localVarResponse = patchTriggerWorkflowWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, id = id, flagTriggerInput = flagTriggerInput)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TriggerWorkflowRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update flag trigger
     * Update a flag trigger. Updating a flag trigger uses the semantic patch format.  To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating flag triggers.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating flag triggers&lt;/strong&gt;&lt;/summary&gt;  #### replaceTriggerActionInstructions  Removes the existing trigger action and replaces it with the new instructions.  ##### Parameters  - &#x60;value&#x60;: An array of the new &#x60;kind&#x60;s of actions to perform when triggering. Supported flag actions are &#x60;turnFlagOn&#x60; and &#x60;turnFlagOff&#x60;.  Here&#39;s an example that replaces the existing action with new instructions to turn flag targeting off:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [     {       \&quot;kind\&quot;: \&quot;replaceTriggerActionInstructions\&quot;,       \&quot;value\&quot;: [ {\&quot;kind\&quot;: \&quot;turnFlagOff\&quot;} ]     }   ] } &#x60;&#x60;&#x60;  #### cycleTriggerUrl  Generates a new URL for this trigger. You must update any clients using the trigger to use this new URL.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;cycleTriggerUrl\&quot; }] } &#x60;&#x60;&#x60;  #### disableTrigger  Disables the trigger. This saves the trigger configuration, but the trigger stops running. To re-enable, use &#x60;enableTrigger&#x60;.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;disableTrigger\&quot; }] } &#x60;&#x60;&#x60;  #### enableTrigger  Enables the trigger. If you previously disabled the trigger, it begins running again.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{ \&quot;kind\&quot;: \&quot;enableTrigger\&quot; }] } &#x60;&#x60;&#x60;  &lt;/details&gt; 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @param flagTriggerInput 
     * @return ApiResponse<TriggerWorkflowRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchTriggerWorkflowWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, flagTriggerInput: FlagTriggerInput) : ApiResponse<TriggerWorkflowRep?> {
        val localVariableConfig = patchTriggerWorkflowRequestConfig(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, id = id, flagTriggerInput = flagTriggerInput)

        return request<FlagTriggerInput, TriggerWorkflowRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchTriggerWorkflow
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param id The flag trigger ID
     * @param flagTriggerInput 
     * @return RequestConfig
     */
    fun patchTriggerWorkflowRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, id: kotlin.String, flagTriggerInput: FlagTriggerInput) : RequestConfig<FlagTriggerInput> {
        val localVariableBody = flagTriggerInput
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/flags/{projectKey}/{featureFlagKey}/triggers/{environmentKey}/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
