/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param attribute The attribute the rule applies to, for example, last name or email address
 * @param op The operator to apply to the given attribute
 * @param negate Whether the operator should be negated
 */


data class RuleClause (

    /* The attribute the rule applies to, for example, last name or email address */
    @Json(name = "attribute")
    val attribute: kotlin.String? = null,

    /* The operator to apply to the given attribute */
    @Json(name = "op")
    val op: RuleClause.Op? = null,

    /* Whether the operator should be negated */
    @Json(name = "negate")
    val negate: kotlin.Boolean? = null

) {

    /**
     * The operator to apply to the given attribute
     *
     * Values: `in`,endsWith,startsWith,matches,contains,lessThan,lessThanOrEqual,greaterThan,greaterThanOrEqual,before,after,segmentMatch,semVerEqual,semVerLessThan,semVerGreaterThan
     */
    @JsonClass(generateAdapter = false)
    enum class Op(val value: kotlin.String) {
        @Json(name = "in") `in`("in"),
        @Json(name = "endsWith") endsWith("endsWith"),
        @Json(name = "startsWith") startsWith("startsWith"),
        @Json(name = "matches") matches("matches"),
        @Json(name = "contains") contains("contains"),
        @Json(name = "lessThan") lessThan("lessThan"),
        @Json(name = "lessThanOrEqual") lessThanOrEqual("lessThanOrEqual"),
        @Json(name = "greaterThan") greaterThan("greaterThan"),
        @Json(name = "greaterThanOrEqual") greaterThanOrEqual("greaterThanOrEqual"),
        @Json(name = "before") before("before"),
        @Json(name = "after") after("after"),
        @Json(name = "segmentMatch") segmentMatch("segmentMatch"),
        @Json(name = "semVerEqual") semVerEqual("semVerEqual"),
        @Json(name = "semVerLessThan") semVerLessThan("semVerLessThan"),
        @Json(name = "semVerGreaterThan") semVerGreaterThan("semVerGreaterThan");
    }

}

