/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.ApprovalSettings
import com.launchdarkly.client.models.Link

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param links The location and content type of related resources
 * @param id The ID for the environment. Use this as the client-side ID for authorization in some client-side SDKs, and to associate LaunchDarkly environments with CDN integrations in edge SDKs.
 * @param key A project-unique key for the new environment
 * @param name A human-friendly name for the new environment
 * @param apiKey The SDK key for the environment. Use this for authorization in server-side SDKs.
 * @param mobileKey The mobile key for the environment. Use this for authorization in mobile SDKs.
 * @param color The color used to indicate this environment in the UI
 * @param defaultTtl The default time (in minutes) that the PHP SDK can cache feature flag rules locally
 * @param secureMode Ensures that one end user of the client-side SDK cannot inspect the variations for another end user
 * @param defaultTrackEvents Enables tracking detailed information for new flags by default
 * @param requireComments Whether members who modify flags and segments through the LaunchDarkly user interface are required to add a comment
 * @param confirmChanges Whether members who modify flags and segments through the LaunchDarkly user interface are required to confirm those changes
 * @param tags A list of tags for this environment
 * @param critical Whether the environment is critical
 * @param approvalSettings 
 * @param resourceApprovalSettings Details on the approval settings for this environment for each resource kind
 */


data class Environment (

    /* The location and content type of related resources */
    @Json(name = "_links")
    val links: kotlin.collections.Map<kotlin.String, Link>,

    /* The ID for the environment. Use this as the client-side ID for authorization in some client-side SDKs, and to associate LaunchDarkly environments with CDN integrations in edge SDKs. */
    @Json(name = "_id")
    val id: kotlin.String,

    /* A project-unique key for the new environment */
    @Json(name = "key")
    val key: kotlin.String,

    /* A human-friendly name for the new environment */
    @Json(name = "name")
    val name: kotlin.String,

    /* The SDK key for the environment. Use this for authorization in server-side SDKs. */
    @Json(name = "apiKey")
    val apiKey: kotlin.String,

    /* The mobile key for the environment. Use this for authorization in mobile SDKs. */
    @Json(name = "mobileKey")
    val mobileKey: kotlin.String,

    /* The color used to indicate this environment in the UI */
    @Json(name = "color")
    val color: kotlin.String,

    /* The default time (in minutes) that the PHP SDK can cache feature flag rules locally */
    @Json(name = "defaultTtl")
    val defaultTtl: kotlin.Int,

    /* Ensures that one end user of the client-side SDK cannot inspect the variations for another end user */
    @Json(name = "secureMode")
    val secureMode: kotlin.Boolean,

    /* Enables tracking detailed information for new flags by default */
    @Json(name = "defaultTrackEvents")
    val defaultTrackEvents: kotlin.Boolean,

    /* Whether members who modify flags and segments through the LaunchDarkly user interface are required to add a comment */
    @Json(name = "requireComments")
    val requireComments: kotlin.Boolean,

    /* Whether members who modify flags and segments through the LaunchDarkly user interface are required to confirm those changes */
    @Json(name = "confirmChanges")
    val confirmChanges: kotlin.Boolean,

    /* A list of tags for this environment */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>,

    /* Whether the environment is critical */
    @Json(name = "critical")
    val critical: kotlin.Boolean,

    @Json(name = "approvalSettings")
    val approvalSettings: ApprovalSettings? = null,

    /* Details on the approval settings for this environment for each resource kind */
    @Json(name = "resourceApprovalSettings")
    val resourceApprovalSettings: kotlin.collections.Map<kotlin.String, ApprovalSettings>? = null

) {


}

