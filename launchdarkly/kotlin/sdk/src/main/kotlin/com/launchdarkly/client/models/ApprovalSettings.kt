/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param required If approvals are required for this environment
 * @param bypassApprovalsForPendingChanges Whether to skip approvals for pending changes
 * @param minNumApprovals Sets the amount of approvals required before a member can apply a change. The minimum is one and the maximum is five.
 * @param canReviewOwnRequest Allow someone who makes an approval request to apply their own change
 * @param canApplyDeclinedChanges Allow applying the change as long as at least one person has approved
 * @param serviceKind Which service to use for managing approvals
 * @param serviceConfig 
 * @param requiredApprovalTags Require approval only on flags with the provided tags. Otherwise all flags will require approval.
 * @param autoApplyApprovedChanges Automatically apply changes that have been approved by all reviewers. This field is only applicable for approval services other than LaunchDarkly.
 * @param serviceKindConfigurationId Optional field for integration configuration ID of a custom approval integration. This is an Enterprise-only feature.
 * @param resourceKind The kind of resource for which the approval settings apply, for example, flag or segment
 */


data class ApprovalSettings (

    /* If approvals are required for this environment */
    @Json(name = "required")
    val required: kotlin.Boolean,

    /* Whether to skip approvals for pending changes */
    @Json(name = "bypassApprovalsForPendingChanges")
    val bypassApprovalsForPendingChanges: kotlin.Boolean,

    /* Sets the amount of approvals required before a member can apply a change. The minimum is one and the maximum is five. */
    @Json(name = "minNumApprovals")
    val minNumApprovals: kotlin.Int,

    /* Allow someone who makes an approval request to apply their own change */
    @Json(name = "canReviewOwnRequest")
    val canReviewOwnRequest: kotlin.Boolean,

    /* Allow applying the change as long as at least one person has approved */
    @Json(name = "canApplyDeclinedChanges")
    val canApplyDeclinedChanges: kotlin.Boolean,

    /* Which service to use for managing approvals */
    @Json(name = "serviceKind")
    val serviceKind: kotlin.String,

    @Json(name = "serviceConfig")
    val serviceConfig: kotlin.collections.Map<kotlin.String, kotlin.Any>,

    /* Require approval only on flags with the provided tags. Otherwise all flags will require approval. */
    @Json(name = "requiredApprovalTags")
    val requiredApprovalTags: kotlin.collections.List<kotlin.String>,

    /* Automatically apply changes that have been approved by all reviewers. This field is only applicable for approval services other than LaunchDarkly. */
    @Json(name = "autoApplyApprovedChanges")
    val autoApplyApprovedChanges: kotlin.Boolean? = null,

    /* Optional field for integration configuration ID of a custom approval integration. This is an Enterprise-only feature. */
    @Json(name = "serviceKindConfigurationId")
    val serviceKindConfigurationId: kotlin.String? = null,

    /* The kind of resource for which the approval settings apply, for example, flag or segment */
    @Json(name = "resourceKind")
    val resourceKind: kotlin.String? = null

) {


}

