/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.LayerCollectionRep
import com.launchdarkly.client.models.LayerPatchInput
import com.launchdarkly.client.models.LayerPost
import com.launchdarkly.client.models.LayerRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class LayersApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create layer
     * Create a layer. Experiments running in the same layer are granted mutually-exclusive traffic. 
     * @param projectKey The project key
     * @param layerPost 
     * @return LayerRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createLayer(projectKey: kotlin.String, layerPost: LayerPost) : LayerRep {
        val localVarResponse = createLayerWithHttpInfo(projectKey = projectKey, layerPost = layerPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LayerRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create layer
     * Create a layer. Experiments running in the same layer are granted mutually-exclusive traffic. 
     * @param projectKey The project key
     * @param layerPost 
     * @return ApiResponse<LayerRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createLayerWithHttpInfo(projectKey: kotlin.String, layerPost: LayerPost) : ApiResponse<LayerRep?> {
        val localVariableConfig = createLayerRequestConfig(projectKey = projectKey, layerPost = layerPost)

        return request<LayerPost, LayerRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createLayer
     *
     * @param projectKey The project key
     * @param layerPost 
     * @return RequestConfig
     */
    fun createLayerRequestConfig(projectKey: kotlin.String, layerPost: LayerPost) : RequestConfig<LayerPost> {
        val localVariableBody = layerPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/layers".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get layers
     * Get a collection of all layers for a project
     * @param projectKey The project key
     * @param filter A comma-separated list of filters. This endpoint only accepts filtering by &#x60;experimentKey&#x60;. The filter returns layers which include that experiment for the selected environment(s). For example: &#x60;filter&#x3D;reservations.experimentKey contains expKey&#x60;. (optional)
     * @return LayerCollectionRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getLayers(projectKey: kotlin.String, filter: kotlin.String? = null) : LayerCollectionRep {
        val localVarResponse = getLayersWithHttpInfo(projectKey = projectKey, filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LayerCollectionRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get layers
     * Get a collection of all layers for a project
     * @param projectKey The project key
     * @param filter A comma-separated list of filters. This endpoint only accepts filtering by &#x60;experimentKey&#x60;. The filter returns layers which include that experiment for the selected environment(s). For example: &#x60;filter&#x3D;reservations.experimentKey contains expKey&#x60;. (optional)
     * @return ApiResponse<LayerCollectionRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLayersWithHttpInfo(projectKey: kotlin.String, filter: kotlin.String?) : ApiResponse<LayerCollectionRep?> {
        val localVariableConfig = getLayersRequestConfig(projectKey = projectKey, filter = filter)

        return request<Unit, LayerCollectionRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLayers
     *
     * @param projectKey The project key
     * @param filter A comma-separated list of filters. This endpoint only accepts filtering by &#x60;experimentKey&#x60;. The filter returns layers which include that experiment for the selected environment(s). For example: &#x60;filter&#x3D;reservations.experimentKey contains expKey&#x60;. (optional)
     * @return RequestConfig
     */
    fun getLayersRequestConfig(projectKey: kotlin.String, filter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/layers".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update layer
     * Update a layer by adding, changing, or removing traffic reservations for experiments, or by changing layer name or description. Updating a layer uses the semantic patch format.  To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating layers.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating layers&lt;/strong&gt;&lt;/summary&gt;  #### updateName  Updates the layer name.  ##### Parameters  - &#x60;name&#x60;: The new layer name.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateName\&quot;,       \&quot;name\&quot;: \&quot;New name\&quot;   }] } &#x60;&#x60;&#x60;  #### updateDescription  Updates the layer description.  ##### Parameters  - &#x60;description&#x60;: The new description.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateDescription\&quot;,       \&quot;description\&quot;: \&quot;New description\&quot;   }] } &#x60;&#x60;&#x60;  #### updateExperimentReservation  Adds or updates a traffic reservation for an experiment in a layer.  ##### Parameters  - &#x60;experimentKey&#x60;: The key of the experiment whose reservation you are adding to or updating in the layer. - &#x60;reservationPercent&#x60;: The amount of traffic in the layer to reserve. Must be an integer. Zero is allowed until iteration start.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;environmentKey\&quot;: \&quot;production\&quot;,   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateExperimentReservation\&quot;,       \&quot;experimentKey\&quot;: \&quot;exp-key\&quot;,       \&quot;reservationPercent\&quot;: 10   }] } &#x60;&#x60;&#x60;  #### removeExperiment  Removes a traffic reservation for an experiment from a layer.  ##### Parameters  - &#x60;experimentKey&#x60;: The key of the experiment whose reservation you want to remove from the layer.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;environmentKey\&quot;: \&quot;production\&quot;,   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;removeExperiment\&quot;,       \&quot;experimentKey\&quot;: \&quot;exp-key\&quot;   }] } &#x60;&#x60;&#x60;  &lt;/details&gt; 
     * @param projectKey The project key
     * @param layerKey The layer key
     * @param layerPatchInput 
     * @return LayerRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateLayer(projectKey: kotlin.String, layerKey: kotlin.String, layerPatchInput: LayerPatchInput) : LayerRep {
        val localVarResponse = updateLayerWithHttpInfo(projectKey = projectKey, layerKey = layerKey, layerPatchInput = layerPatchInput)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LayerRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update layer
     * Update a layer by adding, changing, or removing traffic reservations for experiments, or by changing layer name or description. Updating a layer uses the semantic patch format.  To make a semantic patch request, you must append &#x60;domain-model&#x3D;launchdarkly.semanticpatch&#x60; to your &#x60;Content-Type&#x60; header. To learn more, read [Updates using semantic patch](/reference#updates-using-semantic-patch).  ### Instructions  Semantic patch requests support the following &#x60;kind&#x60; instructions for updating layers.  &lt;details&gt; &lt;summary&gt;Click to expand instructions for &lt;strong&gt;updating layers&lt;/strong&gt;&lt;/summary&gt;  #### updateName  Updates the layer name.  ##### Parameters  - &#x60;name&#x60;: The new layer name.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateName\&quot;,       \&quot;name\&quot;: \&quot;New name\&quot;   }] } &#x60;&#x60;&#x60;  #### updateDescription  Updates the layer description.  ##### Parameters  - &#x60;description&#x60;: The new description.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateDescription\&quot;,       \&quot;description\&quot;: \&quot;New description\&quot;   }] } &#x60;&#x60;&#x60;  #### updateExperimentReservation  Adds or updates a traffic reservation for an experiment in a layer.  ##### Parameters  - &#x60;experimentKey&#x60;: The key of the experiment whose reservation you are adding to or updating in the layer. - &#x60;reservationPercent&#x60;: The amount of traffic in the layer to reserve. Must be an integer. Zero is allowed until iteration start.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;environmentKey\&quot;: \&quot;production\&quot;,   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;updateExperimentReservation\&quot;,       \&quot;experimentKey\&quot;: \&quot;exp-key\&quot;,       \&quot;reservationPercent\&quot;: 10   }] } &#x60;&#x60;&#x60;  #### removeExperiment  Removes a traffic reservation for an experiment from a layer.  ##### Parameters  - &#x60;experimentKey&#x60;: The key of the experiment whose reservation you want to remove from the layer.  Here&#39;s an example:  &#x60;&#x60;&#x60;json {   \&quot;environmentKey\&quot;: \&quot;production\&quot;,   \&quot;instructions\&quot;: [{       \&quot;kind\&quot;: \&quot;removeExperiment\&quot;,       \&quot;experimentKey\&quot;: \&quot;exp-key\&quot;   }] } &#x60;&#x60;&#x60;  &lt;/details&gt; 
     * @param projectKey The project key
     * @param layerKey The layer key
     * @param layerPatchInput 
     * @return ApiResponse<LayerRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateLayerWithHttpInfo(projectKey: kotlin.String, layerKey: kotlin.String, layerPatchInput: LayerPatchInput) : ApiResponse<LayerRep?> {
        val localVariableConfig = updateLayerRequestConfig(projectKey = projectKey, layerKey = layerKey, layerPatchInput = layerPatchInput)

        return request<LayerPatchInput, LayerRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateLayer
     *
     * @param projectKey The project key
     * @param layerKey The layer key
     * @param layerPatchInput 
     * @return RequestConfig
     */
    fun updateLayerRequestConfig(projectKey: kotlin.String, layerKey: kotlin.String, layerPatchInput: LayerPatchInput) : RequestConfig<LayerPatchInput> {
        val localVariableBody = layerPatchInput
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/projects/{projectKey}/layers/{layerKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"layerKey"+"}", encodeURIComponent(layerKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
