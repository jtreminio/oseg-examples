/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param kind The type of change to make to the context's removal date from this segment
 * @param contextKey A unique key used to represent the context
 * @param contextKind The kind of context
 * @param targetType The segment's target type
 * @param `value` The time, in Unix milliseconds, when the context should be removed from this segment. Required if <code>kind</code> is <code>addExpiringTarget</code> or <code>updateExpiringTarget</code>.
 * @param version The version of the expiring target to update. Optional and only used if <code>kind</code> is <code>updateExpiringTarget</code>. If included, update will fail if version doesn't match current version of the expiring target.
 */


data class PatchSegmentExpiringTargetInstruction (

    /* The type of change to make to the context's removal date from this segment */
    @Json(name = "kind")
    val kind: PatchSegmentExpiringTargetInstruction.Kind,

    /* A unique key used to represent the context */
    @Json(name = "contextKey")
    val contextKey: kotlin.String,

    /* The kind of context */
    @Json(name = "contextKind")
    val contextKind: kotlin.String,

    /* The segment's target type */
    @Json(name = "targetType")
    val targetType: PatchSegmentExpiringTargetInstruction.TargetType,

    /* The time, in Unix milliseconds, when the context should be removed from this segment. Required if <code>kind</code> is <code>addExpiringTarget</code> or <code>updateExpiringTarget</code>. */
    @Json(name = "value")
    val `value`: kotlin.Long? = null,

    /* The version of the expiring target to update. Optional and only used if <code>kind</code> is <code>updateExpiringTarget</code>. If included, update will fail if version doesn't match current version of the expiring target. */
    @Json(name = "version")
    val version: kotlin.Int? = null

) {

    /**
     * The type of change to make to the context's removal date from this segment
     *
     * Values: addExpiringTarget,updateExpiringTarget,removeExpiringTarget
     */
    @JsonClass(generateAdapter = false)
    enum class Kind(val value: kotlin.String) {
        @Json(name = "addExpiringTarget") addExpiringTarget("addExpiringTarget"),
        @Json(name = "updateExpiringTarget") updateExpiringTarget("updateExpiringTarget"),
        @Json(name = "removeExpiringTarget") removeExpiringTarget("removeExpiringTarget");
    }
    /**
     * The segment's target type
     *
     * Values: included,excluded
     */
    @JsonClass(generateAdapter = false)
    enum class TargetType(val value: kotlin.String) {
        @Json(name = "included") included("included"),
        @Json(name = "excluded") excluded("excluded");
    }

}

