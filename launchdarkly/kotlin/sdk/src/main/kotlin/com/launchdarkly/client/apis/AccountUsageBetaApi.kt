/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.SdkListRep
import com.launchdarkly.client.models.SdkVersionListRep
import com.launchdarkly.client.models.SeriesIntervalsRep
import com.launchdarkly.client.models.SeriesListRep
import com.launchdarkly.client.models.StatusServiceUnavailable
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class AccountUsageBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Get data export events usage
     * Get a time-series array of the number of monthly data export events from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return SeriesIntervalsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDataExportEventsUsage(from: kotlin.String? = null, to: kotlin.String? = null, projectKey: kotlin.String? = null, environmentKey: kotlin.String? = null) : SeriesIntervalsRep {
        val localVarResponse = getDataExportEventsUsageWithHttpInfo(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesIntervalsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get data export events usage
     * Get a time-series array of the number of monthly data export events from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return ApiResponse<SeriesIntervalsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDataExportEventsUsageWithHttpInfo(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : ApiResponse<SeriesIntervalsRep?> {
        val localVariableConfig = getDataExportEventsUsageRequestConfig(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return request<Unit, SeriesIntervalsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDataExportEventsUsage
     *
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return RequestConfig
     */
    fun getDataExportEventsUsageRequestConfig(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (projectKey != null) {
                    put("projectKey", listOf(projectKey.toString()))
                }
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/data-export-events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get evaluations usage
     * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEvaluationsUsage(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, from: kotlin.String? = null, to: kotlin.String? = null, tz: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getEvaluationsUsageWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, from = from, to = to, tz = tz)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get evaluations usage
     * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEvaluationsUsageWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getEvaluationsUsageRequestConfig(projectKey = projectKey, environmentKey = environmentKey, featureFlagKey = featureFlagKey, from = from, to = to, tz = tz)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEvaluationsUsage
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param featureFlagKey The feature flag key
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return RequestConfig
     */
    fun getEvaluationsUsageRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, featureFlagKey: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (tz != null) {
                    put("tz", listOf(tz.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/evaluations/{projectKey}/{environmentKey}/{featureFlagKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get events usage
     * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param type The type of event to retrieve. Must be either &#x60;received&#x60; or &#x60;published&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getEventsUsage(type: kotlin.String, from: kotlin.String? = null, to: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getEventsUsageWithHttpInfo(type = type, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get events usage
     * Get time-series arrays of the number of times a flag is evaluated, broken down by the variation that resulted from that evaluation. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param type The type of event to retrieve. Must be either &#x60;received&#x60; or &#x60;published&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getEventsUsageWithHttpInfo(type: kotlin.String, from: kotlin.String?, to: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getEventsUsageRequestConfig(type = type, from = from, to = to)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getEventsUsage
     *
     * @param type The type of event to retrieve. Must be either &#x60;received&#x60; or &#x60;published&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return RequestConfig
     */
    fun getEventsUsageRequestConfig(type: kotlin.String, from: kotlin.String?, to: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/events/{type}".replace("{"+"type"+"}", encodeURIComponent(type.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get experimentation keys usage
     * Get a time-series array of the number of monthly experimentation keys from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return SeriesIntervalsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getExperimentationKeysUsage(from: kotlin.String? = null, to: kotlin.String? = null, projectKey: kotlin.String? = null, environmentKey: kotlin.String? = null) : SeriesIntervalsRep {
        val localVarResponse = getExperimentationKeysUsageWithHttpInfo(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesIntervalsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get experimentation keys usage
     * Get a time-series array of the number of monthly experimentation keys from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return ApiResponse<SeriesIntervalsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getExperimentationKeysUsageWithHttpInfo(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : ApiResponse<SeriesIntervalsRep?> {
        val localVariableConfig = getExperimentationKeysUsageRequestConfig(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return request<Unit, SeriesIntervalsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getExperimentationKeysUsage
     *
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return RequestConfig
     */
    fun getExperimentationKeysUsageRequestConfig(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (projectKey != null) {
                    put("projectKey", listOf(projectKey.toString()))
                }
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/experimentation-keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get experimentation units usage
     * Get a time-series array of the number of monthly experimentation units from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return SeriesIntervalsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getExperimentationUnitsUsage(from: kotlin.String? = null, to: kotlin.String? = null, projectKey: kotlin.String? = null, environmentKey: kotlin.String? = null) : SeriesIntervalsRep {
        val localVarResponse = getExperimentationUnitsUsageWithHttpInfo(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesIntervalsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get experimentation units usage
     * Get a time-series array of the number of monthly experimentation units from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return ApiResponse<SeriesIntervalsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getExperimentationUnitsUsageWithHttpInfo(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : ApiResponse<SeriesIntervalsRep?> {
        val localVariableConfig = getExperimentationUnitsUsageRequestConfig(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return request<Unit, SeriesIntervalsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getExperimentationUnitsUsage
     *
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return RequestConfig
     */
    fun getExperimentationUnitsUsageRequestConfig(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (projectKey != null) {
                    put("projectKey", listOf(projectKey.toString()))
                }
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/experimentation-units",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get MAU SDKs by type
     * Get a list of SDKs. These are all of the SDKs that have connected to LaunchDarkly by monthly active users (MAU) in the requested time period.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The data returned starts from this timestamp. Defaults to seven days ago. The timestamp is in Unix milliseconds, for example, 1656694800000. (optional)
     * @param to The data returned ends at this timestamp. Defaults to the current time. The timestamp is in Unix milliseconds, for example, 1657904400000. (optional)
     * @param sdktype The type of SDK with monthly active users (MAU) to list. Must be either &#x60;client&#x60; or &#x60;server&#x60;. (optional)
     * @return SdkListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMauSdksByType(from: kotlin.String? = null, to: kotlin.String? = null, sdktype: kotlin.String? = null) : SdkListRep {
        val localVarResponse = getMauSdksByTypeWithHttpInfo(from = from, to = to, sdktype = sdktype)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdkListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get MAU SDKs by type
     * Get a list of SDKs. These are all of the SDKs that have connected to LaunchDarkly by monthly active users (MAU) in the requested time period.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The data returned starts from this timestamp. Defaults to seven days ago. The timestamp is in Unix milliseconds, for example, 1656694800000. (optional)
     * @param to The data returned ends at this timestamp. Defaults to the current time. The timestamp is in Unix milliseconds, for example, 1657904400000. (optional)
     * @param sdktype The type of SDK with monthly active users (MAU) to list. Must be either &#x60;client&#x60; or &#x60;server&#x60;. (optional)
     * @return ApiResponse<SdkListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMauSdksByTypeWithHttpInfo(from: kotlin.String?, to: kotlin.String?, sdktype: kotlin.String?) : ApiResponse<SdkListRep?> {
        val localVariableConfig = getMauSdksByTypeRequestConfig(from = from, to = to, sdktype = sdktype)

        return request<Unit, SdkListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMauSdksByType
     *
     * @param from The data returned starts from this timestamp. Defaults to seven days ago. The timestamp is in Unix milliseconds, for example, 1656694800000. (optional)
     * @param to The data returned ends at this timestamp. Defaults to the current time. The timestamp is in Unix milliseconds, for example, 1657904400000. (optional)
     * @param sdktype The type of SDK with monthly active users (MAU) to list. Must be either &#x60;client&#x60; or &#x60;server&#x60;. (optional)
     * @return RequestConfig
     */
    fun getMauSdksByTypeRequestConfig(from: kotlin.String?, to: kotlin.String?, sdktype: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (sdktype != null) {
                    put("sdktype", listOf(sdktype.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/mau/sdks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get MAU usage
     * Get a time-series array of the number of monthly active users (MAU) seen by LaunchDarkly from your account. The granularity is always daily.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param project A project key to filter results to. Can be specified multiple times, one query parameter per project key, to view data for multiple projects. (optional)
     * @param environment An environment key to filter results to. When using this parameter, exactly one project key must also be set. Can be specified multiple times as separate query parameters to view data for multiple environments within a single project. (optional)
     * @param sdktype An SDK type to filter results to. Can be specified multiple times, one query parameter per SDK type. Valid values: client, server (optional)
     * @param sdk An SDK name to filter results to. Can be specified multiple times, one query parameter per SDK. (optional)
     * @param anonymous If specified, filters results to either anonymous or nonanonymous users. (optional)
     * @param groupby If specified, returns data for each distinct value of the given field. Can be specified multiple times to group data by multiple dimensions (for example, to group by both project and SDK). Valid values: project, environment, sdktype, sdk, anonymous, contextKind, sdkAppId (optional)
     * @param aggregationType If specified, queries for rolling 30-day, month-to-date, or daily incremental counts. Default is rolling 30-day. Valid values: rolling_30d, month_to_date, daily_incremental (optional)
     * @param contextKind Filters results to the specified context kinds. Can be specified multiple times, one query parameter per context kind. If not set, queries for the user context kind. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMauUsage(from: kotlin.String? = null, to: kotlin.String? = null, project: kotlin.String? = null, environment: kotlin.String? = null, sdktype: kotlin.String? = null, sdk: kotlin.String? = null, anonymous: kotlin.String? = null, groupby: kotlin.String? = null, aggregationType: kotlin.String? = null, contextKind: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getMauUsageWithHttpInfo(from = from, to = to, project = project, environment = environment, sdktype = sdktype, sdk = sdk, anonymous = anonymous, groupby = groupby, aggregationType = aggregationType, contextKind = contextKind)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get MAU usage
     * Get a time-series array of the number of monthly active users (MAU) seen by LaunchDarkly from your account. The granularity is always daily.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param project A project key to filter results to. Can be specified multiple times, one query parameter per project key, to view data for multiple projects. (optional)
     * @param environment An environment key to filter results to. When using this parameter, exactly one project key must also be set. Can be specified multiple times as separate query parameters to view data for multiple environments within a single project. (optional)
     * @param sdktype An SDK type to filter results to. Can be specified multiple times, one query parameter per SDK type. Valid values: client, server (optional)
     * @param sdk An SDK name to filter results to. Can be specified multiple times, one query parameter per SDK. (optional)
     * @param anonymous If specified, filters results to either anonymous or nonanonymous users. (optional)
     * @param groupby If specified, returns data for each distinct value of the given field. Can be specified multiple times to group data by multiple dimensions (for example, to group by both project and SDK). Valid values: project, environment, sdktype, sdk, anonymous, contextKind, sdkAppId (optional)
     * @param aggregationType If specified, queries for rolling 30-day, month-to-date, or daily incremental counts. Default is rolling 30-day. Valid values: rolling_30d, month_to_date, daily_incremental (optional)
     * @param contextKind Filters results to the specified context kinds. Can be specified multiple times, one query parameter per context kind. If not set, queries for the user context kind. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMauUsageWithHttpInfo(from: kotlin.String?, to: kotlin.String?, project: kotlin.String?, environment: kotlin.String?, sdktype: kotlin.String?, sdk: kotlin.String?, anonymous: kotlin.String?, groupby: kotlin.String?, aggregationType: kotlin.String?, contextKind: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getMauUsageRequestConfig(from = from, to = to, project = project, environment = environment, sdktype = sdktype, sdk = sdk, anonymous = anonymous, groupby = groupby, aggregationType = aggregationType, contextKind = contextKind)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMauUsage
     *
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param project A project key to filter results to. Can be specified multiple times, one query parameter per project key, to view data for multiple projects. (optional)
     * @param environment An environment key to filter results to. When using this parameter, exactly one project key must also be set. Can be specified multiple times as separate query parameters to view data for multiple environments within a single project. (optional)
     * @param sdktype An SDK type to filter results to. Can be specified multiple times, one query parameter per SDK type. Valid values: client, server (optional)
     * @param sdk An SDK name to filter results to. Can be specified multiple times, one query parameter per SDK. (optional)
     * @param anonymous If specified, filters results to either anonymous or nonanonymous users. (optional)
     * @param groupby If specified, returns data for each distinct value of the given field. Can be specified multiple times to group data by multiple dimensions (for example, to group by both project and SDK). Valid values: project, environment, sdktype, sdk, anonymous, contextKind, sdkAppId (optional)
     * @param aggregationType If specified, queries for rolling 30-day, month-to-date, or daily incremental counts. Default is rolling 30-day. Valid values: rolling_30d, month_to_date, daily_incremental (optional)
     * @param contextKind Filters results to the specified context kinds. Can be specified multiple times, one query parameter per context kind. If not set, queries for the user context kind. (optional)
     * @return RequestConfig
     */
    fun getMauUsageRequestConfig(from: kotlin.String?, to: kotlin.String?, project: kotlin.String?, environment: kotlin.String?, sdktype: kotlin.String?, sdk: kotlin.String?, anonymous: kotlin.String?, groupby: kotlin.String?, aggregationType: kotlin.String?, contextKind: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (project != null) {
                    put("project", listOf(project.toString()))
                }
                if (environment != null) {
                    put("environment", listOf(environment.toString()))
                }
                if (sdktype != null) {
                    put("sdktype", listOf(sdktype.toString()))
                }
                if (sdk != null) {
                    put("sdk", listOf(sdk.toString()))
                }
                if (anonymous != null) {
                    put("anonymous", listOf(anonymous.toString()))
                }
                if (groupby != null) {
                    put("groupby", listOf(groupby.toString()))
                }
                if (aggregationType != null) {
                    put("aggregationType", listOf(aggregationType.toString()))
                }
                if (contextKind != null) {
                    put("contextKind", listOf(contextKind.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/mau",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get MAU usage by category
     * Get time-series arrays of the number of monthly active users (MAU) seen by LaunchDarkly from your account, broken down by the category of users. The category is either &#x60;browser&#x60;, &#x60;mobile&#x60;, or &#x60;backend&#x60;.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getMauUsageByCategory(from: kotlin.String? = null, to: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getMauUsageByCategoryWithHttpInfo(from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get MAU usage by category
     * Get time-series arrays of the number of monthly active users (MAU) seen by LaunchDarkly from your account, broken down by the category of users. The category is either &#x60;browser&#x60;, &#x60;mobile&#x60;, or &#x60;backend&#x60;.&lt;br/&gt;&lt;br/&gt;Endpoints for retrieving monthly active users (MAU) do not return information about active context instances. After you have upgraded your LaunchDarkly SDK to use contexts instead of users, you should not rely on this endpoint. To learn more, read [Account usage metrics](https://docs.launchdarkly.com/home/account/metrics).
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMauUsageByCategoryWithHttpInfo(from: kotlin.String?, to: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getMauUsageByCategoryRequestConfig(from = from, to = to)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMauUsageByCategory
     *
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @return RequestConfig
     */
    fun getMauUsageByCategoryRequestConfig(from: kotlin.String?, to: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/mau/bycategory",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get service connection usage
     * Get a time-series array of the number of monthly service connections from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return SeriesIntervalsRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getServiceConnectionUsage(from: kotlin.String? = null, to: kotlin.String? = null, projectKey: kotlin.String? = null, environmentKey: kotlin.String? = null) : SeriesIntervalsRep {
        val localVarResponse = getServiceConnectionUsageWithHttpInfo(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesIntervalsRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get service connection usage
     * Get a time-series array of the number of monthly service connections from your account. The granularity is always daily, with a maximum of 31 days.
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return ApiResponse<SeriesIntervalsRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getServiceConnectionUsageWithHttpInfo(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : ApiResponse<SeriesIntervalsRep?> {
        val localVariableConfig = getServiceConnectionUsageRequestConfig(from = from, to = to, projectKey = projectKey, environmentKey = environmentKey)

        return request<Unit, SeriesIntervalsRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getServiceConnectionUsage
     *
     * @param from The series of data returned starts from this timestamp (Unix seconds). Defaults to the beginning of the current month. (optional)
     * @param to The series of data returned ends at this timestamp (Unix seconds). Defaults to the current time. (optional)
     * @param projectKey A project key. If specified, &#x60;environmentKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @param environmentKey An environment key. If specified, &#x60;projectKey&#x60; is required and results apply to the corresponding environment in this project. (optional)
     * @return RequestConfig
     */
    fun getServiceConnectionUsageRequestConfig(from: kotlin.String?, to: kotlin.String?, projectKey: kotlin.String?, environmentKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (projectKey != null) {
                    put("projectKey", listOf(projectKey.toString()))
                }
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/service-connections",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get stream usage
     * Get a time-series array of the number of streaming connections to LaunchDarkly in each time period. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStreamUsage(source: kotlin.String, from: kotlin.String? = null, to: kotlin.String? = null, tz: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getStreamUsageWithHttpInfo(source = source, from = from, to = to, tz = tz)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get stream usage
     * Get a time-series array of the number of streaming connections to LaunchDarkly in each time period. The granularity of the data depends on the age of the data requested. If the requested range is within the past two hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStreamUsageWithHttpInfo(source: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getStreamUsageRequestConfig(source = source, from = from, to = to, tz = tz)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStreamUsage
     *
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 30 days ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @return RequestConfig
     */
    fun getStreamUsageRequestConfig(source: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (tz != null) {
                    put("tz", listOf(tz.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/streams/{source}".replace("{"+"source"+"}", encodeURIComponent(source.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get stream usage by SDK version
     * Get multiple series of the number of streaming connections to LaunchDarkly in each time period, separated by SDK type and version. Information about each series is in the metadata array. The granularity of the data depends on the age of the data requested. If the requested range is within the past 2 hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @param sdk If included, this filters the returned series to only those that match this SDK name. (optional)
     * @param version If included, this filters the returned series to only those that match this SDK version. (optional)
     * @return SeriesListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStreamUsageBySdkVersion(source: kotlin.String, from: kotlin.String? = null, to: kotlin.String? = null, tz: kotlin.String? = null, sdk: kotlin.String? = null, version: kotlin.String? = null) : SeriesListRep {
        val localVarResponse = getStreamUsageBySdkVersionWithHttpInfo(source = source, from = from, to = to, tz = tz, sdk = sdk, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SeriesListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get stream usage by SDK version
     * Get multiple series of the number of streaming connections to LaunchDarkly in each time period, separated by SDK type and version. Information about each series is in the metadata array. The granularity of the data depends on the age of the data requested. If the requested range is within the past 2 hours, minutely data is returned. If it is within the last two days, hourly data is returned. Otherwise, daily data is returned.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @param sdk If included, this filters the returned series to only those that match this SDK name. (optional)
     * @param version If included, this filters the returned series to only those that match this SDK version. (optional)
     * @return ApiResponse<SeriesListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStreamUsageBySdkVersionWithHttpInfo(source: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?, sdk: kotlin.String?, version: kotlin.String?) : ApiResponse<SeriesListRep?> {
        val localVariableConfig = getStreamUsageBySdkVersionRequestConfig(source = source, from = from, to = to, tz = tz, sdk = sdk, version = version)

        return request<Unit, SeriesListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStreamUsageBySdkVersion
     *
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @param from The series of data returned starts from this timestamp. Defaults to 24 hours ago. (optional)
     * @param to The series of data returned ends at this timestamp. Defaults to the current time. (optional)
     * @param tz The timezone to use for breaks between days when returning daily data. (optional)
     * @param sdk If included, this filters the returned series to only those that match this SDK name. (optional)
     * @param version If included, this filters the returned series to only those that match this SDK version. (optional)
     * @return RequestConfig
     */
    fun getStreamUsageBySdkVersionRequestConfig(source: kotlin.String, from: kotlin.String?, to: kotlin.String?, tz: kotlin.String?, sdk: kotlin.String?, version: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (tz != null) {
                    put("tz", listOf(tz.toString()))
                }
                if (sdk != null) {
                    put("sdk", listOf(sdk.toString()))
                }
                if (version != null) {
                    put("version", listOf(version.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/streams/{source}/bysdkversion".replace("{"+"source"+"}", encodeURIComponent(source.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get stream usage SDK versions
     * Get a list of SDK version objects, which contain an SDK name and version. These are all of the SDKs that have connected to LaunchDarkly from your account in the past 60 days.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @return SdkVersionListRep
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStreamUsageSdkversion(source: kotlin.String) : SdkVersionListRep {
        val localVarResponse = getStreamUsageSdkversionWithHttpInfo(source = source)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdkVersionListRep
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get stream usage SDK versions
     * Get a list of SDK version objects, which contain an SDK name and version. These are all of the SDKs that have connected to LaunchDarkly from your account in the past 60 days.
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @return ApiResponse<SdkVersionListRep?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStreamUsageSdkversionWithHttpInfo(source: kotlin.String) : ApiResponse<SdkVersionListRep?> {
        val localVariableConfig = getStreamUsageSdkversionRequestConfig(source = source)

        return request<Unit, SdkVersionListRep>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStreamUsageSdkversion
     *
     * @param source The source of streaming connections to describe. Must be either &#x60;client&#x60; or &#x60;server&#x60;.
     * @return RequestConfig
     */
    fun getStreamUsageSdkversionRequestConfig(source: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/usage/streams/{source}/sdkversions".replace("{"+"source"+"}", encodeURIComponent(source.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
