/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.ClientSideAvailability
import com.launchdarkly.client.models.CustomProperty
import com.launchdarkly.client.models.Defaults
import com.launchdarkly.client.models.ExperimentInfoRep
import com.launchdarkly.client.models.FeatureFlagConfig
import com.launchdarkly.client.models.FlagMigrationSettingsRep
import com.launchdarkly.client.models.Link
import com.launchdarkly.client.models.MaintainerTeam
import com.launchdarkly.client.models.MemberSummary
import com.launchdarkly.client.models.Variation

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name A human-friendly name for the feature flag
 * @param kind Kind of feature flag
 * @param key A unique key used to reference the flag in your code
 * @param version Version of the feature flag
 * @param creationDate 
 * @param variations An array of possible variations for the flag
 * @param temporary Whether the flag is a temporary flag
 * @param tags Tags for the feature flag
 * @param links The location and content type of related resources
 * @param experiments 
 * @param customProperties 
 * @param archived Boolean indicating if the feature flag is archived
 * @param environments Details on the environments for this flag. Only returned if the request is filtered by environment, using the <code>filterEnv</code> query parameter.
 * @param description Description of the feature flag
 * @param includeInSnippet Deprecated, use <code>clientSideAvailability</code>. Whether this flag should be made available to the client-side JavaScript SDK
 * @param clientSideAvailability 
 * @param maintainerId Associated maintainerId for the feature flag
 * @param maintainer 
 * @param maintainerTeamKey The key of the associated team that maintains this feature flag
 * @param maintainerTeam 
 * @param goalIds Deprecated, use <code>experiments</code> instead
 * @param archivedDate 
 * @param deprecated Boolean indicating if the feature flag is deprecated
 * @param deprecatedDate 
 * @param defaults 
 * @param purpose 
 * @param migrationSettings 
 */


data class FeatureFlag (

    /* A human-friendly name for the feature flag */
    @Json(name = "name")
    val name: kotlin.String,

    /* Kind of feature flag */
    @Json(name = "kind")
    val kind: FeatureFlag.Kind,

    /* A unique key used to reference the flag in your code */
    @Json(name = "key")
    val key: kotlin.String,

    /* Version of the feature flag */
    @Json(name = "_version")
    val version: kotlin.Int,

    @Json(name = "creationDate")
    val creationDate: kotlin.Long,

    /* An array of possible variations for the flag */
    @Json(name = "variations")
    val variations: kotlin.collections.List<Variation>,

    /* Whether the flag is a temporary flag */
    @Json(name = "temporary")
    val temporary: kotlin.Boolean,

    /* Tags for the feature flag */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>,

    /* The location and content type of related resources */
    @Json(name = "_links")
    val links: kotlin.collections.Map<kotlin.String, Link>,

    @Json(name = "experiments")
    val experiments: ExperimentInfoRep,

    @Json(name = "customProperties")
    val customProperties: kotlin.collections.Map<kotlin.String, CustomProperty>,

    /* Boolean indicating if the feature flag is archived */
    @Json(name = "archived")
    val archived: kotlin.Boolean,

    /* Details on the environments for this flag. Only returned if the request is filtered by environment, using the <code>filterEnv</code> query parameter. */
    @Json(name = "environments")
    val environments: kotlin.collections.Map<kotlin.String, FeatureFlagConfig>,

    /* Description of the feature flag */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* Deprecated, use <code>clientSideAvailability</code>. Whether this flag should be made available to the client-side JavaScript SDK */
    @Json(name = "includeInSnippet")
    @Deprecated(message = "This property is deprecated.")
    val includeInSnippet: kotlin.Boolean? = null,

    @Json(name = "clientSideAvailability")
    val clientSideAvailability: ClientSideAvailability? = null,

    /* Associated maintainerId for the feature flag */
    @Json(name = "maintainerId")
    val maintainerId: kotlin.String? = null,

    @Json(name = "_maintainer")
    val maintainer: MemberSummary? = null,

    /* The key of the associated team that maintains this feature flag */
    @Json(name = "maintainerTeamKey")
    val maintainerTeamKey: kotlin.String? = null,

    @Json(name = "_maintainerTeam")
    val maintainerTeam: MaintainerTeam? = null,

    /* Deprecated, use <code>experiments</code> instead */
    @Json(name = "goalIds")
    @Deprecated(message = "This property is deprecated.")
    val goalIds: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "archivedDate")
    val archivedDate: kotlin.Long? = null,

    /* Boolean indicating if the feature flag is deprecated */
    @Json(name = "deprecated")
    val deprecated: kotlin.Boolean? = null,

    @Json(name = "deprecatedDate")
    val deprecatedDate: kotlin.Long? = null,

    @Json(name = "defaults")
    val defaults: Defaults? = null,

    @Json(name = "_purpose")
    val purpose: kotlin.String? = null,

    @Json(name = "migrationSettings")
    val migrationSettings: FlagMigrationSettingsRep? = null

) {

    /**
     * Kind of feature flag
     *
     * Values: boolean,multivariate
     */
    @JsonClass(generateAdapter = false)
    enum class Kind(val value: kotlin.String) {
        @Json(name = "boolean") boolean("boolean"),
        @Json(name = "multivariate") multivariate("multivariate");
    }

}

