/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InsightsChart
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep
import com.launchdarkly.client.models.ValidationFailedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class InsightsChartsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Get deployment frequency chart data
     * Get deployment frequency chart data. Engineering insights displays deployment frequency data in the [deployment frequency metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/deployment).  ### Expanding the chart response  LaunchDarkly supports expanding the chart response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;metrics&#x60; includes details on the metrics related to deployment frequency  For example, use &#x60;?expand&#x3D;metrics&#x60; to include the &#x60;metrics&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key (optional)
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;kind&#x60; (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return InsightsChart
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDeploymentFrequencyChart(projectKey: kotlin.String? = null, environmentKey: kotlin.String? = null, applicationKey: kotlin.String? = null, from: java.time.OffsetDateTime? = null, to: java.time.OffsetDateTime? = null, bucketType: kotlin.String? = null, bucketMs: kotlin.Long? = null, groupBy: kotlin.String? = null, expand: kotlin.String? = null) : InsightsChart {
        val localVarResponse = getDeploymentFrequencyChartWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, groupBy = groupBy, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsChart
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get deployment frequency chart data
     * Get deployment frequency chart data. Engineering insights displays deployment frequency data in the [deployment frequency metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/deployment).  ### Expanding the chart response  LaunchDarkly supports expanding the chart response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;metrics&#x60; includes details on the metrics related to deployment frequency  For example, use &#x60;?expand&#x3D;metrics&#x60; to include the &#x60;metrics&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key (optional)
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;kind&#x60; (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return ApiResponse<InsightsChart?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDeploymentFrequencyChartWithHttpInfo(projectKey: kotlin.String?, environmentKey: kotlin.String?, applicationKey: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, groupBy: kotlin.String?, expand: kotlin.String?) : ApiResponse<InsightsChart?> {
        val localVariableConfig = getDeploymentFrequencyChartRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, groupBy = groupBy, expand = expand)

        return request<Unit, InsightsChart>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDeploymentFrequencyChart
     *
     * @param projectKey The project key (optional)
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;kind&#x60; (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return RequestConfig
     */
    fun getDeploymentFrequencyChartRequestConfig(projectKey: kotlin.String?, environmentKey: kotlin.String?, applicationKey: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, groupBy: kotlin.String?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (projectKey != null) {
                    put("projectKey", listOf(projectKey.toString()))
                }
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
                if (from != null) {
                    put("from", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("to", listOf(parseDateToQueryString(to)))
                }
                if (bucketType != null) {
                    put("bucketType", listOf(bucketType.toString()))
                }
                if (bucketMs != null) {
                    put("bucketMs", listOf(bucketMs.toString()))
                }
                if (groupBy != null) {
                    put("groupBy", listOf(groupBy.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/charts/deployments/frequency",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get flag status chart data
     * Get flag status chart data. To learn more, read [Using the flag status chart](https://docs.launchdarkly.com/home/engineering-insights/metrics/flag-health#using-the-flag-status-chart).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return InsightsChart
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlagStatusChart(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String? = null) : InsightsChart {
        val localVarResponse = getFlagStatusChartWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsChart
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get flag status chart data
     * Get flag status chart data. To learn more, read [Using the flag status chart](https://docs.launchdarkly.com/home/engineering-insights/metrics/flag-health#using-the-flag-status-chart).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return ApiResponse<InsightsChart?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlagStatusChartWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?) : ApiResponse<InsightsChart?> {
        val localVariableConfig = getFlagStatusChartRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey)

        return request<Unit, InsightsChart>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlagStatusChart
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @return RequestConfig
     */
    fun getFlagStatusChartRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                put("environmentKey", listOf(environmentKey.toString()))
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/charts/flags/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get lead time chart data
     * Get lead time chart data. The engineering insights UI displays lead time data in the [lead time metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/lead-time).
     * @param projectKey The project key
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;stage&#x60;. Default: &#x60;stage&#x60;. (optional)
     * @param expand Options: &#x60;metrics&#x60;, &#x60;percentiles&#x60;. (optional)
     * @return InsightsChart
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getLeadTimeChart(projectKey: kotlin.String, environmentKey: kotlin.String? = null, applicationKey: kotlin.String? = null, from: kotlin.Long? = null, to: kotlin.Long? = null, bucketType: kotlin.String? = null, bucketMs: kotlin.Long? = null, groupBy: kotlin.String? = null, expand: kotlin.String? = null) : InsightsChart {
        val localVarResponse = getLeadTimeChartWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, groupBy = groupBy, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsChart
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get lead time chart data
     * Get lead time chart data. The engineering insights UI displays lead time data in the [lead time metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/lead-time).
     * @param projectKey The project key
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;stage&#x60;. Default: &#x60;stage&#x60;. (optional)
     * @param expand Options: &#x60;metrics&#x60;, &#x60;percentiles&#x60;. (optional)
     * @return ApiResponse<InsightsChart?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getLeadTimeChartWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String?, applicationKey: kotlin.String?, from: kotlin.Long?, to: kotlin.Long?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, groupBy: kotlin.String?, expand: kotlin.String?) : ApiResponse<InsightsChart?> {
        val localVariableConfig = getLeadTimeChartRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, groupBy = groupBy, expand = expand)

        return request<Unit, InsightsChart>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getLeadTimeChart
     *
     * @param projectKey The project key
     * @param environmentKey The environment key (optional)
     * @param applicationKey Comma separated list of application keys (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param groupBy Options: &#x60;application&#x60;, &#x60;stage&#x60;. Default: &#x60;stage&#x60;. (optional)
     * @param expand Options: &#x60;metrics&#x60;, &#x60;percentiles&#x60;. (optional)
     * @return RequestConfig
     */
    fun getLeadTimeChartRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String?, applicationKey: kotlin.String?, from: kotlin.Long?, to: kotlin.Long?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, groupBy: kotlin.String?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                if (environmentKey != null) {
                    put("environmentKey", listOf(environmentKey.toString()))
                }
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
                if (from != null) {
                    put("from", listOf(from.toString()))
                }
                if (to != null) {
                    put("to", listOf(to.toString()))
                }
                if (bucketType != null) {
                    put("bucketType", listOf(bucketType.toString()))
                }
                if (bucketMs != null) {
                    put("bucketMs", listOf(bucketMs.toString()))
                }
                if (groupBy != null) {
                    put("groupBy", listOf(groupBy.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/charts/lead-time",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get release frequency chart data
     * Get release frequency chart data. Engineering insights displays release frequency data in the [release frequency metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/release).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param hasExperiments Filter events to those associated with an experiment (&#x60;true&#x60;) or without an experiment (&#x60;false&#x60;) (optional)
     * @param global Filter to include or exclude global events. Default value is &#x60;include&#x60;. Options: &#x60;include&#x60;, &#x60;exclude&#x60; (optional)
     * @param groupBy Property to group results by. Options: &#x60;impact&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return InsightsChart
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getReleaseFrequencyChart(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String? = null, hasExperiments: kotlin.Boolean? = null, global: kotlin.String? = null, groupBy: kotlin.String? = null, from: java.time.OffsetDateTime? = null, to: java.time.OffsetDateTime? = null, bucketType: kotlin.String? = null, bucketMs: kotlin.Long? = null, expand: kotlin.String? = null) : InsightsChart {
        val localVarResponse = getReleaseFrequencyChartWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, hasExperiments = hasExperiments, global = global, groupBy = groupBy, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsChart
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get release frequency chart data
     * Get release frequency chart data. Engineering insights displays release frequency data in the [release frequency metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/release).
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param hasExperiments Filter events to those associated with an experiment (&#x60;true&#x60;) or without an experiment (&#x60;false&#x60;) (optional)
     * @param global Filter to include or exclude global events. Default value is &#x60;include&#x60;. Options: &#x60;include&#x60;, &#x60;exclude&#x60; (optional)
     * @param groupBy Property to group results by. Options: &#x60;impact&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return ApiResponse<InsightsChart?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getReleaseFrequencyChartWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, hasExperiments: kotlin.Boolean?, global: kotlin.String?, groupBy: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, expand: kotlin.String?) : ApiResponse<InsightsChart?> {
        val localVariableConfig = getReleaseFrequencyChartRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, hasExperiments = hasExperiments, global = global, groupBy = groupBy, from = from, to = to, bucketType = bucketType, bucketMs = bucketMs, expand = expand)

        return request<Unit, InsightsChart>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getReleaseFrequencyChart
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param hasExperiments Filter events to those associated with an experiment (&#x60;true&#x60;) or without an experiment (&#x60;false&#x60;) (optional)
     * @param global Filter to include or exclude global events. Default value is &#x60;include&#x60;. Options: &#x60;include&#x60;, &#x60;exclude&#x60; (optional)
     * @param groupBy Property to group results by. Options: &#x60;impact&#x60; (optional)
     * @param from Unix timestamp in milliseconds. Default value is 7 days ago. (optional)
     * @param to Unix timestamp in milliseconds. Default value is now. (optional)
     * @param bucketType Specify type of bucket. Options: &#x60;rolling&#x60;, &#x60;hour&#x60;, &#x60;day&#x60;. Default: &#x60;rolling&#x60;. (optional)
     * @param bucketMs Duration of intervals for x-axis in milliseconds. Default value is one day (&#x60;86400000&#x60; milliseconds). (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return RequestConfig
     */
    fun getReleaseFrequencyChartRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, hasExperiments: kotlin.Boolean?, global: kotlin.String?, groupBy: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, bucketType: kotlin.String?, bucketMs: kotlin.Long?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                put("environmentKey", listOf(environmentKey.toString()))
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
                if (hasExperiments != null) {
                    put("hasExperiments", listOf(hasExperiments.toString()))
                }
                if (global != null) {
                    put("global", listOf(global.toString()))
                }
                if (groupBy != null) {
                    put("groupBy", listOf(groupBy.toString()))
                }
                if (from != null) {
                    put("from", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("to", listOf(parseDateToQueryString(to)))
                }
                if (bucketType != null) {
                    put("bucketType", listOf(bucketType.toString()))
                }
                if (bucketMs != null) {
                    put("bucketMs", listOf(bucketMs.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/charts/releases/frequency",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get stale flags chart data
     * Get stale flags chart data. Engineering insights displays stale flags data in the [flag health metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/flag-health).  ### Expanding the chart response  LaunchDarkly supports expanding the chart response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;metrics&#x60; includes details on the metrics related to stale flags  For example, use &#x60;?expand&#x3D;metrics&#x60; to include the &#x60;metrics&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param groupBy Property to group results by. Options: &#x60;maintainer&#x60; (optional)
     * @param maintainerId Comma-separated list of individual maintainers to filter results. (optional)
     * @param maintainerTeamKey Comma-separated list of team maintainer keys to filter results. (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return InsightsChart
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStaleFlagsChart(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String? = null, groupBy: kotlin.String? = null, maintainerId: kotlin.String? = null, maintainerTeamKey: kotlin.String? = null, expand: kotlin.String? = null) : InsightsChart {
        val localVarResponse = getStaleFlagsChartWithHttpInfo(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, groupBy = groupBy, maintainerId = maintainerId, maintainerTeamKey = maintainerTeamKey, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsightsChart
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get stale flags chart data
     * Get stale flags chart data. Engineering insights displays stale flags data in the [flag health metric view](https://docs.launchdarkly.com/home/engineering-insights/metrics/flag-health).  ### Expanding the chart response  LaunchDarkly supports expanding the chart response to include additional fields.  To expand the response, append the &#x60;expand&#x60; query parameter and include the following:  * &#x60;metrics&#x60; includes details on the metrics related to stale flags  For example, use &#x60;?expand&#x3D;metrics&#x60; to include the &#x60;metrics&#x60; field in the response. By default, this field is **not** included in the response. 
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param groupBy Property to group results by. Options: &#x60;maintainer&#x60; (optional)
     * @param maintainerId Comma-separated list of individual maintainers to filter results. (optional)
     * @param maintainerTeamKey Comma-separated list of team maintainer keys to filter results. (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return ApiResponse<InsightsChart?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStaleFlagsChartWithHttpInfo(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, groupBy: kotlin.String?, maintainerId: kotlin.String?, maintainerTeamKey: kotlin.String?, expand: kotlin.String?) : ApiResponse<InsightsChart?> {
        val localVariableConfig = getStaleFlagsChartRequestConfig(projectKey = projectKey, environmentKey = environmentKey, applicationKey = applicationKey, groupBy = groupBy, maintainerId = maintainerId, maintainerTeamKey = maintainerTeamKey, expand = expand)

        return request<Unit, InsightsChart>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getStaleFlagsChart
     *
     * @param projectKey The project key
     * @param environmentKey The environment key
     * @param applicationKey Comma separated list of application keys (optional)
     * @param groupBy Property to group results by. Options: &#x60;maintainer&#x60; (optional)
     * @param maintainerId Comma-separated list of individual maintainers to filter results. (optional)
     * @param maintainerTeamKey Comma-separated list of team maintainer keys to filter results. (optional)
     * @param expand Options: &#x60;metrics&#x60; (optional)
     * @return RequestConfig
     */
    fun getStaleFlagsChartRequestConfig(projectKey: kotlin.String, environmentKey: kotlin.String, applicationKey: kotlin.String?, groupBy: kotlin.String?, maintainerId: kotlin.String?, maintainerTeamKey: kotlin.String?, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("projectKey", listOf(projectKey.toString()))
                put("environmentKey", listOf(environmentKey.toString()))
                if (applicationKey != null) {
                    put("applicationKey", listOf(applicationKey.toString()))
                }
                if (groupBy != null) {
                    put("groupBy", listOf(groupBy.toString()))
                }
                if (maintainerId != null) {
                    put("maintainerId", listOf(maintainerId.toString()))
                }
                if (maintainerTeamKey != null) {
                    put("maintainerTeamKey", listOf(maintainerTeamKey.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/engineering-insights/charts/flags/stale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
