/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.DefaultClientSideAvailabilityPost
import com.launchdarkly.client.models.EnvironmentPost
import com.launchdarkly.client.models.NamingConvention

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param name A human-friendly name for the project.
 * @param key A unique key used to reference the project in your code.
 * @param includeInSnippetByDefault Whether or not flags created in this project are made available to the client-side JavaScript SDK by default.
 * @param defaultClientSideAvailability 
 * @param tags Tags for the project
 * @param environments Creates the provided environments for this project. If omitted default environments will be created instead.
 * @param namingConvention 
 */


data class ProjectPost (

    /* A human-friendly name for the project. */
    @Json(name = "name")
    val name: kotlin.String,

    /* A unique key used to reference the project in your code. */
    @Json(name = "key")
    val key: kotlin.String,

    /* Whether or not flags created in this project are made available to the client-side JavaScript SDK by default. */
    @Json(name = "includeInSnippetByDefault")
    val includeInSnippetByDefault: kotlin.Boolean? = null,

    @Json(name = "defaultClientSideAvailability")
    val defaultClientSideAvailability: DefaultClientSideAvailabilityPost? = null,

    /* Tags for the project */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    /* Creates the provided environments for this project. If omitted default environments will be created instead. */
    @Json(name = "environments")
    val environments: kotlin.collections.List<EnvironmentPost>? = null,

    @Json(name = "namingConvention")
    val namingConvention: NamingConvention? = null

) {


}

