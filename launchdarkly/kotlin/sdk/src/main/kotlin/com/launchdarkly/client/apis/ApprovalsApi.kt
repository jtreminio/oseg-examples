/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.ApprovalRequestResponse
import com.launchdarkly.client.models.CreateApprovalRequestRequest
import com.launchdarkly.client.models.CreateCopyFlagConfigApprovalRequestRequest
import com.launchdarkly.client.models.CreateFlagConfigApprovalRequestRequest
import com.launchdarkly.client.models.ExpandableApprovalRequestResponse
import com.launchdarkly.client.models.ExpandableApprovalRequestsResponse
import com.launchdarkly.client.models.FlagConfigApprovalRequestResponse
import com.launchdarkly.client.models.FlagConfigApprovalRequestsResponse
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.MethodNotAllowedErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PostApprovalRequestApplyRequest
import com.launchdarkly.client.models.PostApprovalRequestReviewRequest
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class ApprovalsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Delete approval request
     * Delete an approval request.
     * @param id The approval request ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteApprovalRequest(id: kotlin.String) : Unit {
        val localVarResponse = deleteApprovalRequestWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete approval request
     * Delete an approval request.
     * @param id The approval request ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteApprovalRequestWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteApprovalRequestRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteApprovalRequest
     *
     * @param id The approval request ID
     * @return RequestConfig
     */
    fun deleteApprovalRequestRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/approval-requests/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete approval request for a flag
     * Delete an approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteApprovalRequestForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : Unit {
        val localVarResponse = deleteApprovalRequestForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete approval request for a flag
     * Delete an approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteApprovalRequestForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteApprovalRequestForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteApprovalRequestForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return RequestConfig
     */
    fun deleteApprovalRequestForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get approval request for a flag
     * Get a single approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return FlagConfigApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApprovalForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : FlagConfigApprovalRequestResponse {
        val localVarResponse = getApprovalForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get approval request for a flag
     * Get a single approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return ApiResponse<FlagConfigApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApprovalForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : ApiResponse<FlagConfigApprovalRequestResponse?> {
        val localVariableConfig = getApprovalForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id)

        return request<Unit, FlagConfigApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApprovalForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @return RequestConfig
     */
    fun getApprovalForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get approval request
     * Get an approval request by approval request ID.  ### Expanding approval response  LaunchDarkly supports the &#x60;expand&#x60; query param to include additional fields in the response, with the following fields:  - &#x60;flag&#x60; includes the flag the approval request belongs to - &#x60;project&#x60; includes the project the approval request belongs to - &#x60;environments&#x60; includes the environments the approval request relates to  For example, &#x60;expand&#x3D;project,flag&#x60; includes the &#x60;project&#x60; and &#x60;flag&#x60; fields in the response. 
     * @param id The approval request ID
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @return ExpandableApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApprovalRequest(id: kotlin.String, expand: kotlin.String? = null) : ExpandableApprovalRequestResponse {
        val localVarResponse = getApprovalRequestWithHttpInfo(id = id, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExpandableApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get approval request
     * Get an approval request by approval request ID.  ### Expanding approval response  LaunchDarkly supports the &#x60;expand&#x60; query param to include additional fields in the response, with the following fields:  - &#x60;flag&#x60; includes the flag the approval request belongs to - &#x60;project&#x60; includes the project the approval request belongs to - &#x60;environments&#x60; includes the environments the approval request relates to  For example, &#x60;expand&#x3D;project,flag&#x60; includes the &#x60;project&#x60; and &#x60;flag&#x60; fields in the response. 
     * @param id The approval request ID
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @return ApiResponse<ExpandableApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApprovalRequestWithHttpInfo(id: kotlin.String, expand: kotlin.String?) : ApiResponse<ExpandableApprovalRequestResponse?> {
        val localVariableConfig = getApprovalRequestRequestConfig(id = id, expand = expand)

        return request<Unit, ExpandableApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApprovalRequest
     *
     * @param id The approval request ID
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @return RequestConfig
     */
    fun getApprovalRequestRequestConfig(id: kotlin.String, expand: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/approval-requests/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List approval requests
     * Get all approval requests.  ### Filtering approvals  LaunchDarkly supports the &#x60;filter&#x60; query param for filtering, with the following fields:  - &#x60;notifyMemberIds&#x60; filters for only approvals that are assigned to a member in the specified list. For example: &#x60;filter&#x3D;notifyMemberIds anyOf [\&quot;memberId1\&quot;, \&quot;memberId2\&quot;]&#x60;. - &#x60;requestorId&#x60; filters for only approvals that correspond to the ID of the member who requested the approval. For example: &#x60;filter&#x3D;requestorId equals 457034721476302714390214&#x60;. - &#x60;resourceId&#x60; filters for only approvals that correspond to the the specified resource identifier. For example: &#x60;filter&#x3D;resourceId equals proj/my-project:env/my-environment:flag/my-flag&#x60;. - &#x60;resourceKind&#x60; filters for only approvals that correspond to the specified resource kind. For example: &#x60;filter&#x3D;resourceKind equals flag&#x60;. Currently, &#x60;flag&#x60; and &#x60;segment&#x60; resource kinds are supported. - &#x60;reviewStatus&#x60; filters for only approvals which correspond to the review status in the specified list. The possible values are &#x60;approved&#x60;, &#x60;declined&#x60;, and &#x60;pending&#x60;. For example: &#x60;filter&#x3D;reviewStatus anyOf [\&quot;pending\&quot;, \&quot;approved\&quot;]&#x60;. - &#x60;status&#x60; filters for only approvals which correspond to the status in the specified list. The possible values are &#x60;pending&#x60;, &#x60;scheduled&#x60;, &#x60;failed&#x60;, and &#x60;completed&#x60;. For example: &#x60;filter&#x3D;status anyOf [\&quot;pending\&quot;, \&quot;scheduled\&quot;]&#x60;.  You can also apply multiple filters at once. For example, setting &#x60;filter&#x3D;projectKey equals my-project, reviewStatus anyOf [\&quot;pending\&quot;,\&quot;approved\&quot;]&#x60; matches approval requests which correspond to the &#x60;my-project&#x60; project key, and a review status of either &#x60;pending&#x60; or &#x60;approved&#x60;.  ### Expanding approval response  LaunchDarkly supports the &#x60;expand&#x60; query param to include additional fields in the response, with the following fields:  - &#x60;flag&#x60; includes the flag the approval request belongs to - &#x60;project&#x60; includes the project the approval request belongs to - &#x60;environments&#x60; includes the environments the approval request relates to  For example, &#x60;expand&#x3D;project,flag&#x60; includes the &#x60;project&#x60; and &#x60;flag&#x60; fields in the response. 
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @param limit The number of approvals to return. Defaults to 20. Maximum limit is 200. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @return ExpandableApprovalRequestsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApprovalRequests(filter: kotlin.String? = null, expand: kotlin.String? = null, limit: kotlin.Long? = null, offset: kotlin.Long? = null) : ExpandableApprovalRequestsResponse {
        val localVarResponse = getApprovalRequestsWithHttpInfo(filter = filter, expand = expand, limit = limit, offset = offset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExpandableApprovalRequestsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List approval requests
     * Get all approval requests.  ### Filtering approvals  LaunchDarkly supports the &#x60;filter&#x60; query param for filtering, with the following fields:  - &#x60;notifyMemberIds&#x60; filters for only approvals that are assigned to a member in the specified list. For example: &#x60;filter&#x3D;notifyMemberIds anyOf [\&quot;memberId1\&quot;, \&quot;memberId2\&quot;]&#x60;. - &#x60;requestorId&#x60; filters for only approvals that correspond to the ID of the member who requested the approval. For example: &#x60;filter&#x3D;requestorId equals 457034721476302714390214&#x60;. - &#x60;resourceId&#x60; filters for only approvals that correspond to the the specified resource identifier. For example: &#x60;filter&#x3D;resourceId equals proj/my-project:env/my-environment:flag/my-flag&#x60;. - &#x60;resourceKind&#x60; filters for only approvals that correspond to the specified resource kind. For example: &#x60;filter&#x3D;resourceKind equals flag&#x60;. Currently, &#x60;flag&#x60; and &#x60;segment&#x60; resource kinds are supported. - &#x60;reviewStatus&#x60; filters for only approvals which correspond to the review status in the specified list. The possible values are &#x60;approved&#x60;, &#x60;declined&#x60;, and &#x60;pending&#x60;. For example: &#x60;filter&#x3D;reviewStatus anyOf [\&quot;pending\&quot;, \&quot;approved\&quot;]&#x60;. - &#x60;status&#x60; filters for only approvals which correspond to the status in the specified list. The possible values are &#x60;pending&#x60;, &#x60;scheduled&#x60;, &#x60;failed&#x60;, and &#x60;completed&#x60;. For example: &#x60;filter&#x3D;status anyOf [\&quot;pending\&quot;, \&quot;scheduled\&quot;]&#x60;.  You can also apply multiple filters at once. For example, setting &#x60;filter&#x3D;projectKey equals my-project, reviewStatus anyOf [\&quot;pending\&quot;,\&quot;approved\&quot;]&#x60; matches approval requests which correspond to the &#x60;my-project&#x60; project key, and a review status of either &#x60;pending&#x60; or &#x60;approved&#x60;.  ### Expanding approval response  LaunchDarkly supports the &#x60;expand&#x60; query param to include additional fields in the response, with the following fields:  - &#x60;flag&#x60; includes the flag the approval request belongs to - &#x60;project&#x60; includes the project the approval request belongs to - &#x60;environments&#x60; includes the environments the approval request relates to  For example, &#x60;expand&#x3D;project,flag&#x60; includes the &#x60;project&#x60; and &#x60;flag&#x60; fields in the response. 
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @param limit The number of approvals to return. Defaults to 20. Maximum limit is 200. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @return ApiResponse<ExpandableApprovalRequestsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApprovalRequestsWithHttpInfo(filter: kotlin.String?, expand: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?) : ApiResponse<ExpandableApprovalRequestsResponse?> {
        val localVariableConfig = getApprovalRequestsRequestConfig(filter = filter, expand = expand, limit = limit, offset = offset)

        return request<Unit, ExpandableApprovalRequestsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApprovalRequests
     *
     * @param filter A comma-separated list of filters. Each filter is of the form &#x60;field operator value&#x60;. Supported fields are explained above. (optional)
     * @param expand A comma-separated list of fields to expand in the response. Supported fields are explained above. (optional)
     * @param limit The number of approvals to return. Defaults to 20. Maximum limit is 200. (optional)
     * @param offset Where to start in the list. Use this with pagination. For example, an offset of 10 skips the first ten items and then returns the next items in the list, up to the query &#x60;limit&#x60;. (optional)
     * @return RequestConfig
     */
    fun getApprovalRequestsRequestConfig(filter: kotlin.String?, expand: kotlin.String?, limit: kotlin.Long?, offset: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/approval-requests",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List approval requests for a flag
     * Get all approval requests for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @return FlagConfigApprovalRequestsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getApprovalsForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String) : FlagConfigApprovalRequestsResponse {
        val localVarResponse = getApprovalsForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List approval requests for a flag
     * Get all approval requests for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @return ApiResponse<FlagConfigApprovalRequestsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getApprovalsForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String) : ApiResponse<FlagConfigApprovalRequestsResponse?> {
        val localVariableConfig = getApprovalsForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey)

        return request<Unit, FlagConfigApprovalRequestsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getApprovalsForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @return RequestConfig
     */
    fun getApprovalsForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create approval request
     * Create an approval request.  This endpoint currently supports creating an approval request for a flag across all environments with the following instructions:  - &#x60;addVariation&#x60; - &#x60;removeVariation&#x60; - &#x60;updateVariation&#x60; - &#x60;updateDefaultVariation&#x60;  For details on using these instructions, read [Update feature flag](/tag/Feature-flags#operation/patchFeatureFlag).  To create an approval for a flag specific to an environment, use [Create approval request for a flag](/tag/Approvals#operation/postApprovalRequestForFlag). 
     * @param createApprovalRequestRequest 
     * @return ApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequest(createApprovalRequestRequest: CreateApprovalRequestRequest) : ApprovalRequestResponse {
        val localVarResponse = postApprovalRequestWithHttpInfo(createApprovalRequestRequest = createApprovalRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create approval request
     * Create an approval request.  This endpoint currently supports creating an approval request for a flag across all environments with the following instructions:  - &#x60;addVariation&#x60; - &#x60;removeVariation&#x60; - &#x60;updateVariation&#x60; - &#x60;updateDefaultVariation&#x60;  For details on using these instructions, read [Update feature flag](/tag/Feature-flags#operation/patchFeatureFlag).  To create an approval for a flag specific to an environment, use [Create approval request for a flag](/tag/Approvals#operation/postApprovalRequestForFlag). 
     * @param createApprovalRequestRequest 
     * @return ApiResponse<ApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestWithHttpInfo(createApprovalRequestRequest: CreateApprovalRequestRequest) : ApiResponse<ApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestRequestConfig(createApprovalRequestRequest = createApprovalRequestRequest)

        return request<CreateApprovalRequestRequest, ApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequest
     *
     * @param createApprovalRequestRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestRequestConfig(createApprovalRequestRequest: CreateApprovalRequestRequest) : RequestConfig<CreateApprovalRequestRequest> {
        val localVariableBody = createApprovalRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/approval-requests",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Apply approval request
     * Apply an approval request that has been approved.
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return ApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequestApply(id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : ApprovalRequestResponse {
        val localVarResponse = postApprovalRequestApplyWithHttpInfo(id = id, postApprovalRequestApplyRequest = postApprovalRequestApplyRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Apply approval request
     * Apply an approval request that has been approved.
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return ApiResponse<ApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestApplyWithHttpInfo(id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : ApiResponse<ApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestApplyRequestConfig(id = id, postApprovalRequestApplyRequest = postApprovalRequestApplyRequest)

        return request<PostApprovalRequestApplyRequest, ApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequestApply
     *
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestApplyRequestConfig(id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : RequestConfig<PostApprovalRequestApplyRequest> {
        val localVariableBody = postApprovalRequestApplyRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/approval-requests/{id}/apply".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Apply approval request for a flag
     * Apply an approval request that has been approved.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return FlagConfigApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequestApplyForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : FlagConfigApprovalRequestResponse {
        val localVarResponse = postApprovalRequestApplyForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id, postApprovalRequestApplyRequest = postApprovalRequestApplyRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Apply approval request for a flag
     * Apply an approval request that has been approved.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return ApiResponse<FlagConfigApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestApplyForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : ApiResponse<FlagConfigApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestApplyForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id, postApprovalRequestApplyRequest = postApprovalRequestApplyRequest)

        return request<PostApprovalRequestApplyRequest, FlagConfigApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequestApplyForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestApplyRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestApplyForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestApplyRequest: PostApprovalRequestApplyRequest) : RequestConfig<PostApprovalRequestApplyRequest> {
        val localVariableBody = postApprovalRequestApplyRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}/apply".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create approval request for a flag
     * Create an approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param createFlagConfigApprovalRequestRequest 
     * @return FlagConfigApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequestForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createFlagConfigApprovalRequestRequest: CreateFlagConfigApprovalRequestRequest) : FlagConfigApprovalRequestResponse {
        val localVarResponse = postApprovalRequestForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, createFlagConfigApprovalRequestRequest = createFlagConfigApprovalRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create approval request for a flag
     * Create an approval request for a feature flag.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param createFlagConfigApprovalRequestRequest 
     * @return ApiResponse<FlagConfigApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createFlagConfigApprovalRequestRequest: CreateFlagConfigApprovalRequestRequest) : ApiResponse<FlagConfigApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, createFlagConfigApprovalRequestRequest = createFlagConfigApprovalRequestRequest)

        return request<CreateFlagConfigApprovalRequestRequest, FlagConfigApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequestForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param createFlagConfigApprovalRequestRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createFlagConfigApprovalRequestRequest: CreateFlagConfigApprovalRequestRequest) : RequestConfig<CreateFlagConfigApprovalRequestRequest> {
        val localVariableBody = createFlagConfigApprovalRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Review approval request
     * Review an approval request by approving or denying changes.
     * @param id The approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return ApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequestReview(id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : ApprovalRequestResponse {
        val localVarResponse = postApprovalRequestReviewWithHttpInfo(id = id, postApprovalRequestReviewRequest = postApprovalRequestReviewRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Review approval request
     * Review an approval request by approving or denying changes.
     * @param id The approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return ApiResponse<ApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestReviewWithHttpInfo(id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : ApiResponse<ApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestReviewRequestConfig(id = id, postApprovalRequestReviewRequest = postApprovalRequestReviewRequest)

        return request<PostApprovalRequestReviewRequest, ApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequestReview
     *
     * @param id The approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestReviewRequestConfig(id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : RequestConfig<PostApprovalRequestReviewRequest> {
        val localVariableBody = postApprovalRequestReviewRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/approval-requests/{id}/reviews".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Review approval request for a flag
     * Review an approval request by approving or denying changes.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return FlagConfigApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postApprovalRequestReviewForFlag(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : FlagConfigApprovalRequestResponse {
        val localVarResponse = postApprovalRequestReviewForFlagWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id, postApprovalRequestReviewRequest = postApprovalRequestReviewRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Review approval request for a flag
     * Review an approval request by approving or denying changes.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return ApiResponse<FlagConfigApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postApprovalRequestReviewForFlagWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : ApiResponse<FlagConfigApprovalRequestResponse?> {
        val localVariableConfig = postApprovalRequestReviewForFlagRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, id = id, postApprovalRequestReviewRequest = postApprovalRequestReviewRequest)

        return request<PostApprovalRequestReviewRequest, FlagConfigApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postApprovalRequestReviewForFlag
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key
     * @param id The feature flag approval request ID
     * @param postApprovalRequestReviewRequest 
     * @return RequestConfig
     */
    fun postApprovalRequestReviewForFlagRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, id: kotlin.String, postApprovalRequestReviewRequest: PostApprovalRequestReviewRequest) : RequestConfig<PostApprovalRequestReviewRequest> {
        val localVariableBody = postApprovalRequestReviewRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{id}/reviews".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create approval request to copy flag configurations across environments
     * Create an approval request to copy a feature flag&#39;s configuration across environments.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key for the target environment
     * @param createCopyFlagConfigApprovalRequestRequest 
     * @return FlagConfigApprovalRequestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postFlagCopyConfigApprovalRequest(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createCopyFlagConfigApprovalRequestRequest: CreateCopyFlagConfigApprovalRequestRequest) : FlagConfigApprovalRequestResponse {
        val localVarResponse = postFlagCopyConfigApprovalRequestWithHttpInfo(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, createCopyFlagConfigApprovalRequestRequest = createCopyFlagConfigApprovalRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagConfigApprovalRequestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create approval request to copy flag configurations across environments
     * Create an approval request to copy a feature flag&#39;s configuration across environments.
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key for the target environment
     * @param createCopyFlagConfigApprovalRequestRequest 
     * @return ApiResponse<FlagConfigApprovalRequestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postFlagCopyConfigApprovalRequestWithHttpInfo(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createCopyFlagConfigApprovalRequestRequest: CreateCopyFlagConfigApprovalRequestRequest) : ApiResponse<FlagConfigApprovalRequestResponse?> {
        val localVariableConfig = postFlagCopyConfigApprovalRequestRequestConfig(projectKey = projectKey, featureFlagKey = featureFlagKey, environmentKey = environmentKey, createCopyFlagConfigApprovalRequestRequest = createCopyFlagConfigApprovalRequestRequest)

        return request<CreateCopyFlagConfigApprovalRequestRequest, FlagConfigApprovalRequestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation postFlagCopyConfigApprovalRequest
     *
     * @param projectKey The project key
     * @param featureFlagKey The feature flag key
     * @param environmentKey The environment key for the target environment
     * @param createCopyFlagConfigApprovalRequestRequest 
     * @return RequestConfig
     */
    fun postFlagCopyConfigApprovalRequestRequestConfig(projectKey: kotlin.String, featureFlagKey: kotlin.String, environmentKey: kotlin.String, createCopyFlagConfigApprovalRequestRequest: CreateCopyFlagConfigApprovalRequestRequest) : RequestConfig<CreateCopyFlagConfigApprovalRequestRequest> {
        val localVariableBody = createCopyFlagConfigApprovalRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests-flag-copy".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"featureFlagKey"+"}", encodeURIComponent(featureFlagKey.toString())).replace("{"+"environmentKey"+"}", encodeURIComponent(environmentKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
