/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.launchdarkly.client.models.FlagImportConfigurationPost
import com.launchdarkly.client.models.FlagImportIntegration
import com.launchdarkly.client.models.FlagImportIntegrationCollection
import com.launchdarkly.client.models.ForbiddenErrorRep
import com.launchdarkly.client.models.InvalidRequestErrorRep
import com.launchdarkly.client.models.NotFoundErrorRep
import com.launchdarkly.client.models.PatchOperation
import com.launchdarkly.client.models.RateLimitedErrorRep
import com.launchdarkly.client.models.StatusConflictErrorRep
import com.launchdarkly.client.models.UnauthorizedErrorRep

import com.squareup.moshi.Json

import com.launchdarkly.client.infrastructure.ApiClient
import com.launchdarkly.client.infrastructure.ApiResponse
import com.launchdarkly.client.infrastructure.ClientException
import com.launchdarkly.client.infrastructure.ClientError
import com.launchdarkly.client.infrastructure.ServerException
import com.launchdarkly.client.infrastructure.ServerError
import com.launchdarkly.client.infrastructure.MultiValueMap
import com.launchdarkly.client.infrastructure.PartConfig
import com.launchdarkly.client.infrastructure.RequestConfig
import com.launchdarkly.client.infrastructure.RequestMethod
import com.launchdarkly.client.infrastructure.ResponseType
import com.launchdarkly.client.infrastructure.Success
import com.launchdarkly.client.infrastructure.toMultiValue

class FlagImportConfigurationsBetaApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://app.launchdarkly.com")
        }
    }

    /**
     * Create a flag import configuration
     * Create a new flag import configuration. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;. The &#x60;config&#x60; object in the request body schema is described by the global integration settings, as specified by the &lt;code&gt;formVariables&lt;/code&gt; in the &lt;code&gt;manifest.json&lt;/code&gt; for this integration. It varies slightly based on the &#x60;integrationKey&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param flagImportConfigurationPost 
     * @return FlagImportIntegration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createFlagImportConfiguration(projectKey: kotlin.String, integrationKey: kotlin.String, flagImportConfigurationPost: FlagImportConfigurationPost) : FlagImportIntegration {
        val localVarResponse = createFlagImportConfigurationWithHttpInfo(projectKey = projectKey, integrationKey = integrationKey, flagImportConfigurationPost = flagImportConfigurationPost)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagImportIntegration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a flag import configuration
     * Create a new flag import configuration. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;. The &#x60;config&#x60; object in the request body schema is described by the global integration settings, as specified by the &lt;code&gt;formVariables&lt;/code&gt; in the &lt;code&gt;manifest.json&lt;/code&gt; for this integration. It varies slightly based on the &#x60;integrationKey&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param flagImportConfigurationPost 
     * @return ApiResponse<FlagImportIntegration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createFlagImportConfigurationWithHttpInfo(projectKey: kotlin.String, integrationKey: kotlin.String, flagImportConfigurationPost: FlagImportConfigurationPost) : ApiResponse<FlagImportIntegration?> {
        val localVariableConfig = createFlagImportConfigurationRequestConfig(projectKey = projectKey, integrationKey = integrationKey, flagImportConfigurationPost = flagImportConfigurationPost)

        return request<FlagImportConfigurationPost, FlagImportIntegration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createFlagImportConfiguration
     *
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param flagImportConfigurationPost 
     * @return RequestConfig
     */
    fun createFlagImportConfigurationRequestConfig(projectKey: kotlin.String, integrationKey: kotlin.String, flagImportConfigurationPost: FlagImportConfigurationPost) : RequestConfig<FlagImportConfigurationPost> {
        val localVariableBody = flagImportConfigurationPost
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/integration-capabilities/flag-import/{projectKey}/{integrationKey}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a flag import configuration
     * Delete a flag import configuration by ID. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteFlagImportConfiguration(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : Unit {
        val localVarResponse = deleteFlagImportConfigurationWithHttpInfo(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a flag import configuration
     * Delete a flag import configuration by ID. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFlagImportConfigurationWithHttpInfo(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteFlagImportConfigurationRequestConfig(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFlagImportConfiguration
     *
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return RequestConfig
     */
    fun deleteFlagImportConfigurationRequestConfig(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/integration-capabilities/flag-import/{projectKey}/{integrationKey}/{integrationId}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"integrationId"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get a single flag import configuration
     * Get a single flag import configuration by ID. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key, for example, &#x60;split&#x60;
     * @param integrationId The integration ID
     * @return FlagImportIntegration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlagImportConfiguration(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : FlagImportIntegration {
        val localVarResponse = getFlagImportConfigurationWithHttpInfo(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagImportIntegration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a single flag import configuration
     * Get a single flag import configuration by ID. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key, for example, &#x60;split&#x60;
     * @param integrationId The integration ID
     * @return ApiResponse<FlagImportIntegration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlagImportConfigurationWithHttpInfo(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : ApiResponse<FlagImportIntegration?> {
        val localVariableConfig = getFlagImportConfigurationRequestConfig(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return request<Unit, FlagImportIntegration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlagImportConfiguration
     *
     * @param projectKey The project key
     * @param integrationKey The integration key, for example, &#x60;split&#x60;
     * @param integrationId The integration ID
     * @return RequestConfig
     */
    fun getFlagImportConfigurationRequestConfig(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-capabilities/flag-import/{projectKey}/{integrationKey}/{integrationId}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"integrationId"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List all flag import configurations
     * List all flag import configurations.
     * @return FlagImportIntegrationCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getFlagImportConfigurations() : FlagImportIntegrationCollection {
        val localVarResponse = getFlagImportConfigurationsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagImportIntegrationCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List all flag import configurations
     * List all flag import configurations.
     * @return ApiResponse<FlagImportIntegrationCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getFlagImportConfigurationsWithHttpInfo() : ApiResponse<FlagImportIntegrationCollection?> {
        val localVariableConfig = getFlagImportConfigurationsRequestConfig()

        return request<Unit, FlagImportIntegrationCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getFlagImportConfigurations
     *
     * @return RequestConfig
     */
    fun getFlagImportConfigurationsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/integration-capabilities/flag-import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a flag import configuration
     * Updating a flag import configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).&lt;br/&gt;&lt;br/&gt;To add an element to the import configuration fields that are arrays, set the &#x60;path&#x60; to the name of the field and then append &#x60;/&lt;array index&gt;&#x60;. Use &#x60;/0&#x60; to add to the beginning of the array. Use &#x60;/-&#x60; to add to the end of the array.&lt;br/&gt;&lt;br/&gt;You can update the &#x60;config&#x60;, &#x60;tags&#x60;, and &#x60;name&#x60; of the flag import configuration.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @param patchOperation 
     * @return FlagImportIntegration
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun patchFlagImportConfiguration(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : FlagImportIntegration {
        val localVarResponse = patchFlagImportConfigurationWithHttpInfo(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId, patchOperation = patchOperation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FlagImportIntegration
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a flag import configuration
     * Updating a flag import configuration uses a [JSON patch](https://datatracker.ietf.org/doc/html/rfc6902) representation of the desired changes. To learn more, read [Updates](/#section/Overview/Updates).&lt;br/&gt;&lt;br/&gt;To add an element to the import configuration fields that are arrays, set the &#x60;path&#x60; to the name of the field and then append &#x60;/&lt;array index&gt;&#x60;. Use &#x60;/0&#x60; to add to the beginning of the array. Use &#x60;/-&#x60; to add to the end of the array.&lt;br/&gt;&lt;br/&gt;You can update the &#x60;config&#x60;, &#x60;tags&#x60;, and &#x60;name&#x60; of the flag import configuration.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @param patchOperation 
     * @return ApiResponse<FlagImportIntegration?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun patchFlagImportConfigurationWithHttpInfo(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : ApiResponse<FlagImportIntegration?> {
        val localVariableConfig = patchFlagImportConfigurationRequestConfig(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId, patchOperation = patchOperation)

        return request<kotlin.collections.List<PatchOperation>, FlagImportIntegration>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation patchFlagImportConfiguration
     *
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @param patchOperation 
     * @return RequestConfig
     */
    fun patchFlagImportConfigurationRequestConfig(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String, patchOperation: kotlin.collections.List<PatchOperation>) : RequestConfig<kotlin.collections.List<PatchOperation>> {
        val localVariableBody = patchOperation
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/integration-capabilities/flag-import/{projectKey}/{integrationKey}/{integrationId}".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"integrationId"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Trigger a single flag import run
     * Trigger a single flag import run for an existing flag import configuration. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun triggerFlagImportJob(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : Unit {
        val localVarResponse = triggerFlagImportJobWithHttpInfo(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Trigger a single flag import run
     * Trigger a single flag import run for an existing flag import configuration. The &#x60;integrationKey&#x60; path parameter identifies the feature management system from which the import occurs, for example, &#x60;split&#x60;.
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun triggerFlagImportJobWithHttpInfo(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = triggerFlagImportJobRequestConfig(projectKey = projectKey, integrationKey = integrationKey, integrationId = integrationId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation triggerFlagImportJob
     *
     * @param projectKey The project key
     * @param integrationKey The integration key
     * @param integrationId The integration ID
     * @return RequestConfig
     */
    fun triggerFlagImportJobRequestConfig(projectKey: kotlin.String, integrationKey: kotlin.String, integrationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/integration-capabilities/flag-import/{projectKey}/{integrationKey}/{integrationId}/trigger".replace("{"+"projectKey"+"}", encodeURIComponent(projectKey.toString())).replace("{"+"integrationKey"+"}", encodeURIComponent(integrationKey.toString())).replace("{"+"integrationId"+"}", encodeURIComponent(integrationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
