/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.launchdarkly.client.models

import com.launchdarkly.client.models.MetricEventDefaultRep
import com.launchdarkly.client.models.UrlPost

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param key A unique key to reference the metric
 * @param kind The kind of event your metric will track
 * @param name A human-friendly name for the metric
 * @param description Description of the metric
 * @param selector One or more CSS selectors. Required for click metrics only.
 * @param urls One or more target URLs. Required for click and pageview metrics only.
 * @param isActive Whether the metric is active. Set to <code>true</code> to record click or pageview metrics. Not applicable for custom metrics.
 * @param isNumeric Whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>). Required for custom metrics only.
 * @param unit The unit of measure. Applicable for numeric custom metrics only.
 * @param eventKey The event key to use in your code. Required for custom conversion/binary and custom numeric metrics only.
 * @param successCriteria Success criteria. Required for custom numeric metrics, optional for custom conversion metrics.
 * @param tags Tags for the metric
 * @param randomizationUnits An array of randomization units allowed for this metric
 * @param unitAggregationType The method by which multiple unit event values are aggregated
 * @param analysisType The method for analyzing metric events
 * @param percentileValue The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>.
 * @param eventDefault 
 */


data class MetricPost (

    /* A unique key to reference the metric */
    @Json(name = "key")
    val key: kotlin.String,

    /* The kind of event your metric will track */
    @Json(name = "kind")
    val kind: MetricPost.Kind,

    /* A human-friendly name for the metric */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Description of the metric */
    @Json(name = "description")
    val description: kotlin.String? = null,

    /* One or more CSS selectors. Required for click metrics only. */
    @Json(name = "selector")
    val selector: kotlin.String? = null,

    /* One or more target URLs. Required for click and pageview metrics only. */
    @Json(name = "urls")
    val urls: kotlin.collections.List<UrlPost>? = null,

    /* Whether the metric is active. Set to <code>true</code> to record click or pageview metrics. Not applicable for custom metrics. */
    @Json(name = "isActive")
    val isActive: kotlin.Boolean? = null,

    /* Whether to track numeric changes in value against a baseline (<code>true</code>) or to track a conversion when an end user takes an action (<code>false</code>). Required for custom metrics only. */
    @Json(name = "isNumeric")
    val isNumeric: kotlin.Boolean? = null,

    /* The unit of measure. Applicable for numeric custom metrics only. */
    @Json(name = "unit")
    val unit: kotlin.String? = null,

    /* The event key to use in your code. Required for custom conversion/binary and custom numeric metrics only. */
    @Json(name = "eventKey")
    val eventKey: kotlin.String? = null,

    /* Success criteria. Required for custom numeric metrics, optional for custom conversion metrics. */
    @Json(name = "successCriteria")
    val successCriteria: MetricPost.SuccessCriteria? = null,

    /* Tags for the metric */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    /* An array of randomization units allowed for this metric */
    @Json(name = "randomizationUnits")
    val randomizationUnits: kotlin.collections.List<kotlin.String>? = null,

    /* The method by which multiple unit event values are aggregated */
    @Json(name = "unitAggregationType")
    val unitAggregationType: MetricPost.UnitAggregationType? = null,

    /* The method for analyzing metric events */
    @Json(name = "analysisType")
    val analysisType: kotlin.String? = null,

    /* The percentile for the analysis method. An integer denoting the target percentile between 0 and 100. Required when <code>analysisType</code> is <code>percentile</code>. */
    @Json(name = "percentileValue")
    val percentileValue: kotlin.Int? = null,

    @Json(name = "eventDefault")
    val eventDefault: MetricEventDefaultRep? = null

) {

    /**
     * The kind of event your metric will track
     *
     * Values: pageview,click,custom
     */
    @JsonClass(generateAdapter = false)
    enum class Kind(val value: kotlin.String) {
        @Json(name = "pageview") pageview("pageview"),
        @Json(name = "click") click("click"),
        @Json(name = "custom") custom("custom");
    }
    /**
     * Success criteria. Required for custom numeric metrics, optional for custom conversion metrics.
     *
     * Values: HigherThanBaseline,LowerThanBaseline
     */
    @JsonClass(generateAdapter = false)
    enum class SuccessCriteria(val value: kotlin.String) {
        @Json(name = "HigherThanBaseline") HigherThanBaseline("HigherThanBaseline"),
        @Json(name = "LowerThanBaseline") LowerThanBaseline("LowerThanBaseline");
    }
    /**
     * The method by which multiple unit event values are aggregated
     *
     * Values: average,sum
     */
    @JsonClass(generateAdapter = false)
    enum class UnitAggregationType(val value: kotlin.String) {
        @Json(name = "average") average("average"),
        @Json(name = "sum") sum("sum");
    }

}

