/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommunityEngageOut</returns>
        CommunityEngageOut CommunityEngage(string countryIso2, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommunityEngageOut</returns>
        ApiResponse<CommunityEngageOut> CommunityEngageWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCommunityEngageOut</returns>
        BatchCommunityEngageOut CommunityEngageBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCommunityEngageOut</returns>
        ApiResponse<BatchCommunityEngageOut> CommunityEngageBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommunityEngageOut</returns>
        CommunityEngageOut CommunityEngageFull(string countryIso2, string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommunityEngageOut</returns>
        ApiResponse<CommunityEngageOut> CommunityEngageFullWithHttpInfo(string countryIso2, string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCommunityEngageFullOut</returns>
        BatchCommunityEngageFullOut CommunityEngageFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCommunityEngageFullOut</returns>
        ApiResponse<BatchCommunityEngageFullOut> CommunityEngageFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorridorOut</returns>
        CorridorOut Corridor(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorridorOut</returns>
        ApiResponse<CorridorOut> CorridorWithHttpInfo(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCorridorOut</returns>
        BatchCorridorOut CorridorBatch(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCorridorOut</returns>
        ApiResponse<BatchCorridorOut> CorridorBatchWithHttpInfo(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGeoOut</returns>
        PersonalNameGeoOut Country(string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGeoOut</returns>
        ApiResponse<PersonalNameGeoOut> CountryWithHttpInfo(string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoOut</returns>
        BatchPersonalNameGeoOut CountryBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoOut</returns>
        ApiResponse<BatchPersonalNameGeoOut> CountryBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameOriginedOut</returns>
        FirstLastNameOriginedOut CountryFnLn(string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        ApiResponse<FirstLastNameOriginedOut> CountryFnLnWithHttpInfo(string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoOut</returns>
        BatchFirstLastNameGeoOut CountryFnLnBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoOut</returns>
        ApiResponse<BatchFirstLastNameGeoOut> CountryFnLnBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameDiasporaedOut</returns>
        FirstLastNameDiasporaedOut Diaspora(string countryIso2, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameDiasporaedOut</returns>
        ApiResponse<FirstLastNameDiasporaedOut> DiasporaWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameDiasporaedOut</returns>
        BatchFirstLastNameDiasporaedOut DiasporaBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameDiasporaedOut</returns>
        ApiResponse<BatchFirstLastNameDiasporaedOut> DiasporaBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameDiasporaedOut</returns>
        PersonalNameDiasporaedOut DiasporaFull(string countryIso2, string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameDiasporaedOut</returns>
        ApiResponse<PersonalNameDiasporaedOut> DiasporaFullWithHttpInfo(string countryIso2, string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameDiasporaedOut</returns>
        BatchPersonalNameDiasporaedOut DiasporaFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameDiasporaedOut</returns>
        ApiResponse<BatchPersonalNameDiasporaedOut> DiasporaFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut Gender(string firstName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderWithHttpInfo(string firstName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut Gender1(string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> Gender1WithHttpInfo(string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderFull(string fullName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderFullWithHttpInfo(string fullName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderFullGeo(string fullName, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderFullGeoWithHttpInfo(string fullName, string countryIso2, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderFullGeoBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderFullGeoBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderGeo(string firstName, string lastName, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderGeoWithHttpInfo(string firstName, string lastName, string countryIso2, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderGeoBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderGeoBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameOriginedOut</returns>
        FirstLastNameOriginedOut Origin(string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        ApiResponse<FirstLastNameOriginedOut> OriginWithHttpInfo(string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameOriginedOut</returns>
        BatchFirstLastNameOriginedOut OriginBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameOriginedOut</returns>
        ApiResponse<BatchFirstLastNameOriginedOut> OriginBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameOriginedOut</returns>
        PersonalNameOriginedOut OriginFull(string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameOriginedOut</returns>
        ApiResponse<PersonalNameOriginedOut> OriginFullWithHttpInfo(string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameOriginedOut</returns>
        BatchPersonalNameOriginedOut OriginFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameOriginedOut</returns>
        ApiResponse<BatchPersonalNameOriginedOut> OriginFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseName(string nameFull, int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseNameWithHttpInfo(string nameFull, int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseNameGeo(string nameFull, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseNameGeoWithHttpInfo(string nameFull, string countryIso2, int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseNameGeoBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseNameGeoBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameReligionedOut</returns>
        FirstLastNameReligionedOut Religion2(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameReligionedOut</returns>
        ApiResponse<FirstLastNameReligionedOut> Religion2WithHttpInfo(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameReligionedOut</returns>
        BatchFirstLastNameReligionedOut ReligionBatch(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameReligionedOut</returns>
        ApiResponse<BatchFirstLastNameReligionedOut> ReligionBatchWithHttpInfo(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameReligionedOut</returns>
        PersonalNameReligionedOut ReligionFull(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameReligionedOut</returns>
        ApiResponse<PersonalNameReligionedOut> ReligionFullWithHttpInfo(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameReligionedOut</returns>
        BatchPersonalNameReligionedOut ReligionFullBatch(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameReligionedOut</returns>
        ApiResponse<BatchPersonalNameReligionedOut> ReligionFullBatchWithHttpInfo(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        FirstLastNameGeoSubclassificationOut Subclassification(string countryIso2, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoSubclassificationOut</returns>
        BatchFirstLastNameGeoSubclassificationOut SubclassificationBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoSubclassificationOut</returns>
        ApiResponse<BatchFirstLastNameGeoSubclassificationOut> SubclassificationBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        FirstLastNameGeoSubclassificationOut SubclassificationFull(string countryIso2, string fullName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationFullWithHttpInfo(string countryIso2, string fullName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoSubclassificationOut</returns>
        BatchPersonalNameGeoSubclassificationOut SubclassificationFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoSubclassificationOut</returns>
        ApiResponse<BatchPersonalNameGeoSubclassificationOut> SubclassificationFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        FirstLastNameUSRaceEthnicityOut UsRaceEthnicity(string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityWithHttpInfo(string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        BatchFirstLastNameUSRaceEthnicityOut UsRaceEthnicityBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameUSRaceEthnicityOut</returns>
        PersonalNameUSRaceEthnicityOut UsRaceEthnicityFull(string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameUSRaceEthnicityOut</returns>
        ApiResponse<PersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullWithHttpInfo(string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameUSRaceEthnicityOut</returns>
        BatchPersonalNameUSRaceEthnicityOut UsRaceEthnicityFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameUSRaceEthnicityOut</returns>
        ApiResponse<BatchPersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        FirstLastNameUSRaceEthnicityOut UsRaceEthnicityZIP5(string firstName, string lastName, string zip5Code, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5WithHttpInfo(string firstName, string lastName, string zip5Code, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        BatchFirstLastNameUSRaceEthnicityOut UsZipRaceEthnicityBatch(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommunityEngageOut</returns>
        System.Threading.Tasks.Task<CommunityEngageOut> CommunityEngageAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommunityEngageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommunityEngageOut>> CommunityEngageWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCommunityEngageOut</returns>
        System.Threading.Tasks.Task<BatchCommunityEngageOut> CommunityEngageBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCommunityEngageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCommunityEngageOut>> CommunityEngageBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommunityEngageOut</returns>
        System.Threading.Tasks.Task<CommunityEngageOut> CommunityEngageFullAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommunityEngageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommunityEngageOut>> CommunityEngageFullWithHttpInfoAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCommunityEngageFullOut</returns>
        System.Threading.Tasks.Task<BatchCommunityEngageFullOut> CommunityEngageFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCommunityEngageFullOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCommunityEngageFullOut>> CommunityEngageFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorridorOut</returns>
        System.Threading.Tasks.Task<CorridorOut> CorridorAsync(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorridorOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorridorOut>> CorridorWithHttpInfoAsync(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCorridorOut</returns>
        System.Threading.Tasks.Task<BatchCorridorOut> CorridorBatchAsync(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCorridorOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchCorridorOut>> CorridorBatchWithHttpInfoAsync(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGeoOut</returns>
        System.Threading.Tasks.Task<PersonalNameGeoOut> CountryAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGeoOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGeoOut>> CountryWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGeoOut> CountryBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGeoOut>> CountryBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameOriginedOut> CountryFnLnAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameOriginedOut>> CountryFnLnWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGeoOut> CountryFnLnBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGeoOut>> CountryFnLnBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameDiasporaedOut> DiasporaAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameDiasporaedOut>> DiasporaWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameDiasporaedOut> DiasporaBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameDiasporaedOut>> DiasporaBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<PersonalNameDiasporaedOut> DiasporaFullAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameDiasporaedOut>> DiasporaFullWithHttpInfoAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameDiasporaedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameDiasporaedOut> DiasporaFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameDiasporaedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameDiasporaedOut>> DiasporaFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderAsync(string firstName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderWithHttpInfoAsync(string firstName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> Gender1Async(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> Gender1WithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullWithHttpInfoAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullGeoAsync(string fullName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderFullGeoWithHttpInfoAsync(string fullName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullGeoBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderFullGeoBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderGeoAsync(string firstName, string lastName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderGeoWithHttpInfoAsync(string firstName, string lastName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderGeoBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderGeoBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameOriginedOut> OriginAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameOriginedOut>> OriginWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameOriginedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameOriginedOut> OriginBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameOriginedOut>> OriginBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameOriginedOut</returns>
        System.Threading.Tasks.Task<PersonalNameOriginedOut> OriginFullAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameOriginedOut>> OriginFullWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameOriginedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameOriginedOut> OriginFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameOriginedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameOriginedOut>> OriginFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameAsync(string nameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameWithHttpInfoAsync(string nameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameGeoAsync(string nameFull, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseNameGeoWithHttpInfoAsync(string nameFull, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameGeoBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseNameGeoBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameReligionedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameReligionedOut> Religion2Async(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameReligionedOut>> Religion2WithHttpInfoAsync(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameReligionedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameReligionedOut> ReligionBatchAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameReligionedOut>> ReligionBatchWithHttpInfoAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameReligionedOut</returns>
        System.Threading.Tasks.Task<PersonalNameReligionedOut> ReligionFullAsync(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameReligionedOut>> ReligionFullWithHttpInfoAsync(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameReligionedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameReligionedOut> ReligionFullBatchAsync(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameReligionedOut>> ReligionFullBatchWithHttpInfoAsync(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGeoSubclassificationOut>> SubclassificationBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationFullAsync(string countryIso2, string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationFullWithHttpInfoAsync(string countryIso2, string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGeoSubclassificationOut>> SubclassificationFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<PersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameUSRaceEthnicityOut>> UsRaceEthnicityFullWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameUSRaceEthnicityOut>> UsRaceEthnicityFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5Async(string firstName, string lastName, string zip5Code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityZIP5WithHttpInfoAsync(string firstName, string lastName, string zip5Code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchAsync(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsZipRaceEthnicityBatchWithHttpInfoAsync(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalApi : IPersonalApiSync, IPersonalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonalApi : IPersonalApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonalApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonalApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommunityEngageOut</returns>
        public CommunityEngageOut CommunityEngage(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<CommunityEngageOut> localVarResponse = CommunityEngageWithHttpInfo(countryIso2, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommunityEngageOut</returns>
        public App.Namsor.Client.ApiResponse<CommunityEngageOut> CommunityEngageWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->CommunityEngage");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->CommunityEngage");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->CommunityEngage");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommunityEngageOut>("/api2/json/communityEngage/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommunityEngageOut</returns>
        public async System.Threading.Tasks.Task<CommunityEngageOut> CommunityEngageAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<CommunityEngageOut> localVarResponse = await CommunityEngageWithHttpInfoAsync(countryIso2, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommunityEngageOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<CommunityEngageOut>> CommunityEngageWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->CommunityEngage");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->CommunityEngage");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->CommunityEngage");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommunityEngageOut>("/api2/json/communityEngage/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCommunityEngageOut</returns>
        public BatchCommunityEngageOut CommunityEngageBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchCommunityEngageOut> localVarResponse = CommunityEngageBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCommunityEngageOut</returns>
        public App.Namsor.Client.ApiResponse<BatchCommunityEngageOut> CommunityEngageBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchCommunityEngageOut>("/api2/json/communityEngageBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCommunityEngageOut</returns>
        public async System.Threading.Tasks.Task<BatchCommunityEngageOut> CommunityEngageBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchCommunityEngageOut> localVarResponse = await CommunityEngageBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCommunityEngageOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchCommunityEngageOut>> CommunityEngageBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchCommunityEngageOut>("/api2/json/communityEngageBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommunityEngageOut</returns>
        public CommunityEngageOut CommunityEngageFull(string countryIso2, string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<CommunityEngageOut> localVarResponse = CommunityEngageFullWithHttpInfo(countryIso2, personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommunityEngageOut</returns>
        public App.Namsor.Client.ApiResponse<CommunityEngageOut> CommunityEngageFullWithHttpInfo(string countryIso2, string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->CommunityEngageFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->CommunityEngageFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommunityEngageOut>("/api2/json/communityEngageFull/{countryIso2}/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommunityEngageOut</returns>
        public async System.Threading.Tasks.Task<CommunityEngageOut> CommunityEngageFullAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<CommunityEngageOut> localVarResponse = await CommunityEngageFullWithHttpInfoAsync(countryIso2, personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommunityEngageOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<CommunityEngageOut>> CommunityEngageFullWithHttpInfoAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->CommunityEngageFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->CommunityEngageFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommunityEngageOut>("/api2/json/communityEngageFull/{countryIso2}/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCommunityEngageFullOut</returns>
        public BatchCommunityEngageFullOut CommunityEngageFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchCommunityEngageFullOut> localVarResponse = CommunityEngageFullBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCommunityEngageFullOut</returns>
        public App.Namsor.Client.ApiResponse<BatchCommunityEngageFullOut> CommunityEngageFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchCommunityEngageFullOut>("/api2/json/communityEngageFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCommunityEngageFullOut</returns>
        public async System.Threading.Tasks.Task<BatchCommunityEngageFullOut> CommunityEngageFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchCommunityEngageFullOut> localVarResponse = await CommunityEngageFullBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCommunityEngageFullOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchCommunityEngageFullOut>> CommunityEngageFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.CommunityEngageFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchCommunityEngageFullOut>("/api2/json/communityEngageFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommunityEngageFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorridorOut</returns>
        public CorridorOut Corridor(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<CorridorOut> localVarResponse = CorridorWithHttpInfo(countryIso2From, firstNameFrom, lastNameFrom, countryIso2To, firstNameTo, lastNameTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorridorOut</returns>
        public App.Namsor.Client.ApiResponse<CorridorOut> CorridorWithHttpInfo(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2From' is set
            if (countryIso2From == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2From' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'firstNameFrom' is set
            if (firstNameFrom == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstNameFrom' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'lastNameFrom' is set
            if (lastNameFrom == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastNameFrom' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'countryIso2To' is set
            if (countryIso2To == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2To' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'firstNameTo' is set
            if (firstNameTo == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstNameTo' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'lastNameTo' is set
            if (lastNameTo == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastNameTo' when calling PersonalApi->Corridor");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2From", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2From)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstNameFrom", App.Namsor.Client.ClientUtils.ParameterToString(firstNameFrom)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastNameFrom", App.Namsor.Client.ClientUtils.ParameterToString(lastNameFrom)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2To", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2To)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstNameTo", App.Namsor.Client.ClientUtils.ParameterToString(firstNameTo)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastNameTo", App.Namsor.Client.ClientUtils.ParameterToString(lastNameTo)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Corridor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorridorOut>("/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Corridor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorridorOut</returns>
        public async System.Threading.Tasks.Task<CorridorOut> CorridorAsync(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<CorridorOut> localVarResponse = await CorridorWithHttpInfoAsync(countryIso2From, firstNameFrom, lastNameFrom, countryIso2To, firstNameTo, lastNameTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2From"></param>
        /// <param name="firstNameFrom"></param>
        /// <param name="lastNameFrom"></param>
        /// <param name="countryIso2To"></param>
        /// <param name="firstNameTo"></param>
        /// <param name="lastNameTo"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorridorOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<CorridorOut>> CorridorWithHttpInfoAsync(string countryIso2From, string firstNameFrom, string lastNameFrom, string countryIso2To, string firstNameTo, string lastNameTo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2From' is set
            if (countryIso2From == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2From' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'firstNameFrom' is set
            if (firstNameFrom == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstNameFrom' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'lastNameFrom' is set
            if (lastNameFrom == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastNameFrom' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'countryIso2To' is set
            if (countryIso2To == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2To' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'firstNameTo' is set
            if (firstNameTo == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstNameTo' when calling PersonalApi->Corridor");
            }

            // verify the required parameter 'lastNameTo' is set
            if (lastNameTo == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastNameTo' when calling PersonalApi->Corridor");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2From", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2From)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstNameFrom", App.Namsor.Client.ClientUtils.ParameterToString(firstNameFrom)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastNameFrom", App.Namsor.Client.ClientUtils.ParameterToString(lastNameFrom)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2To", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2To)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstNameTo", App.Namsor.Client.ClientUtils.ParameterToString(firstNameTo)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastNameTo", App.Namsor.Client.ClientUtils.ParameterToString(lastNameTo)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Corridor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorridorOut>("/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Corridor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchCorridorOut</returns>
        public BatchCorridorOut CorridorBatch(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchCorridorOut> localVarResponse = CorridorBatchWithHttpInfo(batchCorridorIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchCorridorOut</returns>
        public App.Namsor.Client.ApiResponse<BatchCorridorOut> CorridorBatchWithHttpInfo(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchCorridorIn;

            localVarRequestOptions.Operation = "PersonalApi.CorridorBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchCorridorOut>("/api2/json/corridorBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CorridorBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchCorridorOut</returns>
        public async System.Threading.Tasks.Task<BatchCorridorOut> CorridorBatchAsync(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchCorridorOut> localVarResponse = await CorridorBatchWithHttpInfoAsync(batchCorridorIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchCorridorIn">A list of name pairs, with country code (nameFrom -&gt; nameTo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchCorridorOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchCorridorOut>> CorridorBatchWithHttpInfoAsync(BatchCorridorIn? batchCorridorIn = default(BatchCorridorIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchCorridorIn;

            localVarRequestOptions.Operation = "PersonalApi.CorridorBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchCorridorOut>("/api2/json/corridorBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CorridorBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGeoOut</returns>
        public PersonalNameGeoOut Country(string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGeoOut> localVarResponse = CountryWithHttpInfo(personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGeoOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGeoOut> CountryWithHttpInfo(string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->Country");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Country";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGeoOut>("/api2/json/country/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Country", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGeoOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGeoOut> CountryAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGeoOut> localVarResponse = await CountryWithHttpInfoAsync(personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGeoOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGeoOut>> CountryWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->Country");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Country";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGeoOut>("/api2/json/country/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Country", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoOut</returns>
        public BatchPersonalNameGeoOut CountryBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoOut> localVarResponse = CountryBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGeoOut> CountryBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.CountryBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGeoOut>("/api2/json/countryBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGeoOut> CountryBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoOut> localVarResponse = await CountryBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGeoOut>> CountryBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.CountryBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGeoOut>("/api2/json/countryBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameOriginedOut</returns>
        public FirstLastNameOriginedOut CountryFnLn(string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> localVarResponse = CountryFnLnWithHttpInfo(firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> CountryFnLnWithHttpInfo(string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->CountryFnLn");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->CountryFnLn");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CountryFnLn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameOriginedOut>("/api2/json/countryFnLn/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryFnLn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameOriginedOut> CountryFnLnAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> localVarResponse = await CountryFnLnWithHttpInfoAsync(firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut>> CountryFnLnWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->CountryFnLn");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->CountryFnLn");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.CountryFnLn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameOriginedOut>("/api2/json/countryFnLn/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryFnLn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoOut</returns>
        public BatchFirstLastNameGeoOut CountryFnLnBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoOut> localVarResponse = CountryFnLnBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoOut> CountryFnLnBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.CountryFnLnBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGeoOut>("/api2/json/countryFnLnBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryFnLnBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGeoOut> CountryFnLnBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoOut> localVarResponse = await CountryFnLnBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoOut>> CountryFnLnBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.CountryFnLnBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGeoOut>("/api2/json/countryFnLnBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountryFnLnBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameDiasporaedOut</returns>
        public FirstLastNameDiasporaedOut Diaspora(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameDiasporaedOut> localVarResponse = DiasporaWithHttpInfo(countryIso2, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameDiasporaedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameDiasporaedOut> DiasporaWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Diaspora");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Diaspora");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Diaspora");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Diaspora";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameDiasporaedOut>("/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Diaspora", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameDiasporaedOut> DiasporaAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameDiasporaedOut> localVarResponse = await DiasporaWithHttpInfoAsync(countryIso2, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameDiasporaedOut>> DiasporaWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Diaspora");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Diaspora");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Diaspora");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Diaspora";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameDiasporaedOut>("/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Diaspora", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameDiasporaedOut</returns>
        public BatchFirstLastNameDiasporaedOut DiasporaBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameDiasporaedOut> localVarResponse = DiasporaBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameDiasporaedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameDiasporaedOut> DiasporaBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.DiasporaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameDiasporaedOut>("/api2/json/diasporaBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameDiasporaedOut> DiasporaBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameDiasporaedOut> localVarResponse = await DiasporaBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameDiasporaedOut>> DiasporaBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.DiasporaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameDiasporaedOut>("/api2/json/diasporaBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameDiasporaedOut</returns>
        public PersonalNameDiasporaedOut DiasporaFull(string countryIso2, string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameDiasporaedOut> localVarResponse = DiasporaFullWithHttpInfo(countryIso2, personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameDiasporaedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameDiasporaedOut> DiasporaFullWithHttpInfo(string countryIso2, string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->DiasporaFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->DiasporaFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.DiasporaFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameDiasporaedOut>("/api2/json/diasporaFull/{countryIso2}/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameDiasporaedOut> DiasporaFullAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameDiasporaedOut> localVarResponse = await DiasporaFullWithHttpInfoAsync(countryIso2, personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameDiasporaedOut>> DiasporaFullWithHttpInfoAsync(string countryIso2, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->DiasporaFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->DiasporaFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.DiasporaFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameDiasporaedOut>("/api2/json/diasporaFull/{countryIso2}/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameDiasporaedOut</returns>
        public BatchPersonalNameDiasporaedOut DiasporaFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameDiasporaedOut> localVarResponse = DiasporaFullBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameDiasporaedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameDiasporaedOut> DiasporaFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.DiasporaFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameDiasporaedOut>("/api2/json/diasporaFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameDiasporaedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameDiasporaedOut> DiasporaFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameDiasporaedOut> localVarResponse = await DiasporaFullBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameDiasporaedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameDiasporaedOut>> DiasporaFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.DiasporaFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameDiasporaedOut>("/api2/json/diasporaFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiasporaFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut Gender(string firstName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderWithHttpInfo(firstName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> GenderWithHttpInfo(string firstName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Gender";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGenderedOut>("/api2/json/gender/{firstName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gender", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderAsync(string firstName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderWithHttpInfoAsync(firstName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut>> GenderWithHttpInfoAsync(string firstName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Gender";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGenderedOut>("/api2/json/gender/{firstName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gender", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut Gender1(string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = Gender1WithHttpInfo(firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> Gender1WithHttpInfo(string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender1");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Gender1");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Gender1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGenderedOut>("/api2/json/gender/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gender1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> Gender1Async(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = await Gender1WithHttpInfoAsync(firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut>> Gender1WithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Gender1");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Gender1");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Gender1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGenderedOut>("/api2/json/gender/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gender1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> GenderBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGenderedOut>("/api2/json/genderBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut>> GenderBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGenderedOut>("/api2/json/genderBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderFull(string fullName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderFullWithHttpInfo(fullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> GenderFullWithHttpInfo(string fullName, int operationIndex = 0)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGenderedOut>("/api2/json/genderFull/{fullName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderFullWithHttpInfoAsync(fullName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, ex. John H. Smith 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGenderedOut>> GenderFullWithHttpInfoAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGenderedOut>("/api2/json/genderFull/{fullName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderFullBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> GenderFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGenderedOut>("/api2/json/genderFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderFullBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut>> GenderFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGenderedOut>("/api2/json/genderFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderFullGeo(string fullName, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderFullGeoWithHttpInfo(fullName, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> GenderFullGeoWithHttpInfo(string fullName, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFullGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderFullGeo");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderFullGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGenderedOut>("/api2/json/genderFullGeo/{fullName}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderFullGeoAsync(string fullName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderFullGeoWithHttpInfoAsync(fullName, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a full name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGenderedOut>> GenderFullGeoWithHttpInfoAsync(string fullName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->GenderFullGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderFullGeo");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderFullGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGenderedOut>("/api2/json/genderFullGeo/{fullName}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderFullGeoBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderFullGeoBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> GenderFullGeoBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderFullGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGenderedOut>("/api2/json/genderFullGeoBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderFullGeoBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderFullGeoBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut>> GenderFullGeoBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderFullGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGenderedOut>("/api2/json/genderFullGeoBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderFullGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderGeo(string firstName, string lastName, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderGeoWithHttpInfo(firstName, lastName, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> GenderGeoWithHttpInfo(string firstName, string lastName, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->GenderGeo");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->GenderGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderGeo");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGenderedOut>("/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderGeoAsync(string firstName, string lastName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderGeoWithHttpInfoAsync(firstName, lastName, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a name, given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut>> GenderGeoWithHttpInfoAsync(string firstName, string lastName, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->GenderGeo");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->GenderGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->GenderGeo");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.GenderGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGenderedOut>("/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderGeoBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderGeoBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> GenderGeoBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGenderedOut>("/api2/json/genderGeoBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderGeoBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderGeoBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut>> GenderGeoBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.GenderGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGenderedOut>("/api2/json/genderGeoBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameOriginedOut</returns>
        public FirstLastNameOriginedOut Origin(string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> localVarResponse = OriginWithHttpInfo(firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameOriginedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> OriginWithHttpInfo(string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Origin");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Origin");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Origin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameOriginedOut>("/api2/json/origin/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Origin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameOriginedOut> OriginAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut> localVarResponse = await OriginWithHttpInfoAsync(firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameOriginedOut>> OriginWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Origin");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Origin");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Origin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameOriginedOut>("/api2/json/origin/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Origin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameOriginedOut</returns>
        public BatchFirstLastNameOriginedOut OriginBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameOriginedOut> localVarResponse = OriginBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameOriginedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameOriginedOut> OriginBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.OriginBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameOriginedOut>("/api2/json/originBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameOriginedOut> OriginBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameOriginedOut> localVarResponse = await OriginBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameOriginedOut>> OriginBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "PersonalApi.OriginBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameOriginedOut>("/api2/json/originBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameOriginedOut</returns>
        public PersonalNameOriginedOut OriginFull(string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameOriginedOut> localVarResponse = OriginFullWithHttpInfo(personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameOriginedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameOriginedOut> OriginFullWithHttpInfo(string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->OriginFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.OriginFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameOriginedOut>("/api2/json/originFull/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameOriginedOut> OriginFullAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameOriginedOut> localVarResponse = await OriginFullWithHttpInfoAsync(personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameOriginedOut>> OriginFullWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->OriginFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.OriginFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameOriginedOut>("/api2/json/originFull/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameOriginedOut</returns>
        public BatchPersonalNameOriginedOut OriginFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameOriginedOut> localVarResponse = OriginFullBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameOriginedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameOriginedOut> OriginFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.OriginFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameOriginedOut>("/api2/json/originFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameOriginedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameOriginedOut> OriginFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameOriginedOut> localVarResponse = await OriginFullBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameOriginedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameOriginedOut>> OriginFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.OriginFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameOriginedOut>("/api2/json/originFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OriginFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseName(string nameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = ParseNameWithHttpInfo(nameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameParsedOut> ParseNameWithHttpInfo(string nameFull, int operationIndex = 0)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseName");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("nameFull", App.Namsor.Client.ClientUtils.ParameterToString(nameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ParseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameParsedOut>("/api2/json/parseName/{nameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameAsync(string nameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseNameWithHttpInfoAsync(nameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameParsedOut>> ParseNameWithHttpInfoAsync(string nameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseName");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("nameFull", App.Namsor.Client.ClientUtils.ParameterToString(nameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ParseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameParsedOut>("/api2/json/parseName/{nameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseNameBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> ParseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.ParseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameParsedOut>("/api2/json/parseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseNameBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut>> ParseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "PersonalApi.ParseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameParsedOut>("/api2/json/parseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseNameGeo(string nameFull, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = ParseNameGeoWithHttpInfo(nameFull, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameParsedOut> ParseNameGeoWithHttpInfo(string nameFull, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseNameGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ParseNameGeo");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("nameFull", App.Namsor.Client.ClientUtils.ParameterToString(nameFull)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ParseNameGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameParsedOut>("/api2/json/parseName/{nameFull}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseNameGeoAsync(string nameFull, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseNameGeoWithHttpInfoAsync(nameFull, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameFull"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameParsedOut>> ParseNameGeoWithHttpInfoAsync(string nameFull, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'nameFull' is set
            if (nameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'nameFull' when calling PersonalApi->ParseNameGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ParseNameGeo");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("nameFull", App.Namsor.Client.ClientUtils.ParameterToString(nameFull)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ParseNameGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameParsedOut>("/api2/json/parseName/{nameFull}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseNameGeoBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseNameGeoBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> ParseNameGeoBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.ParseNameGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameParsedOut>("/api2/json/parseNameGeoBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseNameGeoBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseNameGeoBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut>> ParseNameGeoBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.ParseNameGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameParsedOut>("/api2/json/parseNameGeoBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseNameGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameReligionedOut</returns>
        public FirstLastNameReligionedOut Religion2(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> localVarResponse = Religion2WithHttpInfo(countryIso2, subDivisionIso31662, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> Religion2WithHttpInfo(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Religion2");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Religion2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameReligionedOut>("/api2/json/religion/{countryIso2}/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameReligionedOut> Religion2Async(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> localVarResponse = await Religion2WithHttpInfoAsync(countryIso2, subDivisionIso31662, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut>> Religion2WithHttpInfoAsync(string countryIso2, string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Religion2");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Religion2");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Religion2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameReligionedOut>("/api2/json/religion/{countryIso2}/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameReligionedOut</returns>
        public BatchFirstLastNameReligionedOut ReligionBatch(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> localVarResponse = ReligionBatchWithHttpInfo(batchFirstLastNameGeoSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> ReligionBatchWithHttpInfo(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "PersonalApi.ReligionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameReligionedOut>("/api2/json/religionBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameReligionedOut> ReligionBatchAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> localVarResponse = await ReligionBatchWithHttpInfoAsync(batchFirstLastNameGeoSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal first / last names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut>> ReligionBatchWithHttpInfoAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "PersonalApi.ReligionBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameReligionedOut>("/api2/json/religionBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameReligionedOut</returns>
        public PersonalNameReligionedOut ReligionFull(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> localVarResponse = ReligionFullWithHttpInfo(countryIso2, subDivisionIso31662, personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> ReligionFullWithHttpInfo(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ReligionFull");
            }

            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling PersonalApi->ReligionFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->ReligionFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ReligionFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameReligionedOut>("/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameReligionedOut> ReligionFullAsync(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> localVarResponse = await ReligionFullWithHttpInfoAsync(countryIso2, subDivisionIso31662, personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameReligionedOut>> ReligionFullWithHttpInfoAsync(string countryIso2, string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->ReligionFull");
            }

            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling PersonalApi->ReligionFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->ReligionFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.ReligionFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameReligionedOut>("/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameReligionedOut</returns>
        public BatchPersonalNameReligionedOut ReligionFullBatch(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> localVarResponse = ReligionFullBatchWithHttpInfo(batchPersonalNameGeoSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> ReligionFullBatchWithHttpInfo(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "PersonalApi.ReligionFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameReligionedOut>("/api2/json/religionFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameReligionedOut> ReligionFullBatchAsync(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> localVarResponse = await ReligionFullBatchWithHttpInfoAsync(batchPersonalNameGeoSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut>> ReligionFullBatchWithHttpInfoAsync(BatchPersonalNameGeoSubdivisionIn? batchPersonalNameGeoSubdivisionIn = default(BatchPersonalNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "PersonalApi.ReligionFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameReligionedOut>("/api2/json/religionFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        public FirstLastNameGeoSubclassificationOut Subclassification(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = SubclassificationWithHttpInfo(countryIso2, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationWithHttpInfo(string countryIso2, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Subclassification");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Subclassification");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Subclassification");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Subclassification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Subclassification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = await SubclassificationWithHttpInfoAsync(countryIso2, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationWithHttpInfoAsync(string countryIso2, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->Subclassification");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->Subclassification");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->Subclassification");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.Subclassification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Subclassification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoSubclassificationOut</returns>
        public BatchFirstLastNameGeoSubclassificationOut SubclassificationBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> localVarResponse = SubclassificationBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> SubclassificationBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> localVarResponse = await SubclassificationBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut>> SubclassificationBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        public FirstLastNameGeoSubclassificationOut SubclassificationFull(string countryIso2, string fullName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = SubclassificationFullWithHttpInfo(countryIso2, fullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationFullWithHttpInfo(string countryIso2, string fullName, int operationIndex = 0)
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->SubclassificationFull");
            }

            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->SubclassificationFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationFull/{countryIso2}/{fullName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationFullAsync(string countryIso2, string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = await SubclassificationFullWithHttpInfoAsync(countryIso2, fullName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIso2"></param>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationFullWithHttpInfoAsync(string countryIso2, string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling PersonalApi->SubclassificationFull");
            }

            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling PersonalApi->SubclassificationFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter
            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationFull/{countryIso2}/{fullName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoSubclassificationOut</returns>
        public BatchPersonalNameGeoSubclassificationOut SubclassificationFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> localVarResponse = SubclassificationFullBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> SubclassificationFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGeoSubclassificationOut>("/api2/json/subclassificationFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> localVarResponse = await SubclassificationFullBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut>> SubclassificationFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.SubclassificationFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGeoSubclassificationOut>("/api2/json/subclassificationFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        public FirstLastNameUSRaceEthnicityOut UsRaceEthnicity(string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityWithHttpInfo(firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityWithHttpInfo(string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicity");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicity");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicity/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityWithHttpInfoAsync(firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicity");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicity");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicity/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        public BatchFirstLastNameUSRaceEthnicityOut UsRaceEthnicityBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsRaceEthnicityBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameUSRaceEthnicityOut</returns>
        public PersonalNameUSRaceEthnicityOut UsRaceEthnicityFull(string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityFullWithHttpInfo(personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullWithHttpInfo(string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->UsRaceEthnicityFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityFull/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityFullWithHttpInfoAsync(personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameUSRaceEthnicityOut>> UsRaceEthnicityFullWithHttpInfoAsync(string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling PersonalApi->UsRaceEthnicityFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityFull/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameUSRaceEthnicityOut</returns>
        public BatchPersonalNameUSRaceEthnicityOut UsRaceEthnicityFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityFullBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameUSRaceEthnicityOut> UsRaceEthnicityFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityFullBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameUSRaceEthnicityOut>> UsRaceEthnicityFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameUSRaceEthnicityOut</returns>
        public FirstLastNameUSRaceEthnicityOut UsRaceEthnicityZIP5(string firstName, string lastName, string zip5Code, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = UsRaceEthnicityZIP5WithHttpInfo(firstName, lastName, zip5Code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5WithHttpInfo(string firstName, string lastName, string zip5Code, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicityZIP5");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicityZIP5");
            }

            // verify the required parameter 'zip5Code' is set
            if (zip5Code == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'zip5Code' when calling PersonalApi->UsRaceEthnicityZIP5");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("zip5Code", App.Namsor.Client.ClientUtils.ParameterToString(zip5Code)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityZIP5";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityZIP5", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameUSRaceEthnicityOut> UsRaceEthnicityZIP5Async(string firstName, string lastName, string zip5Code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut> localVarResponse = await UsRaceEthnicityZIP5WithHttpInfoAsync(firstName, lastName, zip5Code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="zip5Code"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameUSRaceEthnicityOut>> UsRaceEthnicityZIP5WithHttpInfoAsync(string firstName, string lastName, string zip5Code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling PersonalApi->UsRaceEthnicityZIP5");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling PersonalApi->UsRaceEthnicityZIP5");
            }

            // verify the required parameter 'zip5Code' is set
            if (zip5Code == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'zip5Code' when calling PersonalApi->UsRaceEthnicityZIP5");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("zip5Code", App.Namsor.Client.ClientUtils.ParameterToString(zip5Code)); // path parameter

            localVarRequestOptions.Operation = "PersonalApi.UsRaceEthnicityZIP5";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameUSRaceEthnicityOut>("/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsRaceEthnicityZIP5", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameUSRaceEthnicityOut</returns>
        public BatchFirstLastNameUSRaceEthnicityOut UsZipRaceEthnicityBatch(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = UsZipRaceEthnicityBatchWithHttpInfo(batchFirstLastNameGeoZippedIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchWithHttpInfo(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoZippedIn;

            localVarRequestOptions.Operation = "PersonalApi.UsZipRaceEthnicityBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameUSRaceEthnicityOut>("/api2/json/usZipRaceEthnicityBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsZipRaceEthnicityBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameUSRaceEthnicityOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameUSRaceEthnicityOut> UsZipRaceEthnicityBatchAsync(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut> localVarResponse = await UsZipRaceEthnicityBatchWithHttpInfoAsync(batchFirstLastNameGeoZippedIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoZippedIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameUSRaceEthnicityOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameUSRaceEthnicityOut>> UsZipRaceEthnicityBatchWithHttpInfoAsync(BatchFirstLastNameGeoZippedIn? batchFirstLastNameGeoZippedIn = default(BatchFirstLastNameGeoZippedIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoZippedIn;

            localVarRequestOptions.Operation = "PersonalApi.UsZipRaceEthnicityBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameUSRaceEthnicityOut>("/api2/json/usZipRaceEthnicityBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsZipRaceEthnicityBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
