/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCode(string firstName, string lastName, string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeWithHttpInfo(string firstName, string lastName, string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        BatchFirstLastNamePhoneCodedOut PhoneCodeBatch(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchWithHttpInfo(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCodeGeo(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoWithHttpInfo(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0);
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        BatchFirstLastNamePhoneCodedOut PhoneCodeGeoBatch(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchWithHttpInfo(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        FirstLastNamePhoneCodedOut PhoneCodeGeoFeedbackLoop(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopWithHttpInfo(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeAsync(string firstName, string lastName, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchAsync(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeBatchWithHttpInfoAsync(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoAsync(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchAsync(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeGeoBatchWithHttpInfoAsync(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopAsync(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoFeedbackLoopWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApi : ISocialApiSync, ISocialApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SocialApi : ISocialApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SocialApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCode(string firstName, string lastName, string phoneNumber, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeWithHttpInfo(firstName, lastName, phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeWithHttpInfo(string firstName, string lastName, string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCode");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCode");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCode");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNamePhoneCodedOut>("/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeAsync(string firstName, string lastName, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeWithHttpInfoAsync(firstName, lastName, phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCode");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCode");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCode");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNamePhoneCodedOut>("/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        public BatchFirstLastNamePhoneCodedOut PhoneCodeBatch(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchWithHttpInfo(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNamePhoneNumberIn;

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNamePhoneCodedOut>("/api2/json/phoneCodeBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeBatchAsync(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeBatchWithHttpInfoAsync(batchFirstLastNamePhoneNumberIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeBatchWithHttpInfoAsync(BatchFirstLastNamePhoneNumberIn? batchFirstLastNamePhoneNumberIn = default(BatchFirstLastNamePhoneNumberIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNamePhoneNumberIn;

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNamePhoneCodedOut>("/api2/json/phoneCodeBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCodeGeo(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoWithHttpInfo(firstName, lastName, phoneNumber, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoWithHttpInfo(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeo");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoAsync(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoWithHttpInfoAsync(firstName, lastName, phoneNumber, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeo");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNamePhoneCodedOut</returns>
        public BatchFirstLastNamePhoneCodedOut PhoneCodeGeoBatch(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNamePhoneCodedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchWithHttpInfo(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNamePhoneNumberGeoIn;

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeoBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNamePhoneCodedOut> PhoneCodeGeoBatchAsync(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoBatchWithHttpInfoAsync(batchFirstLastNamePhoneNumberGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNamePhoneNumberGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNamePhoneCodedOut>> PhoneCodeGeoBatchWithHttpInfoAsync(BatchFirstLastNamePhoneNumberGeoIn? batchFirstLastNamePhoneNumberGeoIn = default(BatchFirstLastNamePhoneNumberGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNamePhoneNumberGeoIn;

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeoBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNamePhoneCodedOut</returns>
        public FirstLastNamePhoneCodedOut PhoneCodeGeoFeedbackLoop(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = PhoneCodeGeoFeedbackLoopWithHttpInfo(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNamePhoneCodedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopWithHttpInfo(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'phoneNumberE164' is set
            if (phoneNumberE164 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumberE164' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberE164", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumberE164)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeoFeedbackLoop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeoFeedbackLoop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNamePhoneCodedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNamePhoneCodedOut> PhoneCodeGeoFeedbackLoopAsync(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut> localVarResponse = await PhoneCodeGeoFeedbackLoopWithHttpInfoAsync(firstName, lastName, phoneNumber, phoneNumberE164, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="phoneNumber"></param>
        /// <param name="phoneNumberE164"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNamePhoneCodedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNamePhoneCodedOut>> PhoneCodeGeoFeedbackLoopWithHttpInfoAsync(string firstName, string lastName, string phoneNumber, string phoneNumberE164, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'phoneNumberE164' is set
            if (phoneNumberE164 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'phoneNumberE164' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling SocialApi->PhoneCodeGeoFeedbackLoop");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumberE164", App.Namsor.Client.ClientUtils.ParameterToString(phoneNumberE164)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.PhoneCodeGeoFeedbackLoop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNamePhoneCodedOut>("/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PhoneCodeGeoFeedbackLoop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
