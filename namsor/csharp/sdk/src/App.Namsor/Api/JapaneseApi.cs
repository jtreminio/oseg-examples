/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJapaneseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderJapaneseNameFull(string japaneseName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderJapaneseNameFullWithHttpInfo(string japaneseName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderJapaneseNameFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderJapaneseNamePinyin(string japaneseSurname, string japaneseGivenName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderJapaneseNamePinyinWithHttpInfo(string japaneseSurname, string japaneseGivenName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderJapaneseNamePinyinBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameGenderKanjiCandidatesBatch(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameGenderKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        NameMatchCandidatesOut JapaneseNameKanjiCandidates(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        ApiResponse<NameMatchCandidatesOut> JapaneseNameKanjiCandidatesWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        NameMatchCandidatesOut JapaneseNameKanjiCandidates1(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        ApiResponse<NameMatchCandidatesOut> JapaneseNameKanjiCandidates1WithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0);
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameKanjiCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        NameMatchCandidatesOut JapaneseNameLatinCandidates(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0);

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        ApiResponse<NameMatchCandidatesOut> JapaneseNameLatinCandidatesWithHttpInfo(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0);
        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut JapaneseNameLatinCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchedOut</returns>
        NameMatchedOut JapaneseNameMatch(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0);

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchedOut</returns>
        ApiResponse<NameMatchedOut> JapaneseNameMatchWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0);
        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchedOut</returns>
        BatchNameMatchedOut JapaneseNameMatchBatch(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchedOut</returns>
        ApiResponse<BatchNameMatchedOut> JapaneseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeedbackLoopOut</returns>
        FeedbackLoopOut JapaneseNameMatchFeedbackLoop(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0);

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeedbackLoopOut</returns>
        ApiResponse<FeedbackLoopOut> JapaneseNameMatchFeedbackLoopWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseJapaneseName(string japaneseName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseJapaneseNameWithHttpInfo(string japaneseName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseJapaneseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseJapaneseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJapaneseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderJapaneseNameFullAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderJapaneseNameFullWithHttpInfoAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 full names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderJapaneseNameFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderJapaneseNamePinyinAsync(string japaneseSurname, string japaneseGivenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderJapaneseNamePinyinWithHttpInfoAsync(string japaneseSurname, string japaneseGivenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderJapaneseNamePinyinBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameGenderKanjiCandidatesBatchAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameGenderKanjiCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidatesAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchCandidatesOut>> JapaneseNameKanjiCandidatesWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidates1Async(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchCandidatesOut>> JapaneseNameKanjiCandidates1WithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameKanjiCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameLatinCandidatesAsync(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchCandidatesOut>> JapaneseNameLatinCandidatesWithHttpInfoAsync(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameLatinCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchedOut</returns>
        System.Threading.Tasks.Task<NameMatchedOut> JapaneseNameMatchAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchedOut>> JapaneseNameMatchWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchedOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchedOut> JapaneseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchedOut>> JapaneseNameMatchBatchWithHttpInfoAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackLoopOut</returns>
        System.Threading.Tasks.Task<FeedbackLoopOut> JapaneseNameMatchFeedbackLoopAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackLoopOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeedbackLoopOut>> JapaneseNameMatchFeedbackLoopWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseJapaneseNameAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseJapaneseNameWithHttpInfoAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseJapaneseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseJapaneseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJapaneseApi : IJapaneseApiSync, IJapaneseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JapaneseApi : IJapaneseApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JapaneseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JapaneseApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JapaneseApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JapaneseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JapaneseApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderJapaneseNameFull(string japaneseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderJapaneseNameFullWithHttpInfo(japaneseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> GenderJapaneseNameFullWithHttpInfo(string japaneseName, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->GenderJapaneseNameFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNameFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGenderedOut>("/api2/json/genderJapaneseNameFull/{japaneseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNameFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderJapaneseNameFullAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderJapaneseNameFullWithHttpInfoAsync(japaneseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGenderedOut>> GenderJapaneseNameFullWithHttpInfoAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->GenderJapaneseNameFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNameFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGenderedOut>("/api2/json/genderJapaneseNameFull/{japaneseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNameFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderJapaneseNameFullBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderJapaneseNameFullBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNameFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGenderedOut>("/api2/json/genderJapaneseNameFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNameFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderJapaneseNameFullBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderJapaneseNameFullBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut>> GenderJapaneseNameFullBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNameFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGenderedOut>("/api2/json/genderJapaneseNameFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNameFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderJapaneseNamePinyin(string japaneseSurname, string japaneseGivenName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderJapaneseNamePinyinWithHttpInfo(japaneseSurname, japaneseGivenName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> GenderJapaneseNamePinyinWithHttpInfo(string japaneseSurname, string japaneseGivenName, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurname' is set
            if (japaneseSurname == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurname' when calling JapaneseApi->GenderJapaneseNamePinyin");
            }

            // verify the required parameter 'japaneseGivenName' is set
            if (japaneseGivenName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenName' when calling JapaneseApi->GenderJapaneseNamePinyin");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurname", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurname)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNamePinyin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGenderedOut>("/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNamePinyin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderJapaneseNamePinyinAsync(string japaneseSurname, string japaneseGivenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderJapaneseNamePinyinWithHttpInfoAsync(japaneseSurname, japaneseGivenName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Japanese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurname"></param>
        /// <param name="japaneseGivenName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut>> GenderJapaneseNamePinyinWithHttpInfoAsync(string japaneseSurname, string japaneseGivenName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurname' is set
            if (japaneseSurname == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurname' when calling JapaneseApi->GenderJapaneseNamePinyin");
            }

            // verify the required parameter 'japaneseGivenName' is set
            if (japaneseGivenName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenName' when calling JapaneseApi->GenderJapaneseNamePinyin");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurname", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurname)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNamePinyin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGenderedOut>("/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNamePinyin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderJapaneseNamePinyinBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderJapaneseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNamePinyinBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGenderedOut>("/api2/json/genderJapaneseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNamePinyinBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderJapaneseNamePinyinBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderJapaneseNamePinyinBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut>> GenderJapaneseNamePinyinBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.GenderJapaneseNamePinyinBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGenderedOut>("/api2/json/genderJapaneseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderJapaneseNamePinyinBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameGenderKanjiCandidatesBatch(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameGenderKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameGenderIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameGenderKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGenderIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameGenderKanjiCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameGenderKanjiCandidatesBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameGenderKanjiCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameGenderKanjiCandidatesBatchAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameGenderKanjiCandidatesBatchWithHttpInfoAsync(batchFirstLastNameGenderIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameGenderKanjiCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGenderIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameGenderKanjiCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameGenderKanjiCandidatesBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameGenderKanjiCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        public NameMatchCandidatesOut JapaneseNameKanjiCandidates(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = JapaneseNameKanjiCandidatesWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> JapaneseNameKanjiCandidatesWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }

            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'knownGender' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("knownGender", App.Namsor.Client.ClientUtils.ParameterToString(knownGender)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidatesAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = await JapaneseNameKanjiCandidatesWithHttpInfoAsync(japaneseSurnameLatin, japaneseGivenNameLatin, knownGender, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchCandidatesOut>> JapaneseNameKanjiCandidatesWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }

            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'knownGender' when calling JapaneseApi->JapaneseNameKanjiCandidates");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("knownGender", App.Namsor.Client.ClientUtils.ParameterToString(knownGender)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        public NameMatchCandidatesOut JapaneseNameKanjiCandidates1(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = JapaneseNameKanjiCandidates1WithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> JapaneseNameKanjiCandidates1WithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates1");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates1");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidates1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidates1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameKanjiCandidates1Async(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = await JapaneseNameKanjiCandidates1WithHttpInfoAsync(japaneseSurnameLatin, japaneseGivenNameLatin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchCandidatesOut>> JapaneseNameKanjiCandidates1WithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates1");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameKanjiCandidates1");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidates1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidates1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameKanjiCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameKanjiCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidatesBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameKanjiCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameKanjiCandidatesBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameKanjiCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameKanjiCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameKanjiCandidatesBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameKanjiCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        public NameMatchCandidatesOut JapaneseNameLatinCandidates(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = JapaneseNameLatinCandidatesWithHttpInfo(japaneseSurnameKanji, japaneseGivenNameKanji);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> JapaneseNameLatinCandidatesWithHttpInfo(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurnameKanji' is set
            if (japaneseSurnameKanji == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            }

            // verify the required parameter 'japaneseGivenNameKanji' is set
            if (japaneseGivenNameKanji == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameKanji", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameKanji)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameKanji", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameKanji)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameLatinCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchCandidatesOut>("/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameLatinCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<NameMatchCandidatesOut> JapaneseNameLatinCandidatesAsync(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = await JapaneseNameLatinCandidatesWithHttpInfoAsync(japaneseSurnameKanji, japaneseGivenNameKanji, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese name, based on the name in Kanji. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameKanji"></param>
        /// <param name="japaneseGivenNameKanji"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchCandidatesOut>> JapaneseNameLatinCandidatesWithHttpInfoAsync(string japaneseSurnameKanji, string japaneseGivenNameKanji, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurnameKanji' is set
            if (japaneseSurnameKanji == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            }

            // verify the required parameter 'japaneseGivenNameKanji' is set
            if (japaneseGivenNameKanji == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameKanji' when calling JapaneseApi->JapaneseNameLatinCandidates");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameKanji", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameKanji)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameKanji", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameKanji)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameLatinCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchCandidatesOut>("/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameLatinCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut JapaneseNameLatinCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = JapaneseNameLatinCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameLatinCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameLatinCandidatesBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameLatinCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> JapaneseNameLatinCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await JapaneseNameLatinCandidatesBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize japanese names, based on the name in KANJI 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut>> JapaneseNameLatinCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameLatinCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchCandidatesOut>("/api2/json/japaneseNameLatinCandidatesBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameLatinCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchedOut</returns>
        public NameMatchedOut JapaneseNameMatch(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchedOut> localVarResponse = JapaneseNameMatchWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchedOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchedOut> JapaneseNameMatchWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatch");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatch");
            }

            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatch");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchedOut>("/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchedOut</returns>
        public async System.Threading.Tasks.Task<NameMatchedOut> JapaneseNameMatchAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchedOut> localVarResponse = await JapaneseNameMatchWithHttpInfoAsync(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchedOut>> JapaneseNameMatchWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatch");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatch");
            }

            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatch");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchedOut>("/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchedOut</returns>
        public BatchNameMatchedOut JapaneseNameMatchBatch(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchedOut> localVarResponse = JapaneseNameMatchBatchWithHttpInfo(batchMatchPersonalFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchedOut> JapaneseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchMatchPersonalFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatchBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchedOut>("/api2/json/japaneseNameMatchBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatchBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchedOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchedOut> JapaneseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchedOut> localVarResponse = await JapaneseNameMatchBatchWithHttpInfoAsync(batchMatchPersonalFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchedOut>> JapaneseNameMatchBatchWithHttpInfoAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchMatchPersonalFirstLastNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatchBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchedOut>("/api2/json/japaneseNameMatchBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatchBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeedbackLoopOut</returns>
        public FeedbackLoopOut JapaneseNameMatchFeedbackLoop(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FeedbackLoopOut> localVarResponse = JapaneseNameMatchFeedbackLoopWithHttpInfo(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeedbackLoopOut</returns>
        public App.Namsor.Client.ApiResponse<FeedbackLoopOut> JapaneseNameMatchFeedbackLoopWithHttpInfo(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }

            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatchFeedbackLoop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeedbackLoopOut>("/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatchFeedbackLoop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeedbackLoopOut</returns>
        public async System.Threading.Tasks.Task<FeedbackLoopOut> JapaneseNameMatchFeedbackLoopAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FeedbackLoopOut> localVarResponse = await JapaneseNameMatchFeedbackLoopWithHttpInfoAsync(japaneseSurnameLatin, japaneseGivenNameLatin, japaneseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseSurnameLatin"></param>
        /// <param name="japaneseGivenNameLatin"></param>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeedbackLoopOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FeedbackLoopOut>> JapaneseNameMatchFeedbackLoopWithHttpInfoAsync(string japaneseSurnameLatin, string japaneseGivenNameLatin, string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseSurnameLatin' is set
            if (japaneseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseSurnameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }

            // verify the required parameter 'japaneseGivenNameLatin' is set
            if (japaneseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseGivenNameLatin' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }

            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->JapaneseNameMatchFeedbackLoop");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(japaneseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.JapaneseNameMatchFeedbackLoop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeedbackLoopOut>("/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JapaneseNameMatchFeedbackLoop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseJapaneseName(string japaneseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = ParseJapaneseNameWithHttpInfo(japaneseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameParsedOut> ParseJapaneseNameWithHttpInfo(string japaneseName, int operationIndex = 0)
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->ParseJapaneseName");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.ParseJapaneseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameParsedOut>("/api2/json/parseJapaneseName/{japaneseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseJapaneseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseJapaneseNameAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseJapaneseNameWithHttpInfoAsync(japaneseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="japaneseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameParsedOut>> ParseJapaneseNameWithHttpInfoAsync(string japaneseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'japaneseName' is set
            if (japaneseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'japaneseName' when calling JapaneseApi->ParseJapaneseName");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("japaneseName", App.Namsor.Client.ClientUtils.ParameterToString(japaneseName)); // path parameter

            localVarRequestOptions.Operation = "JapaneseApi.ParseJapaneseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameParsedOut>("/api2/json/parseJapaneseName/{japaneseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseJapaneseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseJapaneseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseJapaneseNameBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> ParseJapaneseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.ParseJapaneseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameParsedOut>("/api2/json/parseJapaneseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseJapaneseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseJapaneseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseJapaneseNameBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut>> ParseJapaneseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "JapaneseApi.ParseJapaneseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameParsedOut>("/api2/json/parseJapaneseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseJapaneseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
