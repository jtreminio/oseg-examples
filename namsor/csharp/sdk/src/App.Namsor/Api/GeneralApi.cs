/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProperNounCategorizedOut</returns>
        ProperNounCategorizedOut NameType(string properNoun, int operationIndex = 0);

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProperNounCategorizedOut</returns>
        ApiResponse<ProperNounCategorizedOut> NameTypeWithHttpInfo(string properNoun, int operationIndex = 0);
        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchProperNounCategorizedOut</returns>
        BatchProperNounCategorizedOut NameTypeBatch(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchProperNounCategorizedOut</returns>
        ApiResponse<BatchProperNounCategorizedOut> NameTypeBatchWithHttpInfo(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProperNounCategorizedOut</returns>
        ProperNounCategorizedOut NameTypeGeo(string properNoun, string countryIso2, int operationIndex = 0);

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProperNounCategorizedOut</returns>
        ApiResponse<ProperNounCategorizedOut> NameTypeGeoWithHttpInfo(string properNoun, string countryIso2, int operationIndex = 0);
        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchProperNounCategorizedOut</returns>
        BatchProperNounCategorizedOut NameTypeGeoBatch(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchProperNounCategorizedOut</returns>
        ApiResponse<BatchProperNounCategorizedOut> NameTypeGeoBatchWithHttpInfo(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProperNounCategorizedOut</returns>
        System.Threading.Tasks.Task<ProperNounCategorizedOut> NameTypeAsync(string properNoun, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProperNounCategorizedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProperNounCategorizedOut>> NameTypeWithHttpInfoAsync(string properNoun, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchProperNounCategorizedOut</returns>
        System.Threading.Tasks.Task<BatchProperNounCategorizedOut> NameTypeBatchAsync(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProperNounCategorizedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchProperNounCategorizedOut>> NameTypeBatchWithHttpInfoAsync(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProperNounCategorizedOut</returns>
        System.Threading.Tasks.Task<ProperNounCategorizedOut> NameTypeGeoAsync(string properNoun, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProperNounCategorizedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProperNounCategorizedOut>> NameTypeGeoWithHttpInfoAsync(string properNoun, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchProperNounCategorizedOut</returns>
        System.Threading.Tasks.Task<BatchProperNounCategorizedOut> NameTypeGeoBatchAsync(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProperNounCategorizedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchProperNounCategorizedOut>> NameTypeGeoBatchWithHttpInfoAsync(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralApi : IGeneralApiSync, IGeneralApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeneralApi : IGeneralApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeneralApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeneralApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeneralApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GeneralApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProperNounCategorizedOut</returns>
        public ProperNounCategorizedOut NameType(string properNoun, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> localVarResponse = NameTypeWithHttpInfo(properNoun);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProperNounCategorizedOut</returns>
        public App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> NameTypeWithHttpInfo(string properNoun, int operationIndex = 0)
        {
            // verify the required parameter 'properNoun' is set
            if (properNoun == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'properNoun' when calling GeneralApi->NameType");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("properNoun", App.Namsor.Client.ClientUtils.ParameterToString(properNoun)); // path parameter

            localVarRequestOptions.Operation = "GeneralApi.NameType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProperNounCategorizedOut>("/api2/json/nameType/{properNoun}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProperNounCategorizedOut</returns>
        public async System.Threading.Tasks.Task<ProperNounCategorizedOut> NameTypeAsync(string properNoun, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> localVarResponse = await NameTypeWithHttpInfoAsync(properNoun, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProperNounCategorizedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<ProperNounCategorizedOut>> NameTypeWithHttpInfoAsync(string properNoun, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'properNoun' is set
            if (properNoun == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'properNoun' when calling GeneralApi->NameType");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("properNoun", App.Namsor.Client.ClientUtils.ParameterToString(properNoun)); // path parameter

            localVarRequestOptions.Operation = "GeneralApi.NameType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProperNounCategorizedOut>("/api2/json/nameType/{properNoun}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchProperNounCategorizedOut</returns>
        public BatchProperNounCategorizedOut NameTypeBatch(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> localVarResponse = NameTypeBatchWithHttpInfo(batchNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchProperNounCategorizedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> NameTypeBatchWithHttpInfo(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchNameIn;

            localVarRequestOptions.Operation = "GeneralApi.NameTypeBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchProperNounCategorizedOut>("/api2/json/nameTypeBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchProperNounCategorizedOut</returns>
        public async System.Threading.Tasks.Task<BatchProperNounCategorizedOut> NameTypeBatchAsync(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> localVarResponse = await NameTypeBatchWithHttpInfoAsync(batchNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProperNounCategorizedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut>> NameTypeBatchWithHttpInfoAsync(BatchNameIn? batchNameIn = default(BatchNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchNameIn;

            localVarRequestOptions.Operation = "GeneralApi.NameTypeBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchProperNounCategorizedOut>("/api2/json/nameTypeBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProperNounCategorizedOut</returns>
        public ProperNounCategorizedOut NameTypeGeo(string properNoun, string countryIso2, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> localVarResponse = NameTypeGeoWithHttpInfo(properNoun, countryIso2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProperNounCategorizedOut</returns>
        public App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> NameTypeGeoWithHttpInfo(string properNoun, string countryIso2, int operationIndex = 0)
        {
            // verify the required parameter 'properNoun' is set
            if (properNoun == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'properNoun' when calling GeneralApi->NameTypeGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling GeneralApi->NameTypeGeo");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("properNoun", App.Namsor.Client.ClientUtils.ParameterToString(properNoun)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "GeneralApi.NameTypeGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProperNounCategorizedOut>("/api2/json/nameTypeGeo/{properNoun}/{countryIso2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProperNounCategorizedOut</returns>
        public async System.Threading.Tasks.Task<ProperNounCategorizedOut> NameTypeGeoAsync(string properNoun, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<ProperNounCategorizedOut> localVarResponse = await NameTypeGeoWithHttpInfoAsync(properNoun, countryIso2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely type of a proper noun (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="properNoun"></param>
        /// <param name="countryIso2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProperNounCategorizedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<ProperNounCategorizedOut>> NameTypeGeoWithHttpInfoAsync(string properNoun, string countryIso2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'properNoun' is set
            if (properNoun == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'properNoun' when calling GeneralApi->NameTypeGeo");
            }

            // verify the required parameter 'countryIso2' is set
            if (countryIso2 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'countryIso2' when calling GeneralApi->NameTypeGeo");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("properNoun", App.Namsor.Client.ClientUtils.ParameterToString(properNoun)); // path parameter
            localVarRequestOptions.PathParameters.Add("countryIso2", App.Namsor.Client.ClientUtils.ParameterToString(countryIso2)); // path parameter

            localVarRequestOptions.Operation = "GeneralApi.NameTypeGeo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProperNounCategorizedOut>("/api2/json/nameTypeGeo/{properNoun}/{countryIso2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeGeo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchProperNounCategorizedOut</returns>
        public BatchProperNounCategorizedOut NameTypeGeoBatch(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> localVarResponse = NameTypeGeoBatchWithHttpInfo(batchNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchProperNounCategorizedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> NameTypeGeoBatchWithHttpInfo(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchNameGeoIn;

            localVarRequestOptions.Operation = "GeneralApi.NameTypeGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchProperNounCategorizedOut>("/api2/json/nameTypeGeoBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchProperNounCategorizedOut</returns>
        public async System.Threading.Tasks.Task<BatchProperNounCategorizedOut> NameTypeGeoBatchAsync(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut> localVarResponse = await NameTypeGeoBatchWithHttpInfoAsync(batchNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchNameGeoIn">A list of proper names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchProperNounCategorizedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchProperNounCategorizedOut>> NameTypeGeoBatchWithHttpInfoAsync(BatchNameGeoIn? batchNameGeoIn = default(BatchNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchNameGeoIn;

            localVarRequestOptions.Operation = "GeneralApi.NameTypeGeoBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchProperNounCategorizedOut>("/api2/json/nameTypeGeoBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NameTypeGeoBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
