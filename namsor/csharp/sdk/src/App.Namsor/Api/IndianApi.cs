/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndianApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameCasteOut</returns>
        BatchFirstLastNameCasteOut CasteIndianBatch(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameCasteOut</returns>
        ApiResponse<BatchFirstLastNameCasteOut> CasteIndianBatchWithHttpInfo(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameCastegroupOut</returns>
        FirstLastNameCastegroupOut CastegroupIndian(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameCastegroupOut</returns>
        ApiResponse<FirstLastNameCastegroupOut> CastegroupIndianWithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameCastegroupOut</returns>
        BatchFirstLastNameCastegroupOut CastegroupIndianBatch(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameCastegroupOut</returns>
        ApiResponse<BatchFirstLastNameCastegroupOut> CastegroupIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameCastegroupOut</returns>
        PersonalNameCastegroupOut CastegroupIndianFull(string subDivisionIso31662, string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameCastegroupOut</returns>
        ApiResponse<PersonalNameCastegroupOut> CastegroupIndianFullWithHttpInfo(string subDivisionIso31662, string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameCastegroupOut</returns>
        BatchPersonalNameCastegroupOut CastegroupIndianFullBatch(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameCastegroupOut</returns>
        ApiResponse<BatchPersonalNameCastegroupOut> CastegroupIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameCasteOut</returns>
        FirstLastNameCasteOut CastegroupIndianHindu(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameCasteOut</returns>
        ApiResponse<FirstLastNameCasteOut> CastegroupIndianHinduWithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameReligionedOut</returns>
        PersonalNameReligionedOut Religion(string subDivisionIso31662, string personalNameFull, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameReligionedOut</returns>
        ApiResponse<PersonalNameReligionedOut> ReligionWithHttpInfo(string subDivisionIso31662, string personalNameFull, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameReligionedOut</returns>
        FirstLastNameReligionedOut Religion1(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameReligionedOut</returns>
        ApiResponse<FirstLastNameReligionedOut> Religion1WithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameReligionedOut</returns>
        BatchFirstLastNameReligionedOut ReligionIndianBatch(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameReligionedOut</returns>
        ApiResponse<BatchFirstLastNameReligionedOut> ReligionIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameReligionedOut</returns>
        BatchPersonalNameReligionedOut ReligionIndianFullBatch(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameReligionedOut</returns>
        ApiResponse<BatchPersonalNameReligionedOut> ReligionIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        FirstLastNameGeoSubclassificationOut SubclassificationIndian(string firstName, string lastName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationIndianWithHttpInfo(string firstName, string lastName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoSubclassificationOut</returns>
        BatchFirstLastNameGeoSubclassificationOut SubclassificationIndianBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoSubclassificationOut</returns>
        ApiResponse<BatchFirstLastNameGeoSubclassificationOut> SubclassificationIndianBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGeoSubclassificationOut</returns>
        PersonalNameGeoSubclassificationOut SubclassificationIndianFull(string fullName, int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGeoSubclassificationOut</returns>
        ApiResponse<PersonalNameGeoSubclassificationOut> SubclassificationIndianFullWithHttpInfo(string fullName, int operationIndex = 0);
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoSubclassificationOut</returns>
        BatchPersonalNameGeoSubclassificationOut SubclassificationIndianFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoSubclassificationOut</returns>
        ApiResponse<BatchPersonalNameGeoSubclassificationOut> SubclassificationIndianFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndianApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameCasteOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameCasteOut> CasteIndianBatchAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameCasteOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameCasteOut>> CasteIndianBatchWithHttpInfoAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameCastegroupOut</returns>
        System.Threading.Tasks.Task<FirstLastNameCastegroupOut> CastegroupIndianAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameCastegroupOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameCastegroupOut>> CastegroupIndianWithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameCastegroupOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameCastegroupOut> CastegroupIndianBatchAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameCastegroupOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameCastegroupOut>> CastegroupIndianBatchWithHttpInfoAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameCastegroupOut</returns>
        System.Threading.Tasks.Task<PersonalNameCastegroupOut> CastegroupIndianFullAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameCastegroupOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameCastegroupOut>> CastegroupIndianFullWithHttpInfoAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameCastegroupOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameCastegroupOut> CastegroupIndianFullBatchAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameCastegroupOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameCastegroupOut>> CastegroupIndianFullBatchWithHttpInfoAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameCasteOut</returns>
        System.Threading.Tasks.Task<FirstLastNameCasteOut> CastegroupIndianHinduAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameCasteOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameCasteOut>> CastegroupIndianHinduWithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameReligionedOut</returns>
        System.Threading.Tasks.Task<PersonalNameReligionedOut> ReligionAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameReligionedOut>> ReligionWithHttpInfoAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameReligionedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameReligionedOut> Religion1Async(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameReligionedOut>> Religion1WithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameReligionedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameReligionedOut> ReligionIndianBatchAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameReligionedOut>> ReligionIndianBatchWithHttpInfoAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameReligionedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameReligionedOut> ReligionIndianFullBatchAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameReligionedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameReligionedOut>> ReligionIndianFullBatchWithHttpInfoAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationIndianAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationIndianWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationIndianBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGeoSubclassificationOut>> SubclassificationIndianBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<PersonalNameGeoSubclassificationOut> SubclassificationIndianFullAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGeoSubclassificationOut>> SubclassificationIndianFullWithHttpInfoAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoSubclassificationOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationIndianFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoSubclassificationOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGeoSubclassificationOut>> SubclassificationIndianFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIndianApi : IIndianApiSync, IIndianApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IndianApi : IIndianApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IndianApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndianApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndianApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndianApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndianApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IndianApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndianApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IndianApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameCasteOut</returns>
        public BatchFirstLastNameCasteOut CasteIndianBatch(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameCasteOut> localVarResponse = CasteIndianBatchWithHttpInfo(batchFirstLastNameGeoSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameCasteOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameCasteOut> CasteIndianBatchWithHttpInfo(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CasteIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameCasteOut>("/api2/json/casteIndianBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CasteIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameCasteOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameCasteOut> CasteIndianBatchAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameCasteOut> localVarResponse = await CasteIndianBatchWithHttpInfoAsync(batchFirstLastNameGeoSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameCasteOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameCasteOut>> CasteIndianBatchWithHttpInfoAsync(BatchFirstLastNameGeoSubdivisionIn? batchFirstLastNameGeoSubdivisionIn = default(BatchFirstLastNameGeoSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CasteIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameCasteOut>("/api2/json/casteIndianBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CasteIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameCastegroupOut</returns>
        public FirstLastNameCastegroupOut CastegroupIndian(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameCastegroupOut> localVarResponse = CastegroupIndianWithHttpInfo(subDivisionIso31662, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameCastegroupOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameCastegroupOut> CastegroupIndianWithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndian");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->CastegroupIndian");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->CastegroupIndian");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndian";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameCastegroupOut>("/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndian", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameCastegroupOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameCastegroupOut> CastegroupIndianAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameCastegroupOut> localVarResponse = await CastegroupIndianWithHttpInfoAsync(subDivisionIso31662, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameCastegroupOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameCastegroupOut>> CastegroupIndianWithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndian");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->CastegroupIndian");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->CastegroupIndian");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndian";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameCastegroupOut>("/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndian", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameCastegroupOut</returns>
        public BatchFirstLastNameCastegroupOut CastegroupIndianBatch(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameCastegroupOut> localVarResponse = CastegroupIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameCastegroupOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameCastegroupOut> CastegroupIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameCastegroupOut>("/api2/json/castegroupIndianBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameCastegroupOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameCastegroupOut> CastegroupIndianBatchAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameCastegroupOut> localVarResponse = await CastegroupIndianBatchWithHttpInfoAsync(batchFirstLastNameSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameCastegroupOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameCastegroupOut>> CastegroupIndianBatchWithHttpInfoAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameCastegroupOut>("/api2/json/castegroupIndianBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameCastegroupOut</returns>
        public PersonalNameCastegroupOut CastegroupIndianFull(string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameCastegroupOut> localVarResponse = CastegroupIndianFullWithHttpInfo(subDivisionIso31662, personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameCastegroupOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameCastegroupOut> CastegroupIndianFullWithHttpInfo(string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndianFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling IndianApi->CastegroupIndianFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameCastegroupOut>("/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameCastegroupOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameCastegroupOut> CastegroupIndianFullAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameCastegroupOut> localVarResponse = await CastegroupIndianFullWithHttpInfoAsync(subDivisionIso31662, personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameCastegroupOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameCastegroupOut>> CastegroupIndianFullWithHttpInfoAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndianFull");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling IndianApi->CastegroupIndianFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameCastegroupOut>("/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameCastegroupOut</returns>
        public BatchPersonalNameCastegroupOut CastegroupIndianFullBatch(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameCastegroupOut> localVarResponse = CastegroupIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameCastegroupOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameCastegroupOut> CastegroupIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameCastegroupOut>("/api2/json/castegroupIndianFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameCastegroupOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameCastegroupOut> CastegroupIndianFullBatchAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameCastegroupOut> localVarResponse = await CastegroupIndianFullBatchWithHttpInfoAsync(batchPersonalNameSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameCastegroupOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameCastegroupOut>> CastegroupIndianFullBatchWithHttpInfoAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameCastegroupOut>("/api2/json/castegroupIndianFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameCasteOut</returns>
        public FirstLastNameCasteOut CastegroupIndianHindu(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameCasteOut> localVarResponse = CastegroupIndianHinduWithHttpInfo(subDivisionIso31662, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameCasteOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameCasteOut> CastegroupIndianHinduWithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndianHindu");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->CastegroupIndianHindu");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->CastegroupIndianHindu");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianHindu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameCasteOut>("/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianHindu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameCasteOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameCasteOut> CastegroupIndianHinduAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameCasteOut> localVarResponse = await CastegroupIndianHinduWithHttpInfoAsync(subDivisionIso31662, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameCasteOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameCasteOut>> CastegroupIndianHinduWithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->CastegroupIndianHindu");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->CastegroupIndianHindu");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->CastegroupIndianHindu");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.CastegroupIndianHindu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameCasteOut>("/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CastegroupIndianHindu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameReligionedOut</returns>
        public PersonalNameReligionedOut Religion(string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> localVarResponse = ReligionWithHttpInfo(subDivisionIso31662, personalNameFull);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> ReligionWithHttpInfo(string subDivisionIso31662, string personalNameFull, int operationIndex = 0)
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->Religion");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling IndianApi->Religion");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.Religion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameReligionedOut>("/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameReligionedOut> ReligionAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameReligionedOut> localVarResponse = await ReligionWithHttpInfoAsync(subDivisionIso31662, personalNameFull, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="personalNameFull"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameReligionedOut>> ReligionWithHttpInfoAsync(string subDivisionIso31662, string personalNameFull, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->Religion");
            }

            // verify the required parameter 'personalNameFull' is set
            if (personalNameFull == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'personalNameFull' when calling IndianApi->Religion");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("personalNameFull", App.Namsor.Client.ClientUtils.ParameterToString(personalNameFull)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.Religion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameReligionedOut>("/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameReligionedOut</returns>
        public FirstLastNameReligionedOut Religion1(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> localVarResponse = Religion1WithHttpInfo(subDivisionIso31662, firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> Religion1WithHttpInfo(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->Religion1");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->Religion1");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->Religion1");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.Religion1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameReligionedOut>("/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameReligionedOut> Religion1Async(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut> localVarResponse = await Religion1WithHttpInfoAsync(subDivisionIso31662, firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subDivisionIso31662"></param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameReligionedOut>> Religion1WithHttpInfoAsync(string subDivisionIso31662, string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subDivisionIso31662' is set
            if (subDivisionIso31662 == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'subDivisionIso31662' when calling IndianApi->Religion1");
            }

            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->Religion1");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->Religion1");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subDivisionIso31662", App.Namsor.Client.ClientUtils.ParameterToString(subDivisionIso31662)); // path parameter
            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.Religion1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameReligionedOut>("/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Religion1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameReligionedOut</returns>
        public BatchFirstLastNameReligionedOut ReligionIndianBatch(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> localVarResponse = ReligionIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> ReligionIndianBatchWithHttpInfo(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.ReligionIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameReligionedOut>("/api2/json/religionIndianBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameReligionedOut> ReligionIndianBatchAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut> localVarResponse = await ReligionIndianBatchWithHttpInfoAsync(batchFirstLastNameSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameReligionedOut>> ReligionIndianBatchWithHttpInfoAsync(BatchFirstLastNameSubdivisionIn? batchFirstLastNameSubdivisionIn = default(BatchFirstLastNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.ReligionIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameReligionedOut>("/api2/json/religionIndianBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameReligionedOut</returns>
        public BatchPersonalNameReligionedOut ReligionIndianFullBatch(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> localVarResponse = ReligionIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameReligionedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> ReligionIndianFullBatchWithHttpInfo(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.ReligionIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameReligionedOut>("/api2/json/religionIndianFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameReligionedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameReligionedOut> ReligionIndianFullBatchAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut> localVarResponse = await ReligionIndianFullBatchWithHttpInfoAsync(batchPersonalNameSubdivisionIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameSubdivisionIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameReligionedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameReligionedOut>> ReligionIndianFullBatchWithHttpInfoAsync(BatchPersonalNameSubdivisionIn? batchPersonalNameSubdivisionIn = default(BatchPersonalNameSubdivisionIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameSubdivisionIn;

            localVarRequestOptions.Operation = "IndianApi.ReligionIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameReligionedOut>("/api2/json/religionIndianFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReligionIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGeoSubclassificationOut</returns>
        public FirstLastNameGeoSubclassificationOut SubclassificationIndian(string firstName, string lastName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = SubclassificationIndianWithHttpInfo(firstName, lastName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> SubclassificationIndianWithHttpInfo(string firstName, string lastName, int operationIndex = 0)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->SubclassificationIndian");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->SubclassificationIndian");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndian";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationIndian/{firstName}/{lastName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndian", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGeoSubclassificationOut> SubclassificationIndianAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut> localVarResponse = await SubclassificationIndianWithHttpInfoAsync(firstName, lastName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGeoSubclassificationOut>> SubclassificationIndianWithHttpInfoAsync(string firstName, string lastName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'firstName' when calling IndianApi->SubclassificationIndian");
            }

            // verify the required parameter 'lastName' is set
            if (lastName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'lastName' when calling IndianApi->SubclassificationIndian");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("firstName", App.Namsor.Client.ClientUtils.ParameterToString(firstName)); // path parameter
            localVarRequestOptions.PathParameters.Add("lastName", App.Namsor.Client.ClientUtils.ParameterToString(lastName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndian";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationIndian/{firstName}/{lastName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndian", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGeoSubclassificationOut</returns>
        public BatchFirstLastNameGeoSubclassificationOut SubclassificationIndianBatch(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> localVarResponse = SubclassificationIndianBatchWithHttpInfo(batchFirstLastNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> SubclassificationIndianBatchWithHttpInfo(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationIndianBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGeoSubclassificationOut> SubclassificationIndianBatchAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut> localVarResponse = await SubclassificationIndianBatchWithHttpInfoAsync(batchFirstLastNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGeoSubclassificationOut>> SubclassificationIndianBatchWithHttpInfoAsync(BatchFirstLastNameGeoIn? batchFirstLastNameGeoIn = default(BatchFirstLastNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGeoIn;

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGeoSubclassificationOut>("/api2/json/subclassificationIndianBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGeoSubclassificationOut</returns>
        public PersonalNameGeoSubclassificationOut SubclassificationIndianFull(string fullName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGeoSubclassificationOut> localVarResponse = SubclassificationIndianFullWithHttpInfo(fullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGeoSubclassificationOut> SubclassificationIndianFullWithHttpInfo(string fullName, int operationIndex = 0)
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling IndianApi->SubclassificationIndianFull");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGeoSubclassificationOut>("/api2/json/subclassificationIndianFull/{fullName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGeoSubclassificationOut> SubclassificationIndianFullAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGeoSubclassificationOut> localVarResponse = await SubclassificationIndianFullWithHttpInfoAsync(fullName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fullName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGeoSubclassificationOut>> SubclassificationIndianFullWithHttpInfoAsync(string fullName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fullName' is set
            if (fullName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'fullName' when calling IndianApi->SubclassificationIndianFull");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fullName", App.Namsor.Client.ClientUtils.ParameterToString(fullName)); // path parameter

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianFull";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGeoSubclassificationOut>("/api2/json/subclassificationIndianFull/{fullName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianFull", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGeoSubclassificationOut</returns>
        public BatchPersonalNameGeoSubclassificationOut SubclassificationIndianFullBatch(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> localVarResponse = SubclassificationIndianFullBatchWithHttpInfo(batchPersonalNameGeoIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGeoSubclassificationOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> SubclassificationIndianFullBatchWithHttpInfo(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGeoSubclassificationOut>("/api2/json/subclassificationIndianFullBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGeoSubclassificationOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGeoSubclassificationOut> SubclassificationIndianFullBatchAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut> localVarResponse = await SubclassificationIndianFullBatchWithHttpInfoAsync(batchPersonalNameGeoIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameGeoIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGeoSubclassificationOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGeoSubclassificationOut>> SubclassificationIndianFullBatchWithHttpInfoAsync(BatchPersonalNameGeoIn? batchPersonalNameGeoIn = default(BatchPersonalNameGeoIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameGeoIn;

            localVarRequestOptions.Operation = "IndianApi.SubclassificationIndianFullBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGeoSubclassificationOut>("/api2/json/subclassificationIndianFullBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubclassificationIndianFullBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
