/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using App.Namsor.Client;
using App.Namsor.Model;

namespace App.Namsor.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChineseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        NameMatchCandidatesOut ChineseNameCandidates(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        ApiResponse<NameMatchCandidatesOut> ChineseNameCandidatesWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut ChineseNameCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        BatchNameMatchCandidatesOut ChineseNameCandidatesGenderBatch(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchWithHttpInfo(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        NameMatchCandidatesOut ChineseNameGenderCandidates(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        ApiResponse<NameMatchCandidatesOut> ChineseNameGenderCandidatesWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0);
        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchedOut</returns>
        NameMatchedOut ChineseNameMatch(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0);

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchedOut</returns>
        ApiResponse<NameMatchedOut> ChineseNameMatchWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0);
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchedOut</returns>
        BatchNameMatchedOut ChineseNameMatchBatch(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchedOut</returns>
        ApiResponse<BatchNameMatchedOut> ChineseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        PersonalNameGenderedOut GenderChineseName(string chineseName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        ApiResponse<PersonalNameGenderedOut> GenderChineseNameWithHttpInfo(string chineseName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        BatchPersonalNameGenderedOut GenderChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        ApiResponse<BatchPersonalNameGenderedOut> GenderChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        FirstLastNameGenderedOut GenderChineseNamePinyin(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        ApiResponse<FirstLastNameGenderedOut> GenderChineseNamePinyinWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0);
        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        BatchFirstLastNameGenderedOut GenderChineseNamePinyinBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        ApiResponse<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut ParseChineseName(string chineseName, int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> ParseChineseNameWithHttpInfo(string chineseName, int operationIndex = 0);
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut ParseChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> ParseChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        PersonalNameParsedOut PinyinChineseName(string chineseName, int operationIndex = 0);

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        ApiResponse<PersonalNameParsedOut> PinyinChineseNameWithHttpInfo(string chineseName, int operationIndex = 0);
        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        BatchPersonalNameParsedOut PinyinChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        ApiResponse<BatchPersonalNameParsedOut> PinyinChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChineseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<NameMatchCandidatesOut> ChineseNameCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchCandidatesOut>> ChineseNameCandidatesWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesGenderBatchWithHttpInfoAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        System.Threading.Tasks.Task<NameMatchCandidatesOut> ChineseNameGenderCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchCandidatesOut>> ChineseNameGenderCandidatesWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchedOut</returns>
        System.Threading.Tasks.Task<NameMatchedOut> ChineseNameMatchAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<NameMatchedOut>> ChineseNameMatchWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchedOut</returns>
        System.Threading.Tasks.Task<BatchNameMatchedOut> ChineseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchNameMatchedOut>> ChineseNameMatchBatchWithHttpInfoAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameGenderedOut>> GenderChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameGenderedOut>> GenderChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderChineseNamePinyinAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstLastNameGenderedOut>> GenderChineseNamePinyinWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchFirstLastNameGenderedOut>> GenderChineseNamePinyinBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> ParseChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> ParseChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> ParseChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<PersonalNameParsedOut> PinyinChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalNameParsedOut>> PinyinChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        System.Threading.Tasks.Task<BatchPersonalNameParsedOut> PinyinChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPersonalNameParsedOut>> PinyinChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChineseApi : IChineseApiSync, IChineseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChineseApi : IChineseApi
    {
        private App.Namsor.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChineseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChineseApi(string basePath)
        {
            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                new App.Namsor.Client.Configuration { BasePath = basePath }
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChineseApi(App.Namsor.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = App.Namsor.Client.Configuration.MergeConfigurations(
                App.Namsor.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new App.Namsor.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChineseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChineseApi(App.Namsor.Client.ISynchronousClient client, App.Namsor.Client.IAsynchronousClient asyncClient, App.Namsor.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = App.Namsor.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public App.Namsor.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public App.Namsor.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public App.Namsor.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public App.Namsor.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        public NameMatchCandidatesOut ChineseNameCandidates(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = ChineseNameCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> ChineseNameCandidatesWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameCandidates");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameCandidates");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchCandidatesOut>("/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<NameMatchCandidatesOut> ChineseNameCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = await ChineseNameCandidatesWithHttpInfoAsync(chineseSurnameLatin, chineseGivenNameLatin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchCandidatesOut>> ChineseNameCandidatesWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameCandidates");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameCandidates");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchCandidatesOut>("/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut ChineseNameCandidatesBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = ChineseNameCandidatesBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchCandidatesOut>("/api2/json/chineseNameCandidatesBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await ChineseNameCandidatesBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidatesBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchCandidatesOut>("/api2/json/chineseNameCandidatesBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidatesBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchCandidatesOut</returns>
        public BatchNameMatchCandidatesOut ChineseNameCandidatesGenderBatch(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = ChineseNameCandidatesGenderBatchWithHttpInfo(batchFirstLastNameGenderIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchWithHttpInfo(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGenderIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidatesGenderBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchCandidatesOut>("/api2/json/chineseNameCandidatesGenderBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidatesGenderBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchCandidatesOut> ChineseNameCandidatesGenderBatchAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut> localVarResponse = await ChineseNameCandidatesGenderBatchWithHttpInfoAsync(batchFirstLastNameGenderIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming. 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameGenderIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchCandidatesOut>> ChineseNameCandidatesGenderBatchWithHttpInfoAsync(BatchFirstLastNameGenderIn? batchFirstLastNameGenderIn = default(BatchFirstLastNameGenderIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameGenderIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameCandidatesGenderBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchCandidatesOut>("/api2/json/chineseNameCandidatesGenderBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameCandidatesGenderBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchCandidatesOut</returns>
        public NameMatchCandidatesOut ChineseNameGenderCandidates(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = ChineseNameGenderCandidatesWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, knownGender);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchCandidatesOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> ChineseNameGenderCandidatesWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            }

            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'knownGender' when calling ChineseApi->ChineseNameGenderCandidates");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("knownGender", App.Namsor.Client.ClientUtils.ParameterToString(knownGender)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameGenderCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchCandidatesOut>("/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameGenderCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchCandidatesOut</returns>
        public async System.Threading.Tasks.Task<NameMatchCandidatesOut> ChineseNameGenderCandidatesAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchCandidatesOut> localVarResponse = await ChineseNameGenderCandidatesWithHttpInfoAsync(chineseSurnameLatin, chineseGivenNameLatin, knownGender, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="knownGender"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchCandidatesOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchCandidatesOut>> ChineseNameGenderCandidatesWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string knownGender, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameGenderCandidates");
            }

            // verify the required parameter 'knownGender' is set
            if (knownGender == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'knownGender' when calling ChineseApi->ChineseNameGenderCandidates");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("knownGender", App.Namsor.Client.ClientUtils.ParameterToString(knownGender)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameGenderCandidates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchCandidatesOut>("/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameGenderCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NameMatchedOut</returns>
        public NameMatchedOut ChineseNameMatch(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<NameMatchedOut> localVarResponse = ChineseNameMatchWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin, chineseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NameMatchedOut</returns>
        public App.Namsor.Client.ApiResponse<NameMatchedOut> ChineseNameMatchWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameMatch");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameMatch");
            }

            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ChineseNameMatch");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NameMatchedOut>("/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NameMatchedOut</returns>
        public async System.Threading.Tasks.Task<NameMatchedOut> ChineseNameMatchAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<NameMatchedOut> localVarResponse = await ChineseNameMatchWithHttpInfoAsync(chineseSurnameLatin, chineseGivenNameLatin, chineseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NameMatchedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<NameMatchedOut>> ChineseNameMatchWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->ChineseNameMatch");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->ChineseNameMatch");
            }

            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ChineseNameMatch");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NameMatchedOut>("/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchNameMatchedOut</returns>
        public BatchNameMatchedOut ChineseNameMatchBatch(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchedOut> localVarResponse = ChineseNameMatchBatchWithHttpInfo(batchMatchPersonalFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchNameMatchedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchNameMatchedOut> ChineseNameMatchBatchWithHttpInfo(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchMatchPersonalFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameMatchBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchNameMatchedOut>("/api2/json/chineseNameMatchBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameMatchBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchNameMatchedOut</returns>
        public async System.Threading.Tasks.Task<BatchNameMatchedOut> ChineseNameMatchBatchAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchNameMatchedOut> localVarResponse = await ChineseNameMatchBatchWithHttpInfoAsync(batchMatchPersonalFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchMatchPersonalFirstLastNameIn">A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchNameMatchedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchNameMatchedOut>> ChineseNameMatchBatchWithHttpInfoAsync(BatchMatchPersonalFirstLastNameIn? batchMatchPersonalFirstLastNameIn = default(BatchMatchPersonalFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchMatchPersonalFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ChineseNameMatchBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchNameMatchedOut>("/api2/json/chineseNameMatchBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChineseNameMatchBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameGenderedOut</returns>
        public PersonalNameGenderedOut GenderChineseName(string chineseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = GenderChineseNameWithHttpInfo(chineseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> GenderChineseNameWithHttpInfo(string chineseName, int operationIndex = 0)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->GenderChineseName");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameGenderedOut>("/api2/json/genderChineseName/{chineseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameGenderedOut> GenderChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameGenderedOut> localVarResponse = await GenderChineseNameWithHttpInfoAsync(chineseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese full name ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameGenderedOut>> GenderChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->GenderChineseName");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameGenderedOut>("/api2/json/genderChineseName/{chineseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameGenderedOut</returns>
        public BatchPersonalNameGenderedOut GenderChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = GenderChineseNameBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> GenderChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameGenderedOut>("/api2/json/genderChineseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameGenderedOut> GenderChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut> localVarResponse = await GenderChineseNameBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 full names ex. 王晓明 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names, with a country ISO2 code (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameGenderedOut>> GenderChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameGenderedOut>("/api2/json/genderChineseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirstLastNameGenderedOut</returns>
        public FirstLastNameGenderedOut GenderChineseNamePinyin(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = GenderChineseNamePinyinWithHttpInfo(chineseSurnameLatin, chineseGivenNameLatin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> GenderChineseNamePinyinWithHttpInfo(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0)
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNamePinyin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirstLastNameGenderedOut>("/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNamePinyin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<FirstLastNameGenderedOut> GenderChineseNamePinyinAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut> localVarResponse = await GenderChineseNamePinyinWithHttpInfoAsync(chineseSurnameLatin, chineseGivenNameLatin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of a Chinese name in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseSurnameLatin"></param>
        /// <param name="chineseGivenNameLatin"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<FirstLastNameGenderedOut>> GenderChineseNamePinyinWithHttpInfoAsync(string chineseSurnameLatin, string chineseGivenNameLatin, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseSurnameLatin' is set
            if (chineseSurnameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseSurnameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            }

            // verify the required parameter 'chineseGivenNameLatin' is set
            if (chineseGivenNameLatin == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseGivenNameLatin' when calling ChineseApi->GenderChineseNamePinyin");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseSurnameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseSurnameLatin)); // path parameter
            localVarRequestOptions.PathParameters.Add("chineseGivenNameLatin", App.Namsor.Client.ClientUtils.ParameterToString(chineseGivenNameLatin)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNamePinyin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirstLastNameGenderedOut>("/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNamePinyin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchFirstLastNameGenderedOut</returns>
        public BatchFirstLastNameGenderedOut GenderChineseNamePinyinBatch(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = GenderChineseNamePinyinBatchWithHttpInfo(batchFirstLastNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchFirstLastNameGenderedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchWithHttpInfo(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNamePinyinBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchFirstLastNameGenderedOut>("/api2/json/genderChineseNamePinyinBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNamePinyinBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchFirstLastNameGenderedOut</returns>
        public async System.Threading.Tasks.Task<BatchFirstLastNameGenderedOut> GenderChineseNamePinyinBatchAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut> localVarResponse = await GenderChineseNamePinyinBatchWithHttpInfoAsync(batchFirstLastNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchFirstLastNameIn">A list of names, with country code. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchFirstLastNameGenderedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchFirstLastNameGenderedOut>> GenderChineseNamePinyinBatchWithHttpInfoAsync(BatchFirstLastNameIn? batchFirstLastNameIn = default(BatchFirstLastNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchFirstLastNameIn;

            localVarRequestOptions.Operation = "ChineseApi.GenderChineseNamePinyinBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchFirstLastNameGenderedOut>("/api2/json/genderChineseNamePinyinBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenderChineseNamePinyinBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut ParseChineseName(string chineseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = ParseChineseNameWithHttpInfo(chineseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameParsedOut> ParseChineseNameWithHttpInfo(string chineseName, int operationIndex = 0)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ParseChineseName");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ParseChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameParsedOut>("/api2/json/parseChineseName/{chineseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> ParseChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = await ParseChineseNameWithHttpInfoAsync(chineseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameParsedOut>> ParseChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->ParseChineseName");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.ParseChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameParsedOut>("/api2/json/parseChineseName/{chineseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut ParseChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = ParseChineseNameBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> ParseChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ParseChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameParsedOut>("/api2/json/parseChineseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> ParseChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await ParseChineseNameBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of personal names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut>> ParseChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.ParseChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameParsedOut>("/api2/json/parseChineseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalNameParsedOut</returns>
        public PersonalNameParsedOut PinyinChineseName(string chineseName, int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = PinyinChineseNameWithHttpInfo(chineseName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<PersonalNameParsedOut> PinyinChineseNameWithHttpInfo(string chineseName, int operationIndex = 0)
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->PinyinChineseName");
            }

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.PinyinChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalNameParsedOut>("/api2/json/pinyinChineseName/{chineseName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PinyinChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<PersonalNameParsedOut> PinyinChineseNameAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<PersonalNameParsedOut> localVarResponse = await PinyinChineseNameWithHttpInfoAsync(chineseName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name) 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chineseName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<PersonalNameParsedOut>> PinyinChineseNameWithHttpInfoAsync(string chineseName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'chineseName' is set
            if (chineseName == null)
            {
                throw new App.Namsor.Client.ApiException(400, "Missing required parameter 'chineseName' when calling ChineseApi->PinyinChineseName");
            }


            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chineseName", App.Namsor.Client.ClientUtils.ParameterToString(chineseName)); // path parameter

            localVarRequestOptions.Operation = "ChineseApi.PinyinChineseName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalNameParsedOut>("/api2/json/pinyinChineseName/{chineseName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PinyinChineseName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPersonalNameParsedOut</returns>
        public BatchPersonalNameParsedOut PinyinChineseNameBatch(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = PinyinChineseNameBatchWithHttpInfo(batchPersonalNameIn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPersonalNameParsedOut</returns>
        public App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> PinyinChineseNameBatchWithHttpInfo(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0)
        {
            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.PinyinChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPersonalNameParsedOut>("/api2/json/pinyinChineseNameBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PinyinChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPersonalNameParsedOut</returns>
        public async System.Threading.Tasks.Task<BatchPersonalNameParsedOut> PinyinChineseNameBatchAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut> localVarResponse = await PinyinChineseNameBatchWithHttpInfoAsync(batchPersonalNameIn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name). 
        /// </summary>
        /// <exception cref="App.Namsor.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchPersonalNameIn">A list of Chinese names (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPersonalNameParsedOut)</returns>
        public async System.Threading.Tasks.Task<App.Namsor.Client.ApiResponse<BatchPersonalNameParsedOut>> PinyinChineseNameBatchWithHttpInfoAsync(BatchPersonalNameIn? batchPersonalNameIn = default(BatchPersonalNameIn?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            App.Namsor.Client.RequestOptions localVarRequestOptions = new App.Namsor.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = App.Namsor.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = App.Namsor.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchPersonalNameIn;

            localVarRequestOptions.Operation = "ChineseApi.PinyinChineseNameBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPersonalNameParsedOut>("/api2/json/pinyinChineseNameBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PinyinChineseNameBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
