/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// APIPeriodUsageOut
    /// </summary>
    [DataContract(Name = "APIPeriodUsageOut")]
    public partial class APIPeriodUsageOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIPeriodUsageOut" /> class.
        /// </summary>
        /// <param name="subscription">subscription.</param>
        /// <param name="billingPeriod">billingPeriod.</param>
        /// <param name="overageExclTax">Overage amount including any tax..</param>
        /// <param name="overageInclTax">Overage amount including tax (if applicable)..</param>
        /// <param name="overageCurrency">Currency of the overage amount..</param>
        /// <param name="overageQuantity">Quantity above monthly quota of the current subscritpion, in units..</param>
        public APIPeriodUsageOut(APIPlanSubscriptionOut subscription = default(APIPlanSubscriptionOut), APIBillingPeriodUsageOut billingPeriod = default(APIBillingPeriodUsageOut), double overageExclTax = default(double), double overageInclTax = default(double), string overageCurrency = default(string), long overageQuantity = default(long))
        {
            this.Subscription = subscription;
            this.BillingPeriod = billingPeriod;
            this.OverageExclTax = overageExclTax;
            this.OverageInclTax = overageInclTax;
            this.OverageCurrency = overageCurrency;
            this.OverageQuantity = overageQuantity;
        }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = false)]
        public APIPlanSubscriptionOut Subscription { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name = "billingPeriod", EmitDefaultValue = false)]
        public APIBillingPeriodUsageOut BillingPeriod { get; set; }

        /// <summary>
        /// Overage amount including any tax.
        /// </summary>
        /// <value>Overage amount including any tax.</value>
        [DataMember(Name = "overageExclTax", EmitDefaultValue = false)]
        public double OverageExclTax { get; set; }

        /// <summary>
        /// Overage amount including tax (if applicable).
        /// </summary>
        /// <value>Overage amount including tax (if applicable).</value>
        [DataMember(Name = "overageInclTax", EmitDefaultValue = false)]
        public double OverageInclTax { get; set; }

        /// <summary>
        /// Currency of the overage amount.
        /// </summary>
        /// <value>Currency of the overage amount.</value>
        [DataMember(Name = "overageCurrency", EmitDefaultValue = false)]
        public string OverageCurrency { get; set; }

        /// <summary>
        /// Quantity above monthly quota of the current subscritpion, in units.
        /// </summary>
        /// <value>Quantity above monthly quota of the current subscritpion, in units.</value>
        [DataMember(Name = "overageQuantity", EmitDefaultValue = false)]
        public long OverageQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIPeriodUsageOut {\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  OverageExclTax: ").Append(OverageExclTax).Append("\n");
            sb.Append("  OverageInclTax: ").Append(OverageInclTax).Append("\n");
            sb.Append("  OverageCurrency: ").Append(OverageCurrency).Append("\n");
            sb.Append("  OverageQuantity: ").Append(OverageQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
