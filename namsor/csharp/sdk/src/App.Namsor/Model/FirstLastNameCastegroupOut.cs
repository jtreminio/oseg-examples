/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY caste group from a personal Hindu/Indian name.
    /// </summary>
    [DataContract(Name = "FirstLastNameCastegroupOut")]
    public partial class FirstLastNameCastegroupOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameCastegroupOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="castegroup">Most likely caste group.</param>
        /// <param name="castegroupAlt">Second best alternative : caste group .</param>
        /// <param name="castegroupTop">List caste group (top 10).</param>
        /// <param name="score">Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        /// <param name="probabilityCalibrated">The calibrated probability for caste to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        /// <param name="probabilityAltCalibrated">The calibrated probability for caste OR casteAlt to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        public FirstLastNameCastegroupOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), string castegroup = default(string), string castegroupAlt = default(string), List<string> castegroupTop = default(List<string>), double score = default(double), double probabilityCalibrated = default(double), double probabilityAltCalibrated = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Castegroup = castegroup;
            this.CastegroupAlt = castegroupAlt;
            this.CastegroupTop = castegroupTop;
            this.Score = score;
            this.ProbabilityCalibrated = probabilityCalibrated;
            this.ProbabilityAltCalibrated = probabilityAltCalibrated;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Most likely caste group
        /// </summary>
        /// <value>Most likely caste group</value>
        [DataMember(Name = "castegroup", EmitDefaultValue = false)]
        public string Castegroup { get; set; }

        /// <summary>
        /// Second best alternative : caste group 
        /// </summary>
        /// <value>Second best alternative : caste group </value>
        [DataMember(Name = "castegroupAlt", EmitDefaultValue = false)]
        public string CastegroupAlt { get; set; }

        /// <summary>
        /// List caste group (top 10)
        /// </summary>
        /// <value>List caste group (top 10)</value>
        [DataMember(Name = "castegroupTop", EmitDefaultValue = false)]
        public List<string> CastegroupTop { get; set; }

        /// <summary>
        /// Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// The calibrated probability for caste to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for caste to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityCalibrated", EmitDefaultValue = false)]
        public double ProbabilityCalibrated { get; set; }

        /// <summary>
        /// The calibrated probability for caste OR casteAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for caste OR casteAlt to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityAltCalibrated", EmitDefaultValue = false)]
        public double ProbabilityAltCalibrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirstLastNameCastegroupOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Castegroup: ").Append(Castegroup).Append("\n");
            sb.Append("  CastegroupAlt: ").Append(CastegroupAlt).Append("\n");
            sb.Append("  CastegroupTop: ").Append(CastegroupTop).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("  ProbabilityAltCalibrated: ").Append(ProbabilityAltCalibrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // ProbabilityCalibrated (double) maximum
            if (this.ProbabilityCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityCalibrated (double) minimum
            if (this.ProbabilityCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityAltCalibrated (double) maximum
            if (this.ProbabilityAltCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityAltCalibrated" });
            }

            // ProbabilityAltCalibrated (double) minimum
            if (this.ProbabilityAltCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityAltCalibrated" });
            }

            yield break;
        }
    }

}
