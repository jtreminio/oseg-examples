/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Detailed usage as reported by the deduplicating API counter.
    /// </summary>
    [DataContract(Name = "APICounterV2Out")]
    public partial class APICounterV2Out : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APICounterV2Out" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="apiService">The apiService corresponds to the classifier name..</param>
        /// <param name="hostAddress">The processing hostAddress..</param>
        /// <param name="createdDateTime">The create datetime of the counter..</param>
        /// <param name="totalUsage">The usage of the counter..</param>
        /// <param name="lastFlushedDateTime">The flush datetime of the counter..</param>
        /// <param name="lastUsedDateTime">The last usage datetime of the counter..</param>
        /// <param name="serviceFeaturesUsage">Usage of special features, such as Chinese, Japanese..</param>
        public APICounterV2Out(APIKeyOut apiKey = default(APIKeyOut), string apiService = default(string), string hostAddress = default(string), long createdDateTime = default(long), long totalUsage = default(long), long lastFlushedDateTime = default(long), long lastUsedDateTime = default(long), Dictionary<string, long> serviceFeaturesUsage = default(Dictionary<string, long>))
        {
            this.ApiKey = apiKey;
            this.ApiService = apiService;
            this.HostAddress = hostAddress;
            this.CreatedDateTime = createdDateTime;
            this.TotalUsage = totalUsage;
            this.LastFlushedDateTime = lastFlushedDateTime;
            this.LastUsedDateTime = lastUsedDateTime;
            this.ServiceFeaturesUsage = serviceFeaturesUsage;
        }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "apiKey", EmitDefaultValue = false)]
        public APIKeyOut ApiKey { get; set; }

        /// <summary>
        /// The apiService corresponds to the classifier name.
        /// </summary>
        /// <value>The apiService corresponds to the classifier name.</value>
        [DataMember(Name = "apiService", EmitDefaultValue = false)]
        public string ApiService { get; set; }

        /// <summary>
        /// The processing hostAddress.
        /// </summary>
        /// <value>The processing hostAddress.</value>
        [DataMember(Name = "hostAddress", EmitDefaultValue = false)]
        public string HostAddress { get; set; }

        /// <summary>
        /// The create datetime of the counter.
        /// </summary>
        /// <value>The create datetime of the counter.</value>
        [DataMember(Name = "createdDateTime", EmitDefaultValue = false)]
        public long CreatedDateTime { get; set; }

        /// <summary>
        /// The usage of the counter.
        /// </summary>
        /// <value>The usage of the counter.</value>
        [DataMember(Name = "totalUsage", EmitDefaultValue = false)]
        public long TotalUsage { get; set; }

        /// <summary>
        /// The flush datetime of the counter.
        /// </summary>
        /// <value>The flush datetime of the counter.</value>
        [DataMember(Name = "lastFlushedDateTime", EmitDefaultValue = false)]
        public long LastFlushedDateTime { get; set; }

        /// <summary>
        /// The last usage datetime of the counter.
        /// </summary>
        /// <value>The last usage datetime of the counter.</value>
        [DataMember(Name = "lastUsedDateTime", EmitDefaultValue = false)]
        public long LastUsedDateTime { get; set; }

        /// <summary>
        /// Usage of special features, such as Chinese, Japanese.
        /// </summary>
        /// <value>Usage of special features, such as Chinese, Japanese.</value>
        [DataMember(Name = "serviceFeaturesUsage", EmitDefaultValue = false)]
        public Dictionary<string, long> ServiceFeaturesUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APICounterV2Out {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiService: ").Append(ApiService).Append("\n");
            sb.Append("  HostAddress: ").Append(HostAddress).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  TotalUsage: ").Append(TotalUsage).Append("\n");
            sb.Append("  LastFlushedDateTime: ").Append(LastFlushedDateTime).Append("\n");
            sb.Append("  LastUsedDateTime: ").Append(LastUsedDateTime).Append("\n");
            sb.Append("  ServiceFeaturesUsage: ").Append(ServiceFeaturesUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
