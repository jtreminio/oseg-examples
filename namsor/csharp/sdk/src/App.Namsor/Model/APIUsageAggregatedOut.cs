/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// APIUsageAggregatedOut
    /// </summary>
    [DataContract(Name = "APIUsageAggregatedOut")]
    public partial class APIUsageAggregatedOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIUsageAggregatedOut" /> class.
        /// </summary>
        /// <param name="timeUnit">Time unit is DAY, WEEK or MONTH depending on prior usage.</param>
        /// <param name="periodStart">Start datetime of the reporting period.</param>
        /// <param name="periodEnd">End datetime of the reporting period.</param>
        /// <param name="totalUsage">Total usage in the current period.</param>
        /// <param name="historyTruncated">If the history was truncaded due to data limit.</param>
        /// <param name="data">Data points : usage per DAY, WEEK or MONTH and per apiService.</param>
        /// <param name="colHeaders">apiServices as column headers .</param>
        /// <param name="rowHeaders">dates as row headers .</param>
        public APIUsageAggregatedOut(string timeUnit = default(string), long periodStart = default(long), long periodEnd = default(long), long totalUsage = default(long), bool historyTruncated = default(bool), List<List<int>> data = default(List<List<int>>), List<string> colHeaders = default(List<string>), List<string> rowHeaders = default(List<string>))
        {
            this.TimeUnit = timeUnit;
            this.PeriodStart = periodStart;
            this.PeriodEnd = periodEnd;
            this.TotalUsage = totalUsage;
            this.HistoryTruncated = historyTruncated;
            this.Data = data;
            this.ColHeaders = colHeaders;
            this.RowHeaders = rowHeaders;
        }

        /// <summary>
        /// Time unit is DAY, WEEK or MONTH depending on prior usage
        /// </summary>
        /// <value>Time unit is DAY, WEEK or MONTH depending on prior usage</value>
        [DataMember(Name = "timeUnit", EmitDefaultValue = false)]
        public string TimeUnit { get; set; }

        /// <summary>
        /// Start datetime of the reporting period
        /// </summary>
        /// <value>Start datetime of the reporting period</value>
        [DataMember(Name = "periodStart", EmitDefaultValue = false)]
        public long PeriodStart { get; set; }

        /// <summary>
        /// End datetime of the reporting period
        /// </summary>
        /// <value>End datetime of the reporting period</value>
        [DataMember(Name = "periodEnd", EmitDefaultValue = false)]
        public long PeriodEnd { get; set; }

        /// <summary>
        /// Total usage in the current period
        /// </summary>
        /// <value>Total usage in the current period</value>
        [DataMember(Name = "totalUsage", EmitDefaultValue = false)]
        public long TotalUsage { get; set; }

        /// <summary>
        /// If the history was truncaded due to data limit
        /// </summary>
        /// <value>If the history was truncaded due to data limit</value>
        [DataMember(Name = "historyTruncated", EmitDefaultValue = true)]
        public bool HistoryTruncated { get; set; }

        /// <summary>
        /// Data points : usage per DAY, WEEK or MONTH and per apiService
        /// </summary>
        /// <value>Data points : usage per DAY, WEEK or MONTH and per apiService</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<List<int>> Data { get; set; }

        /// <summary>
        /// apiServices as column headers 
        /// </summary>
        /// <value>apiServices as column headers </value>
        [DataMember(Name = "colHeaders", EmitDefaultValue = false)]
        public List<string> ColHeaders { get; set; }

        /// <summary>
        /// dates as row headers 
        /// </summary>
        /// <value>dates as row headers </value>
        [DataMember(Name = "rowHeaders", EmitDefaultValue = false)]
        public List<string> RowHeaders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIUsageAggregatedOut {\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  TotalUsage: ").Append(TotalUsage).Append("\n");
            sb.Append("  HistoryTruncated: ").Append(HistoryTruncated).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ColHeaders: ").Append(ColHeaders).Append("\n");
            sb.Append("  RowHeaders: ").Append(RowHeaders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
