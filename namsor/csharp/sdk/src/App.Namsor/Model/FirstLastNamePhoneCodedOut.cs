/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.
    /// </summary>
    [DataContract(Name = "FirstLastNamePhoneCodedOut")]
    public partial class FirstLastNamePhoneCodedOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNamePhoneCodedOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="internationalPhoneNumberVerified">The normalized phone number, verified using libphonenumber..</param>
        /// <param name="phoneCountryIso2Verified">The phone ISO2 country code, verified using libphonenumber..</param>
        /// <param name="phoneCountryCode">The phone country code of the phone number, verified using libphonenumber..</param>
        /// <param name="phoneCountryCodeAlt">The best alternative phone country code of the phone number..</param>
        /// <param name="phoneCountryIso2">The likely country of the phone number..</param>
        /// <param name="phoneCountryIso2Alt">The best alternative country of the phone number..</param>
        /// <param name="originCountryIso2">The likely country of origin of the name..</param>
        /// <param name="originCountryIso2Alt">The best alternative country of origin of the name..</param>
        /// <param name="phoneNumber">The input phone number..</param>
        /// <param name="verified">Indicates if the phone number could be positively verified using libphonenumber..</param>
        /// <param name="score">Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        /// <param name="countryIso2">countryIso2.</param>
        public FirstLastNamePhoneCodedOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), string internationalPhoneNumberVerified = default(string), string phoneCountryIso2Verified = default(string), int phoneCountryCode = default(int), int phoneCountryCodeAlt = default(int), string phoneCountryIso2 = default(string), string phoneCountryIso2Alt = default(string), string originCountryIso2 = default(string), string originCountryIso2Alt = default(string), string phoneNumber = default(string), bool verified = default(bool), double score = default(double), string countryIso2 = default(string))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.InternationalPhoneNumberVerified = internationalPhoneNumberVerified;
            this.PhoneCountryIso2Verified = phoneCountryIso2Verified;
            this.PhoneCountryCode = phoneCountryCode;
            this.PhoneCountryCodeAlt = phoneCountryCodeAlt;
            this.PhoneCountryIso2 = phoneCountryIso2;
            this.PhoneCountryIso2Alt = phoneCountryIso2Alt;
            this.OriginCountryIso2 = originCountryIso2;
            this.OriginCountryIso2Alt = originCountryIso2Alt;
            this.PhoneNumber = phoneNumber;
            this.Verified = verified;
            this.Score = score;
            this.CountryIso2 = countryIso2;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The normalized phone number, verified using libphonenumber.
        /// </summary>
        /// <value>The normalized phone number, verified using libphonenumber.</value>
        [DataMember(Name = "internationalPhoneNumberVerified", EmitDefaultValue = false)]
        public string InternationalPhoneNumberVerified { get; set; }

        /// <summary>
        /// The phone ISO2 country code, verified using libphonenumber.
        /// </summary>
        /// <value>The phone ISO2 country code, verified using libphonenumber.</value>
        [DataMember(Name = "phoneCountryIso2Verified", EmitDefaultValue = false)]
        public string PhoneCountryIso2Verified { get; set; }

        /// <summary>
        /// The phone country code of the phone number, verified using libphonenumber.
        /// </summary>
        /// <value>The phone country code of the phone number, verified using libphonenumber.</value>
        [DataMember(Name = "phoneCountryCode", EmitDefaultValue = false)]
        public int PhoneCountryCode { get; set; }

        /// <summary>
        /// The best alternative phone country code of the phone number.
        /// </summary>
        /// <value>The best alternative phone country code of the phone number.</value>
        [DataMember(Name = "phoneCountryCodeAlt", EmitDefaultValue = false)]
        public int PhoneCountryCodeAlt { get; set; }

        /// <summary>
        /// The likely country of the phone number.
        /// </summary>
        /// <value>The likely country of the phone number.</value>
        [DataMember(Name = "phoneCountryIso2", EmitDefaultValue = false)]
        public string PhoneCountryIso2 { get; set; }

        /// <summary>
        /// The best alternative country of the phone number.
        /// </summary>
        /// <value>The best alternative country of the phone number.</value>
        [DataMember(Name = "phoneCountryIso2Alt", EmitDefaultValue = false)]
        public string PhoneCountryIso2Alt { get; set; }

        /// <summary>
        /// The likely country of origin of the name.
        /// </summary>
        /// <value>The likely country of origin of the name.</value>
        [DataMember(Name = "originCountryIso2", EmitDefaultValue = false)]
        public string OriginCountryIso2 { get; set; }

        /// <summary>
        /// The best alternative country of origin of the name.
        /// </summary>
        /// <value>The best alternative country of origin of the name.</value>
        [DataMember(Name = "originCountryIso2Alt", EmitDefaultValue = false)]
        public string OriginCountryIso2Alt { get; set; }

        /// <summary>
        /// The input phone number.
        /// </summary>
        /// <value>The input phone number.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Indicates if the phone number could be positively verified using libphonenumber.
        /// </summary>
        /// <value>Indicates if the phone number could be positively verified using libphonenumber.</value>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Gets or Sets CountryIso2
        /// </summary>
        [DataMember(Name = "countryIso2", EmitDefaultValue = false)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirstLastNamePhoneCodedOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  InternationalPhoneNumberVerified: ").Append(InternationalPhoneNumberVerified).Append("\n");
            sb.Append("  PhoneCountryIso2Verified: ").Append(PhoneCountryIso2Verified).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("  PhoneCountryCodeAlt: ").Append(PhoneCountryCodeAlt).Append("\n");
            sb.Append("  PhoneCountryIso2: ").Append(PhoneCountryIso2).Append("\n");
            sb.Append("  PhoneCountryIso2Alt: ").Append(PhoneCountryIso2Alt).Append("\n");
            sb.Append("  OriginCountryIso2: ").Append(OriginCountryIso2).Append("\n");
            sb.Append("  OriginCountryIso2Alt: ").Append(OriginCountryIso2Alt).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}
