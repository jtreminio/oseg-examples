/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY gender from a personal name.
    /// </summary>
    [DataContract(Name = "FirstLastNameGenderedOut")]
    public partial class FirstLastNameGenderedOut : IValidatableObject
    {
        /// <summary>
        /// Most likely gender
        /// </summary>
        /// <value>Most likely gender</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LikelyGenderEnum
        {
            /// <summary>
            /// Enum Male for value: male
            /// </summary>
            [EnumMember(Value = "male")]
            Male = 1,

            /// <summary>
            /// Enum Female for value: female
            /// </summary>
            [EnumMember(Value = "female")]
            Female = 2,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 3
        }


        /// <summary>
        /// Most likely gender
        /// </summary>
        /// <value>Most likely gender</value>
        [DataMember(Name = "likelyGender", EmitDefaultValue = false)]
        public LikelyGenderEnum? LikelyGender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameGenderedOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="likelyGender">Most likely gender.</param>
        /// <param name="genderScale">Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value..</param>
        /// <param name="score">Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        /// <param name="probabilityCalibrated">The calibrated probability for inferred gender to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        public FirstLastNameGenderedOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), LikelyGenderEnum? likelyGender = default(LikelyGenderEnum?), double genderScale = default(double), double score = default(double), double probabilityCalibrated = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.LikelyGender = likelyGender;
            this.GenderScale = genderScale;
            this.Score = score;
            this.ProbabilityCalibrated = probabilityCalibrated;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.</value>
        [DataMember(Name = "genderScale", EmitDefaultValue = false)]
        public double GenderScale { get; set; }

        /// <summary>
        /// Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// The calibrated probability for inferred gender to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for inferred gender to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityCalibrated", EmitDefaultValue = false)]
        public double ProbabilityCalibrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirstLastNameGenderedOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LikelyGender: ").Append(LikelyGender).Append("\n");
            sb.Append("  GenderScale: ").Append(GenderScale).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GenderScale (double) maximum
            if (this.GenderScale > (double)1)
            {
                yield return new ValidationResult("Invalid value for GenderScale, must be a value less than or equal to 1.", new [] { "GenderScale" });
            }

            // GenderScale (double) minimum
            if (this.GenderScale < (double)-1)
            {
                yield return new ValidationResult("Invalid value for GenderScale, must be a value greater than or equal to -1.", new [] { "GenderScale" });
            }

            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // ProbabilityCalibrated (double) maximum
            if (this.ProbabilityCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityCalibrated (double) minimum
            if (this.ProbabilityCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityCalibrated" });
            }

            yield break;
        }
    }

}
