/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// The ordered list of name matching candidates
    /// </summary>
    [DataContract(Name = "NameMatchCandidateOut")]
    public partial class NameMatchCandidateOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NameMatchCandidateOut" /> class.
        /// </summary>
        /// <param name="candidateName">The name matching candidate name.</param>
        /// <param name="probability">The name matching estimated probability..</param>
        /// <param name="predScoreGivenName">The given name prediction score..</param>
        /// <param name="predScoreFamilyName">The family name prediction score..</param>
        public NameMatchCandidateOut(string candidateName = default(string), double probability = default(double), double predScoreGivenName = default(double), double predScoreFamilyName = default(double))
        {
            this.CandidateName = candidateName;
            this.Probability = probability;
            this.PredScoreGivenName = predScoreGivenName;
            this.PredScoreFamilyName = predScoreFamilyName;
        }

        /// <summary>
        /// The name matching candidate name
        /// </summary>
        /// <value>The name matching candidate name</value>
        [DataMember(Name = "candidateName", EmitDefaultValue = false)]
        public string CandidateName { get; set; }

        /// <summary>
        /// The name matching estimated probability.
        /// </summary>
        /// <value>The name matching estimated probability.</value>
        [DataMember(Name = "probability", EmitDefaultValue = false)]
        public double Probability { get; set; }

        /// <summary>
        /// The given name prediction score.
        /// </summary>
        /// <value>The given name prediction score.</value>
        [DataMember(Name = "predScoreGivenName", EmitDefaultValue = false)]
        public double PredScoreGivenName { get; set; }

        /// <summary>
        /// The family name prediction score.
        /// </summary>
        /// <value>The family name prediction score.</value>
        [DataMember(Name = "predScoreFamilyName", EmitDefaultValue = false)]
        public double PredScoreFamilyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NameMatchCandidateOut {\n");
            sb.Append("  CandidateName: ").Append(CandidateName).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  PredScoreGivenName: ").Append(PredScoreGivenName).Append("\n");
            sb.Append("  PredScoreFamilyName: ").Append(PredScoreFamilyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
