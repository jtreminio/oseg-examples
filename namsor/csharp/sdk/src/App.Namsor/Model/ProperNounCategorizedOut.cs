/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Classified typed proper names
    /// </summary>
    [DataContract(Name = "ProperNounCategorizedOut")]
    public partial class ProperNounCategorizedOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProperNounCategorizedOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="name">The input name.</param>
        /// <param name="commonType">The most likely common name type.</param>
        /// <param name="commonTypeAlt">Best alternative for : The most likely common name type.</param>
        /// <param name="score">Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        public ProperNounCategorizedOut(string script = default(string), string id = default(string), string explanation = default(string), string name = default(string), string commonType = default(string), string commonTypeAlt = default(string), double score = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.Name = name;
            this.CommonType = commonType;
            this.CommonTypeAlt = commonTypeAlt;
            this.Score = score;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The input name
        /// </summary>
        /// <value>The input name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The most likely common name type
        /// </summary>
        /// <value>The most likely common name type</value>
        [DataMember(Name = "commonType", EmitDefaultValue = false)]
        public string CommonType { get; set; }

        /// <summary>
        /// Best alternative for : The most likely common name type
        /// </summary>
        /// <value>Best alternative for : The most likely common name type</value>
        [DataMember(Name = "commonTypeAlt", EmitDefaultValue = false)]
        public string CommonTypeAlt { get; set; }

        /// <summary>
        /// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProperNounCategorizedOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CommonType: ").Append(CommonType).Append("\n");
            sb.Append("  CommonTypeAlt: ").Append(CommonTypeAlt).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}
