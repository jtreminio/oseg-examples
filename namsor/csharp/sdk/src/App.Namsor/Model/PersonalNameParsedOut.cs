/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// PersonalNameParsedOut
    /// </summary>
    [DataContract(Name = "PersonalNameParsedOut")]
    public partial class PersonalNameParsedOut : IValidatableObject
    {
        /// <summary>
        /// Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
        /// </summary>
        /// <value>Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameParserTypeEnum
        {
            /// <summary>
            /// Enum FN1LN1 for value: FN1LN1
            /// </summary>
            [EnumMember(Value = "FN1LN1")]
            FN1LN1 = 1,

            /// <summary>
            /// Enum LN1FN1 for value: LN1FN1
            /// </summary>
            [EnumMember(Value = "LN1FN1")]
            LN1FN1 = 2,

            /// <summary>
            /// Enum FN1LN2 for value: FN1LN2
            /// </summary>
            [EnumMember(Value = "FN1LN2")]
            FN1LN2 = 3,

            /// <summary>
            /// Enum LN2FN1 for value: LN2FN1
            /// </summary>
            [EnumMember(Value = "LN2FN1")]
            LN2FN1 = 4,

            /// <summary>
            /// Enum FN1LNx for value: FN1LNx
            /// </summary>
            [EnumMember(Value = "FN1LNx")]
            FN1LNx = 5,

            /// <summary>
            /// Enum LNxFN1 for value: LNxFN1
            /// </summary>
            [EnumMember(Value = "LNxFN1")]
            LNxFN1 = 6,

            /// <summary>
            /// Enum FN2LN1 for value: FN2LN1
            /// </summary>
            [EnumMember(Value = "FN2LN1")]
            FN2LN1 = 7,

            /// <summary>
            /// Enum LN1FN2 for value: LN1FN2
            /// </summary>
            [EnumMember(Value = "LN1FN2")]
            LN1FN2 = 8,

            /// <summary>
            /// Enum FN2LN2 for value: FN2LN2
            /// </summary>
            [EnumMember(Value = "FN2LN2")]
            FN2LN2 = 9,

            /// <summary>
            /// Enum LN2FN2 for value: LN2FN2
            /// </summary>
            [EnumMember(Value = "LN2FN2")]
            LN2FN2 = 10,

            /// <summary>
            /// Enum FN2LNx for value: FN2LNx
            /// </summary>
            [EnumMember(Value = "FN2LNx")]
            FN2LNx = 11,

            /// <summary>
            /// Enum LNxFN2 for value: LNxFN2
            /// </summary>
            [EnumMember(Value = "LNxFN2")]
            LNxFN2 = 12,

            /// <summary>
            /// Enum FNxLN1 for value: FNxLN1
            /// </summary>
            [EnumMember(Value = "FNxLN1")]
            FNxLN1 = 13,

            /// <summary>
            /// Enum LN1FNx for value: LN1FNx
            /// </summary>
            [EnumMember(Value = "LN1FNx")]
            LN1FNx = 14,

            /// <summary>
            /// Enum FNxLN2 for value: FNxLN2
            /// </summary>
            [EnumMember(Value = "FNxLN2")]
            FNxLN2 = 15,

            /// <summary>
            /// Enum LN2FNx for value: LN2FNx
            /// </summary>
            [EnumMember(Value = "LN2FNx")]
            LN2FNx = 16,

            /// <summary>
            /// Enum FNxLNx for value: FNxLNx
            /// </summary>
            [EnumMember(Value = "FNxLNx")]
            FNxLNx = 17,

            /// <summary>
            /// Enum LNxFNx for value: LNxFNx
            /// </summary>
            [EnumMember(Value = "LNxFNx")]
            LNxFNx = 18
        }


        /// <summary>
        /// Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
        /// </summary>
        /// <value>Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.</value>
        [DataMember(Name = "nameParserType", EmitDefaultValue = false)]
        public NameParserTypeEnum? NameParserType { get; set; }
        /// <summary>
        /// Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
        /// </summary>
        /// <value>Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameParserTypeAltEnum
        {
            /// <summary>
            /// Enum FN1LN1 for value: FN1LN1
            /// </summary>
            [EnumMember(Value = "FN1LN1")]
            FN1LN1 = 1,

            /// <summary>
            /// Enum LN1FN1 for value: LN1FN1
            /// </summary>
            [EnumMember(Value = "LN1FN1")]
            LN1FN1 = 2,

            /// <summary>
            /// Enum FN1LN2 for value: FN1LN2
            /// </summary>
            [EnumMember(Value = "FN1LN2")]
            FN1LN2 = 3,

            /// <summary>
            /// Enum LN2FN1 for value: LN2FN1
            /// </summary>
            [EnumMember(Value = "LN2FN1")]
            LN2FN1 = 4,

            /// <summary>
            /// Enum FN1LNx for value: FN1LNx
            /// </summary>
            [EnumMember(Value = "FN1LNx")]
            FN1LNx = 5,

            /// <summary>
            /// Enum LNxFN1 for value: LNxFN1
            /// </summary>
            [EnumMember(Value = "LNxFN1")]
            LNxFN1 = 6,

            /// <summary>
            /// Enum FN2LN1 for value: FN2LN1
            /// </summary>
            [EnumMember(Value = "FN2LN1")]
            FN2LN1 = 7,

            /// <summary>
            /// Enum LN1FN2 for value: LN1FN2
            /// </summary>
            [EnumMember(Value = "LN1FN2")]
            LN1FN2 = 8,

            /// <summary>
            /// Enum FN2LN2 for value: FN2LN2
            /// </summary>
            [EnumMember(Value = "FN2LN2")]
            FN2LN2 = 9,

            /// <summary>
            /// Enum LN2FN2 for value: LN2FN2
            /// </summary>
            [EnumMember(Value = "LN2FN2")]
            LN2FN2 = 10,

            /// <summary>
            /// Enum FN2LNx for value: FN2LNx
            /// </summary>
            [EnumMember(Value = "FN2LNx")]
            FN2LNx = 11,

            /// <summary>
            /// Enum LNxFN2 for value: LNxFN2
            /// </summary>
            [EnumMember(Value = "LNxFN2")]
            LNxFN2 = 12,

            /// <summary>
            /// Enum FNxLN1 for value: FNxLN1
            /// </summary>
            [EnumMember(Value = "FNxLN1")]
            FNxLN1 = 13,

            /// <summary>
            /// Enum LN1FNx for value: LN1FNx
            /// </summary>
            [EnumMember(Value = "LN1FNx")]
            LN1FNx = 14,

            /// <summary>
            /// Enum FNxLN2 for value: FNxLN2
            /// </summary>
            [EnumMember(Value = "FNxLN2")]
            FNxLN2 = 15,

            /// <summary>
            /// Enum LN2FNx for value: LN2FNx
            /// </summary>
            [EnumMember(Value = "LN2FNx")]
            LN2FNx = 16,

            /// <summary>
            /// Enum FNxLNx for value: FNxLNx
            /// </summary>
            [EnumMember(Value = "FNxLNx")]
            FNxLNx = 17,

            /// <summary>
            /// Enum LNxFNx for value: LNxFNx
            /// </summary>
            [EnumMember(Value = "LNxFNx")]
            LNxFNx = 18
        }


        /// <summary>
        /// Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
        /// </summary>
        /// <value>Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.</value>
        [DataMember(Name = "nameParserTypeAlt", EmitDefaultValue = false)]
        public NameParserTypeAltEnum? NameParserTypeAlt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalNameParsedOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="name">The input name..</param>
        /// <param name="nameParserType">Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order..</param>
        /// <param name="nameParserTypeAlt">Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order..</param>
        /// <param name="firstLastName">firstLastName.</param>
        /// <param name="score">Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        public PersonalNameParsedOut(string script = default(string), string id = default(string), string explanation = default(string), string name = default(string), NameParserTypeEnum? nameParserType = default(NameParserTypeEnum?), NameParserTypeAltEnum? nameParserTypeAlt = default(NameParserTypeAltEnum?), FirstLastNameOut firstLastName = default(FirstLastNameOut), double score = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.Name = name;
            this.NameParserType = nameParserType;
            this.NameParserTypeAlt = nameParserTypeAlt;
            this.FirstLastName = firstLastName;
            this.Score = score;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The input name.
        /// </summary>
        /// <value>The input name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FirstLastName
        /// </summary>
        [DataMember(Name = "firstLastName", EmitDefaultValue = false)]
        public FirstLastNameOut FirstLastName { get; set; }

        /// <summary>
        /// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalNameParsedOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameParserType: ").Append(NameParserType).Append("\n");
            sb.Append("  NameParserTypeAlt: ").Append(NameParserTypeAlt).Append("\n");
            sb.Append("  FirstLastName: ").Append(FirstLastName).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}
