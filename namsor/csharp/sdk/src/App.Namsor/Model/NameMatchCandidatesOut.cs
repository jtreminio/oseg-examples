/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Classified matched names
    /// </summary>
    [DataContract(Name = "NameMatchCandidatesOut")]
    public partial class NameMatchCandidatesOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NameMatchCandidatesOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="orderOption">The option for ordering.</param>
        /// <param name="matchCandidates">The ordered list of name matching candidates.</param>
        public NameMatchCandidatesOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), string orderOption = default(string), List<NameMatchCandidateOut> matchCandidates = default(List<NameMatchCandidateOut>))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.OrderOption = orderOption;
            this.MatchCandidates = matchCandidates;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The option for ordering
        /// </summary>
        /// <value>The option for ordering</value>
        [DataMember(Name = "orderOption", EmitDefaultValue = false)]
        public string OrderOption { get; set; }

        /// <summary>
        /// The ordered list of name matching candidates
        /// </summary>
        /// <value>The ordered list of name matching candidates</value>
        [DataMember(Name = "matchCandidates", EmitDefaultValue = false)]
        public List<NameMatchCandidateOut> MatchCandidates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NameMatchCandidatesOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OrderOption: ").Append(OrderOption).Append("\n");
            sb.Append("  MatchCandidates: ").Append(MatchCandidates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
