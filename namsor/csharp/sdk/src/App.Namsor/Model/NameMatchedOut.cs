/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Classified matched names
    /// </summary>
    [DataContract(Name = "NameMatchedOut")]
    public partial class NameMatchedOut : IValidatableObject
    {
        /// <summary>
        /// The name matching status.
        /// </summary>
        /// <value>The name matching status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchStatusEnum
        {
            /// <summary>
            /// Enum Match for value: Match
            /// </summary>
            [EnumMember(Value = "Match")]
            Match = 1,

            /// <summary>
            /// Enum Mismatch for value: Mismatch
            /// </summary>
            [EnumMember(Value = "Mismatch")]
            Mismatch = 2
        }


        /// <summary>
        /// The name matching status.
        /// </summary>
        /// <value>The name matching status.</value>
        [DataMember(Name = "matchStatus", EmitDefaultValue = false)]
        public MatchStatusEnum? MatchStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NameMatchedOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="matchStatus">The name matching status..</param>
        /// <param name="score">score.</param>
        public NameMatchedOut(string script = default(string), string id = default(string), string explanation = default(string), MatchStatusEnum? matchStatus = default(MatchStatusEnum?), double score = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.MatchStatus = matchStatus;
            this.Score = score;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NameMatchedOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  MatchStatus: ").Append(MatchStatus).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
