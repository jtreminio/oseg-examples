/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY US &#39;race/ethnicity&#39; from a personal name, given US country of residence and (optionally) a ZIP5 code.
    /// </summary>
    [DataContract(Name = "FirstLastNameUSRaceEthnicityOut")]
    public partial class FirstLastNameUSRaceEthnicityOut : IValidatableObject
    {
        /// <summary>
        /// Second most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Second most likely US &#39;race&#39;/ethnicity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEthnicityAltEnum
        {
            /// <summary>
            /// Enum WNL for value: W_NL
            /// </summary>
            [EnumMember(Value = "W_NL")]
            WNL = 1,

            /// <summary>
            /// Enum HL for value: HL
            /// </summary>
            [EnumMember(Value = "HL")]
            HL = 2,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 3,

            /// <summary>
            /// Enum BNL for value: B_NL
            /// </summary>
            [EnumMember(Value = "B_NL")]
            BNL = 4,

            /// <summary>
            /// Enum AIAN for value: AI_AN
            /// </summary>
            [EnumMember(Value = "AI_AN")]
            AIAN = 5,

            /// <summary>
            /// Enum PI for value: PI
            /// </summary>
            [EnumMember(Value = "PI")]
            PI = 6
        }


        /// <summary>
        /// Second most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Second most likely US &#39;race&#39;/ethnicity</value>
        [DataMember(Name = "raceEthnicityAlt", EmitDefaultValue = false)]
        public RaceEthnicityAltEnum? RaceEthnicityAlt { get; set; }
        /// <summary>
        /// Most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Most likely US &#39;race&#39;/ethnicity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEthnicityEnum
        {
            /// <summary>
            /// Enum WNL for value: W_NL
            /// </summary>
            [EnumMember(Value = "W_NL")]
            WNL = 1,

            /// <summary>
            /// Enum HL for value: HL
            /// </summary>
            [EnumMember(Value = "HL")]
            HL = 2,

            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 3,

            /// <summary>
            /// Enum BNL for value: B_NL
            /// </summary>
            [EnumMember(Value = "B_NL")]
            BNL = 4,

            /// <summary>
            /// Enum AIAN for value: AI_AN
            /// </summary>
            [EnumMember(Value = "AI_AN")]
            AIAN = 5,

            /// <summary>
            /// Enum PI for value: PI
            /// </summary>
            [EnumMember(Value = "PI")]
            PI = 6
        }


        /// <summary>
        /// Most likely US &#39;race&#39;/ethnicity
        /// </summary>
        /// <value>Most likely US &#39;race&#39;/ethnicity</value>
        [DataMember(Name = "raceEthnicity", EmitDefaultValue = false)]
        public RaceEthnicityEnum? RaceEthnicity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameUSRaceEthnicityOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="raceEthnicityAlt">Second most likely US &#39;race&#39;/ethnicity.</param>
        /// <param name="raceEthnicity">Most likely US &#39;race&#39;/ethnicity.</param>
        /// <param name="score">Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        /// <param name="raceEthnicitiesTop">List &#39;race&#39;/ethnicities.</param>
        /// <param name="probabilityCalibrated">The calibrated probability for raceEthnicity to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        /// <param name="probabilityAltCalibrated">The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        public FirstLastNameUSRaceEthnicityOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), RaceEthnicityAltEnum? raceEthnicityAlt = default(RaceEthnicityAltEnum?), RaceEthnicityEnum? raceEthnicity = default(RaceEthnicityEnum?), double score = default(double), List<string> raceEthnicitiesTop = default(List<string>), double probabilityCalibrated = default(double), double probabilityAltCalibrated = default(double))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.RaceEthnicityAlt = raceEthnicityAlt;
            this.RaceEthnicity = raceEthnicity;
            this.Score = score;
            this.RaceEthnicitiesTop = raceEthnicitiesTop;
            this.ProbabilityCalibrated = probabilityCalibrated;
            this.ProbabilityAltCalibrated = probabilityAltCalibrated;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// List &#39;race&#39;/ethnicities
        /// </summary>
        /// <value>List &#39;race&#39;/ethnicities</value>
        [DataMember(Name = "raceEthnicitiesTop", EmitDefaultValue = false)]
        public List<string> RaceEthnicitiesTop { get; set; }

        /// <summary>
        /// The calibrated probability for raceEthnicity to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for raceEthnicity to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityCalibrated", EmitDefaultValue = false)]
        public double ProbabilityCalibrated { get; set; }

        /// <summary>
        /// The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityAltCalibrated", EmitDefaultValue = false)]
        public double ProbabilityAltCalibrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirstLastNameUSRaceEthnicityOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  RaceEthnicityAlt: ").Append(RaceEthnicityAlt).Append("\n");
            sb.Append("  RaceEthnicity: ").Append(RaceEthnicity).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  RaceEthnicitiesTop: ").Append(RaceEthnicitiesTop).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("  ProbabilityAltCalibrated: ").Append(ProbabilityAltCalibrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // ProbabilityCalibrated (double) maximum
            if (this.ProbabilityCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityCalibrated (double) minimum
            if (this.ProbabilityCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityAltCalibrated (double) maximum
            if (this.ProbabilityAltCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityAltCalibrated" });
            }

            // ProbabilityAltCalibrated (double) minimum
            if (this.ProbabilityAltCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityAltCalibrated" });
            }

            yield break;
        }
    }

}
