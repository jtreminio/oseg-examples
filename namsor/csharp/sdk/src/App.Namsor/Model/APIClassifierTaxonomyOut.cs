/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// APIClassifierTaxonomyOut
    /// </summary>
    [DataContract(Name = "APIClassifierTaxonomyOut")]
    public partial class APIClassifierTaxonomyOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIClassifierTaxonomyOut" /> class.
        /// </summary>
        /// <param name="classifierName">Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices).</param>
        /// <param name="taxonomyClasses">The taxonomy classes this classifier classifies to.</param>
        /// <param name="classifyingScripts">The scripts / alphabets this classifiers classifies to.</param>
        public APIClassifierTaxonomyOut(string classifierName = default(string), List<string> taxonomyClasses = default(List<string>), List<string> classifyingScripts = default(List<string>))
        {
            this.ClassifierName = classifierName;
            this.TaxonomyClasses = taxonomyClasses;
            this.ClassifyingScripts = classifyingScripts;
        }

        /// <summary>
        /// Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)
        /// </summary>
        /// <value>Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)</value>
        [DataMember(Name = "classifierName", EmitDefaultValue = false)]
        public string ClassifierName { get; set; }

        /// <summary>
        /// The taxonomy classes this classifier classifies to
        /// </summary>
        /// <value>The taxonomy classes this classifier classifies to</value>
        [DataMember(Name = "taxonomyClasses", EmitDefaultValue = false)]
        public List<string> TaxonomyClasses { get; set; }

        /// <summary>
        /// The scripts / alphabets this classifiers classifies to
        /// </summary>
        /// <value>The scripts / alphabets this classifiers classifies to</value>
        [DataMember(Name = "classifyingScripts", EmitDefaultValue = false)]
        public List<string> ClassifyingScripts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIClassifierTaxonomyOut {\n");
            sb.Append("  ClassifierName: ").Append(ClassifierName).Append("\n");
            sb.Append("  TaxonomyClasses: ").Append(TaxonomyClasses).Append("\n");
            sb.Append("  ClassifyingScripts: ").Append(ClassifyingScripts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
