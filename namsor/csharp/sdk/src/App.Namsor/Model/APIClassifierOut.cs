/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// The list of classifiers and versions.
    /// </summary>
    [DataContract(Name = "APIClassifierOut")]
    public partial class APIClassifierOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIClassifierOut" /> class.
        /// </summary>
        /// <param name="classifierName">The classifier name.</param>
        /// <param name="serving">True if the classifier is serving requests (has reached minimal learning, is not shutting down).</param>
        /// <param name="learning">True if the classifier is learning.</param>
        /// <param name="shuttingDown">True if the classifier is shutting down.</param>
        /// <param name="probabilityCalibrated">True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1).</param>
        public APIClassifierOut(string classifierName = default(string), bool serving = default(bool), bool learning = default(bool), bool shuttingDown = default(bool), bool probabilityCalibrated = default(bool))
        {
            this.ClassifierName = classifierName;
            this.Serving = serving;
            this.Learning = learning;
            this.ShuttingDown = shuttingDown;
            this.ProbabilityCalibrated = probabilityCalibrated;
        }

        /// <summary>
        /// The classifier name
        /// </summary>
        /// <value>The classifier name</value>
        [DataMember(Name = "classifierName", EmitDefaultValue = false)]
        public string ClassifierName { get; set; }

        /// <summary>
        /// True if the classifier is serving requests (has reached minimal learning, is not shutting down)
        /// </summary>
        /// <value>True if the classifier is serving requests (has reached minimal learning, is not shutting down)</value>
        [DataMember(Name = "serving", EmitDefaultValue = true)]
        public bool Serving { get; set; }

        /// <summary>
        /// True if the classifier is learning
        /// </summary>
        /// <value>True if the classifier is learning</value>
        [DataMember(Name = "learning", EmitDefaultValue = true)]
        public bool Learning { get; set; }

        /// <summary>
        /// True if the classifier is shutting down
        /// </summary>
        /// <value>True if the classifier is shutting down</value>
        [DataMember(Name = "shuttingDown", EmitDefaultValue = true)]
        public bool ShuttingDown { get; set; }

        /// <summary>
        /// True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)
        /// </summary>
        /// <value>True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)</value>
        [DataMember(Name = "probabilityCalibrated", EmitDefaultValue = true)]
        public bool ProbabilityCalibrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIClassifierOut {\n");
            sb.Append("  ClassifierName: ").Append(ClassifierName).Append("\n");
            sb.Append("  Serving: ").Append(Serving).Append("\n");
            sb.Append("  Learning: ").Append(Learning).Append("\n");
            sb.Append("  ShuttingDown: ").Append(ShuttingDown).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
