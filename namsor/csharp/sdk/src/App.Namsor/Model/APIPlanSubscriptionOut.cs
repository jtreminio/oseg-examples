/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// The API Plan governing the subscription.
    /// </summary>
    [DataContract(Name = "APIPlanSubscriptionOut")]
    public partial class APIPlanSubscriptionOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIPlanSubscriptionOut" /> class.
        /// </summary>
        /// <param name="apiKey">User API Key..</param>
        /// <param name="planStarted">Datetime when the user subscribed to the current plan..</param>
        /// <param name="priorPlanStarted">Datetime when the user subscribed to the prior plan..</param>
        /// <param name="planEnded">Datetime when the user ended the plan..</param>
        /// <param name="taxRate">Applicable tax rate for the plan..</param>
        /// <param name="planName">Current plan name..</param>
        /// <param name="planBaseFeesKey">Current plan key (as in Stripe product)..</param>
        /// <param name="planStatus">Plan status..</param>
        /// <param name="planQuota">Current plan quota in quantity of units (NB: some API use several units per name)..</param>
        /// <param name="priceUSD">Current plan monthly price expressed in USD (includes a free quota)..</param>
        /// <param name="priceOverageUSD">Current plan price for overages expressed in USD (extra price per unit above the free quota)..</param>
        /// <param name="price">Current plan price for overages expressed in Currency (extra price per unit above the free quota)..</param>
        /// <param name="priceOverage">Current plan price for overages expressed in Currency (extra price per unit above the free quota)..</param>
        /// <param name="currency">Current plan Currency for prices..</param>
        /// <param name="currencyFactor">For USD, GBP, EUR - the factor is 1..</param>
        /// <param name="stripeCustomerId">Stripe customer identifier..</param>
        /// <param name="stripeStatus">Stripe status ex active..</param>
        /// <param name="stripeSubscription">Stripe subscription identifier..</param>
        /// <param name="userId">Internal user identifier..</param>
        public APIPlanSubscriptionOut(string apiKey = default(string), long planStarted = default(long), long priorPlanStarted = default(long), long planEnded = default(long), double taxRate = default(double), string planName = default(string), string planBaseFeesKey = default(string), string planStatus = default(string), long planQuota = default(long), double priceUSD = default(double), double priceOverageUSD = default(double), double price = default(double), double priceOverage = default(double), string currency = default(string), double currencyFactor = default(double), string stripeCustomerId = default(string), string stripeStatus = default(string), string stripeSubscription = default(string), string userId = default(string))
        {
            this.ApiKey = apiKey;
            this.PlanStarted = planStarted;
            this.PriorPlanStarted = priorPlanStarted;
            this.PlanEnded = planEnded;
            this.TaxRate = taxRate;
            this.PlanName = planName;
            this.PlanBaseFeesKey = planBaseFeesKey;
            this.PlanStatus = planStatus;
            this.PlanQuota = planQuota;
            this.PriceUSD = priceUSD;
            this.PriceOverageUSD = priceOverageUSD;
            this.Price = price;
            this.PriceOverage = priceOverage;
            this.Currency = currency;
            this.CurrencyFactor = currencyFactor;
            this.StripeCustomerId = stripeCustomerId;
            this.StripeStatus = stripeStatus;
            this.StripeSubscription = stripeSubscription;
            this.UserId = userId;
        }

        /// <summary>
        /// User API Key.
        /// </summary>
        /// <value>User API Key.</value>
        [DataMember(Name = "apiKey", EmitDefaultValue = false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Datetime when the user subscribed to the current plan.
        /// </summary>
        /// <value>Datetime when the user subscribed to the current plan.</value>
        [DataMember(Name = "planStarted", EmitDefaultValue = false)]
        public long PlanStarted { get; set; }

        /// <summary>
        /// Datetime when the user subscribed to the prior plan.
        /// </summary>
        /// <value>Datetime when the user subscribed to the prior plan.</value>
        [DataMember(Name = "priorPlanStarted", EmitDefaultValue = false)]
        public long PriorPlanStarted { get; set; }

        /// <summary>
        /// Datetime when the user ended the plan.
        /// </summary>
        /// <value>Datetime when the user ended the plan.</value>
        [DataMember(Name = "planEnded", EmitDefaultValue = false)]
        public long PlanEnded { get; set; }

        /// <summary>
        /// Applicable tax rate for the plan.
        /// </summary>
        /// <value>Applicable tax rate for the plan.</value>
        [DataMember(Name = "taxRate", EmitDefaultValue = false)]
        public double TaxRate { get; set; }

        /// <summary>
        /// Current plan name.
        /// </summary>
        /// <value>Current plan name.</value>
        [DataMember(Name = "planName", EmitDefaultValue = false)]
        public string PlanName { get; set; }

        /// <summary>
        /// Current plan key (as in Stripe product).
        /// </summary>
        /// <value>Current plan key (as in Stripe product).</value>
        [DataMember(Name = "planBaseFeesKey", EmitDefaultValue = false)]
        public string PlanBaseFeesKey { get; set; }

        /// <summary>
        /// Plan status.
        /// </summary>
        /// <value>Plan status.</value>
        [DataMember(Name = "planStatus", EmitDefaultValue = false)]
        public string PlanStatus { get; set; }

        /// <summary>
        /// Current plan quota in quantity of units (NB: some API use several units per name).
        /// </summary>
        /// <value>Current plan quota in quantity of units (NB: some API use several units per name).</value>
        [DataMember(Name = "planQuota", EmitDefaultValue = false)]
        public long PlanQuota { get; set; }

        /// <summary>
        /// Current plan monthly price expressed in USD (includes a free quota).
        /// </summary>
        /// <value>Current plan monthly price expressed in USD (includes a free quota).</value>
        [DataMember(Name = "priceUSD", EmitDefaultValue = false)]
        public double PriceUSD { get; set; }

        /// <summary>
        /// Current plan price for overages expressed in USD (extra price per unit above the free quota).
        /// </summary>
        /// <value>Current plan price for overages expressed in USD (extra price per unit above the free quota).</value>
        [DataMember(Name = "priceOverageUSD", EmitDefaultValue = false)]
        public double PriceOverageUSD { get; set; }

        /// <summary>
        /// Current plan price for overages expressed in Currency (extra price per unit above the free quota).
        /// </summary>
        /// <value>Current plan price for overages expressed in Currency (extra price per unit above the free quota).</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Current plan price for overages expressed in Currency (extra price per unit above the free quota).
        /// </summary>
        /// <value>Current plan price for overages expressed in Currency (extra price per unit above the free quota).</value>
        [DataMember(Name = "priceOverage", EmitDefaultValue = false)]
        public double PriceOverage { get; set; }

        /// <summary>
        /// Current plan Currency for prices.
        /// </summary>
        /// <value>Current plan Currency for prices.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// For USD, GBP, EUR - the factor is 1.
        /// </summary>
        /// <value>For USD, GBP, EUR - the factor is 1.</value>
        [DataMember(Name = "currencyFactor", EmitDefaultValue = false)]
        public double CurrencyFactor { get; set; }

        /// <summary>
        /// Stripe customer identifier.
        /// </summary>
        /// <value>Stripe customer identifier.</value>
        [DataMember(Name = "stripeCustomerId", EmitDefaultValue = false)]
        public string StripeCustomerId { get; set; }

        /// <summary>
        /// Stripe status ex active.
        /// </summary>
        /// <value>Stripe status ex active.</value>
        [DataMember(Name = "stripeStatus", EmitDefaultValue = false)]
        public string StripeStatus { get; set; }

        /// <summary>
        /// Stripe subscription identifier.
        /// </summary>
        /// <value>Stripe subscription identifier.</value>
        [DataMember(Name = "stripeSubscription", EmitDefaultValue = false)]
        public string StripeSubscription { get; set; }

        /// <summary>
        /// Internal user identifier.
        /// </summary>
        /// <value>Internal user identifier.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIPlanSubscriptionOut {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  PlanStarted: ").Append(PlanStarted).Append("\n");
            sb.Append("  PriorPlanStarted: ").Append(PriorPlanStarted).Append("\n");
            sb.Append("  PlanEnded: ").Append(PlanEnded).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  PlanName: ").Append(PlanName).Append("\n");
            sb.Append("  PlanBaseFeesKey: ").Append(PlanBaseFeesKey).Append("\n");
            sb.Append("  PlanStatus: ").Append(PlanStatus).Append("\n");
            sb.Append("  PlanQuota: ").Append(PlanQuota).Append("\n");
            sb.Append("  PriceUSD: ").Append(PriceUSD).Append("\n");
            sb.Append("  PriceOverageUSD: ").Append(PriceOverageUSD).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceOverage: ").Append(PriceOverage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyFactor: ").Append(CurrencyFactor).Append("\n");
            sb.Append("  StripeCustomerId: ").Append(StripeCustomerId).Append("\n");
            sb.Append("  StripeStatus: ").Append(StripeStatus).Append("\n");
            sb.Append("  StripeSubscription: ").Append(StripeSubscription).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
