/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// List of countries and regions
    /// </summary>
    [DataContract(Name = "RegionISO")]
    public partial class RegionISO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegionISO" /> class.
        /// </summary>
        /// <param name="countryName">countryName.</param>
        /// <param name="countryNumCode">countryNumCode.</param>
        /// <param name="countryISO2">countryISO2.</param>
        /// <param name="countryISO3">countryISO3.</param>
        /// <param name="countryFIPS">countryFIPS.</param>
        /// <param name="subregion">subregion.</param>
        /// <param name="region">region.</param>
        /// <param name="topregion">topregion.</param>
        public RegionISO(string countryName = default(string), string countryNumCode = default(string), string countryISO2 = default(string), string countryISO3 = default(string), string countryFIPS = default(string), string subregion = default(string), string region = default(string), string topregion = default(string))
        {
            this.CountryName = countryName;
            this.CountryNumCode = countryNumCode;
            this.CountryISO2 = countryISO2;
            this.CountryISO3 = countryISO3;
            this.CountryFIPS = countryFIPS;
            this.Subregion = subregion;
            this.Region = region;
            this.Topregion = topregion;
        }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name = "countryName", EmitDefaultValue = false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets CountryNumCode
        /// </summary>
        [DataMember(Name = "countryNumCode", EmitDefaultValue = false)]
        public string CountryNumCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryISO2
        /// </summary>
        [DataMember(Name = "countryISO2", EmitDefaultValue = false)]
        public string CountryISO2 { get; set; }

        /// <summary>
        /// Gets or Sets CountryISO3
        /// </summary>
        [DataMember(Name = "countryISO3", EmitDefaultValue = false)]
        public string CountryISO3 { get; set; }

        /// <summary>
        /// Gets or Sets CountryFIPS
        /// </summary>
        [DataMember(Name = "countryFIPS", EmitDefaultValue = false)]
        public string CountryFIPS { get; set; }

        /// <summary>
        /// Gets or Sets Subregion
        /// </summary>
        [DataMember(Name = "subregion", EmitDefaultValue = false)]
        public string Subregion { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Topregion
        /// </summary>
        [DataMember(Name = "topregion", EmitDefaultValue = false)]
        public string Topregion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegionISO {\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryNumCode: ").Append(CountryNumCode).Append("\n");
            sb.Append("  CountryISO2: ").Append(CountryISO2).Append("\n");
            sb.Append("  CountryISO3: ").Append(CountryISO3).Append("\n");
            sb.Append("  CountryFIPS: ").Append(CountryFIPS).Append("\n");
            sb.Append("  Subregion: ").Append(Subregion).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Topregion: ").Append(Topregion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
