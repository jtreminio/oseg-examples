/*
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = App.Namsor.Client.OpenAPIDateConverter;

namespace App.Namsor.Model
{
    /// <summary>
    /// Represents the output of inferring the LIKELY country of Origin from a personal name.
    /// </summary>
    [DataContract(Name = "FirstLastNameGeoOut")]
    public partial class FirstLastNameGeoOut : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirstLastNameGeoOut" /> class.
        /// </summary>
        /// <param name="script">script.</param>
        /// <param name="id">id.</param>
        /// <param name="explanation">explanation.</param>
        /// <param name="firstName">The first name (also known as given name).</param>
        /// <param name="lastName">The last name (also known as family name, or surname).</param>
        /// <param name="score">Higher score is better, but score is not normalized. Use calibratedProbability if available. .</param>
        /// <param name="country">Most likely country .</param>
        /// <param name="countryAlt">Second best alternative : country .</param>
        /// <param name="region">Most likely region (based on country ISO2 code).</param>
        /// <param name="topRegion">Most likely top region (based on country ISO2 code).</param>
        /// <param name="subRegion">Most likely sub region (based on country ISO2 code).</param>
        /// <param name="countriesTop">List countries (top 10).</param>
        /// <param name="probabilityCalibrated">The calibrated probability for country to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        /// <param name="probabilityAltCalibrated">The calibrated probability for country OR countryAlt to have been guessed correctly. -1 &#x3D; still calibrating. .</param>
        /// <param name="religionStats">Geographic religious statistics, assuming country is correctly predicted..</param>
        /// <param name="religionStatsAlt">Geographic religious statistics, for country best alternative..</param>
        public FirstLastNameGeoOut(string script = default(string), string id = default(string), string explanation = default(string), string firstName = default(string), string lastName = default(string), double score = default(double), string country = default(string), string countryAlt = default(string), string region = default(string), string topRegion = default(string), string subRegion = default(string), List<string> countriesTop = default(List<string>), double probabilityCalibrated = default(double), double probabilityAltCalibrated = default(double), List<ReligionStatOut> religionStats = default(List<ReligionStatOut>), List<ReligionStatOut> religionStatsAlt = default(List<ReligionStatOut>))
        {
            this.Script = script;
            this.Id = id;
            this.Explanation = explanation;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Score = score;
            this.Country = country;
            this.CountryAlt = countryAlt;
            this.Region = region;
            this.TopRegion = topRegion;
            this.SubRegion = subRegion;
            this.CountriesTop = countriesTop;
            this.ProbabilityCalibrated = probabilityCalibrated;
            this.ProbabilityAltCalibrated = probabilityAltCalibrated;
            this.ReligionStats = religionStats;
            this.ReligionStatsAlt = religionStatsAlt;
        }

        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", EmitDefaultValue = false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The first name (also known as given name)
        /// </summary>
        /// <value>The first name (also known as given name)</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name (also known as family name, or surname)
        /// </summary>
        /// <value>The last name (also known as family name, or surname)</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Higher score is better, but score is not normalized. Use calibratedProbability if available. 
        /// </summary>
        /// <value>Higher score is better, but score is not normalized. Use calibratedProbability if available. </value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Most likely country 
        /// </summary>
        /// <value>Most likely country </value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Second best alternative : country 
        /// </summary>
        /// <value>Second best alternative : country </value>
        [DataMember(Name = "countryAlt", EmitDefaultValue = false)]
        public string CountryAlt { get; set; }

        /// <summary>
        /// Most likely region (based on country ISO2 code)
        /// </summary>
        /// <value>Most likely region (based on country ISO2 code)</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Most likely top region (based on country ISO2 code)
        /// </summary>
        /// <value>Most likely top region (based on country ISO2 code)</value>
        [DataMember(Name = "topRegion", EmitDefaultValue = false)]
        public string TopRegion { get; set; }

        /// <summary>
        /// Most likely sub region (based on country ISO2 code)
        /// </summary>
        /// <value>Most likely sub region (based on country ISO2 code)</value>
        [DataMember(Name = "subRegion", EmitDefaultValue = false)]
        public string SubRegion { get; set; }

        /// <summary>
        /// List countries (top 10)
        /// </summary>
        /// <value>List countries (top 10)</value>
        [DataMember(Name = "countriesTop", EmitDefaultValue = false)]
        public List<string> CountriesTop { get; set; }

        /// <summary>
        /// The calibrated probability for country to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for country to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityCalibrated", EmitDefaultValue = false)]
        public double ProbabilityCalibrated { get; set; }

        /// <summary>
        /// The calibrated probability for country OR countryAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
        /// </summary>
        /// <value>The calibrated probability for country OR countryAlt to have been guessed correctly. -1 &#x3D; still calibrating. </value>
        [DataMember(Name = "probabilityAltCalibrated", EmitDefaultValue = false)]
        public double ProbabilityAltCalibrated { get; set; }

        /// <summary>
        /// Geographic religious statistics, assuming country is correctly predicted.
        /// </summary>
        /// <value>Geographic religious statistics, assuming country is correctly predicted.</value>
        [DataMember(Name = "religionStats", EmitDefaultValue = false)]
        public List<ReligionStatOut> ReligionStats { get; set; }

        /// <summary>
        /// Geographic religious statistics, for country best alternative.
        /// </summary>
        /// <value>Geographic religious statistics, for country best alternative.</value>
        [DataMember(Name = "religionStatsAlt", EmitDefaultValue = false)]
        public List<ReligionStatOut> ReligionStatsAlt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirstLastNameGeoOut {\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryAlt: ").Append(CountryAlt).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  TopRegion: ").Append(TopRegion).Append("\n");
            sb.Append("  SubRegion: ").Append(SubRegion).Append("\n");
            sb.Append("  CountriesTop: ").Append(CountriesTop).Append("\n");
            sb.Append("  ProbabilityCalibrated: ").Append(ProbabilityCalibrated).Append("\n");
            sb.Append("  ProbabilityAltCalibrated: ").Append(ProbabilityAltCalibrated).Append("\n");
            sb.Append("  ReligionStats: ").Append(ReligionStats).Append("\n");
            sb.Append("  ReligionStatsAlt: ").Append(ReligionStatsAlt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (double) maximum
            if (this.Score > (double)100)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new [] { "Score" });
            }

            // Score (double) minimum
            if (this.Score < (double)0)
            {
                yield return new ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            // ProbabilityCalibrated (double) maximum
            if (this.ProbabilityCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityCalibrated (double) minimum
            if (this.ProbabilityCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityCalibrated" });
            }

            // ProbabilityAltCalibrated (double) maximum
            if (this.ProbabilityAltCalibrated > (double)1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value less than or equal to 1.", new [] { "ProbabilityAltCalibrated" });
            }

            // ProbabilityAltCalibrated (double) minimum
            if (this.ProbabilityAltCalibrated < (double)-1)
            {
                yield return new ValidationResult("Invalid value for ProbabilityAltCalibrated, must be a value greater than or equal to -1.", new [] { "ProbabilityAltCalibrated" });
            }

            yield break;
        }
    }

}
