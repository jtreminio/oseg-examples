/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Represents the output of inferring the LIKELY religion from a personal Indian first/last name.
*/
export class FirstLastNameReligionedOut {
    'script'?: string;
    'id'?: string;
    'explanation'?: string;
    /**
    * The first name (also known as given name)
    */
    'firstName'?: string;
    /**
    * The last name (also known as family name, or surname)
    */
    'lastName'?: string;
    /**
    * Most likely religion
    */
    'religion'?: string;
    /**
    * Second best alternative : religion 
    */
    'religionAlt'?: string;
    /**
    * List countries (top 10)
    */
    'religionsTop'?: Array<string>;
    /**
    * Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    */
    'score'?: number;
    /**
    * The calibrated probability for caste to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityCalibrated'?: number;
    /**
    * The calibrated probability for caste OR casteAlt to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityAltCalibrated'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "script",
            "baseName": "script",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "explanation",
            "baseName": "explanation",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "religion",
            "baseName": "religion",
            "type": "string"
        },
        {
            "name": "religionAlt",
            "baseName": "religionAlt",
            "type": "string"
        },
        {
            "name": "religionsTop",
            "baseName": "religionsTop",
            "type": "Array<string>"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "probabilityCalibrated",
            "baseName": "probabilityCalibrated",
            "type": "number"
        },
        {
            "name": "probabilityAltCalibrated",
            "baseName": "probabilityAltCalibrated",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return FirstLastNameReligionedOut.attributeTypeMap;
    }
}

