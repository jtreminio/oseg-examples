/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Represents the output of inferring the LIKELY US \'race/ethnicity\' from a personal name, given US country of residence and (optionally) a ZIP5 code.
*/
export class FirstLastNameUSRaceEthnicityOut {
    'script'?: string;
    'id'?: string;
    'explanation'?: string;
    /**
    * The first name (also known as given name)
    */
    'firstName'?: string;
    /**
    * The last name (also known as family name, or surname)
    */
    'lastName'?: string;
    /**
    * Second most likely US \'race\'/ethnicity
    */
    'raceEthnicityAlt'?: FirstLastNameUSRaceEthnicityOut.RaceEthnicityAltEnum;
    /**
    * Most likely US \'race\'/ethnicity
    */
    'raceEthnicity'?: FirstLastNameUSRaceEthnicityOut.RaceEthnicityEnum;
    /**
    * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    */
    'score'?: number;
    /**
    * List \'race\'/ethnicities
    */
    'raceEthnicitiesTop'?: Array<string>;
    /**
    * The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityCalibrated'?: number;
    /**
    * The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityAltCalibrated'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "script",
            "baseName": "script",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "explanation",
            "baseName": "explanation",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "raceEthnicityAlt",
            "baseName": "raceEthnicityAlt",
            "type": "FirstLastNameUSRaceEthnicityOut.RaceEthnicityAltEnum"
        },
        {
            "name": "raceEthnicity",
            "baseName": "raceEthnicity",
            "type": "FirstLastNameUSRaceEthnicityOut.RaceEthnicityEnum"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "raceEthnicitiesTop",
            "baseName": "raceEthnicitiesTop",
            "type": "Array<string>"
        },
        {
            "name": "probabilityCalibrated",
            "baseName": "probabilityCalibrated",
            "type": "number"
        },
        {
            "name": "probabilityAltCalibrated",
            "baseName": "probabilityAltCalibrated",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return FirstLastNameUSRaceEthnicityOut.attributeTypeMap;
    }
}

export namespace FirstLastNameUSRaceEthnicityOut {
    export enum RaceEthnicityAltEnum {
        WNl = <any> 'W_NL',
        Hl = <any> 'HL',
        A = <any> 'A',
        BNl = <any> 'B_NL',
        AiAn = <any> 'AI_AN',
        Pi = <any> 'PI'
    }
    export enum RaceEthnicityEnum {
        WNl = <any> 'W_NL',
        Hl = <any> 'HL',
        A = <any> 'A',
        BNl = <any> 'B_NL',
        AiAn = <any> 'AI_AN',
        Pi = <any> 'PI'
    }
}
