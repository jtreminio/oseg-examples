/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ReligionStatOut } from './religionStatOut';

/**
* Represents the output of inferring the LIKELY country of Origin from a personal name.
*/
export class PersonalNameOriginedOut {
    'script'?: string;
    'id'?: string;
    'explanation'?: string;
    /**
    * The input name.
    */
    'name'?: string;
    /**
    * Most likely country of Origin
    */
    'countryOrigin'?: string;
    /**
    * Second best alternative : country of Origin
    */
    'countryOriginAlt'?: string;
    /**
    * List countries of Origin (top 10)
    */
    'countriesOriginTop'?: Array<string>;
    /**
    * Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
    */
    'score'?: number;
    /**
    * Most likely region of Origin (based on countryOrigin ISO2 code)
    */
    'regionOrigin'?: string;
    /**
    * Most likely top region of Origin (based on countryOrigin ISO2 code)
    */
    'topRegionOrigin'?: string;
    /**
    * Most likely sub region of Origin (based on countryOrigin ISO2 code)
    */
    'subRegionOrigin'?: string;
    /**
    * The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityCalibrated'?: number;
    /**
    * The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. 
    */
    'probabilityAltCalibrated'?: number;
    /**
    * Geographic religious statistics, assuming country of origin is correctly predicted.
    */
    'religionStats'?: Array<ReligionStatOut>;
    /**
    * Geographic religious statistics, for country best alternative.
    */
    'religionStatsAlt'?: Array<ReligionStatOut>;
    /**
    * Geographic religious statistics, assuming country of origin OR best alternative is correctly predicted.
    */
    'religionStatsSynthetic'?: Array<ReligionStatOut>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "script",
            "baseName": "script",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "explanation",
            "baseName": "explanation",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "countryOrigin",
            "baseName": "countryOrigin",
            "type": "string"
        },
        {
            "name": "countryOriginAlt",
            "baseName": "countryOriginAlt",
            "type": "string"
        },
        {
            "name": "countriesOriginTop",
            "baseName": "countriesOriginTop",
            "type": "Array<string>"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "regionOrigin",
            "baseName": "regionOrigin",
            "type": "string"
        },
        {
            "name": "topRegionOrigin",
            "baseName": "topRegionOrigin",
            "type": "string"
        },
        {
            "name": "subRegionOrigin",
            "baseName": "subRegionOrigin",
            "type": "string"
        },
        {
            "name": "probabilityCalibrated",
            "baseName": "probabilityCalibrated",
            "type": "number"
        },
        {
            "name": "probabilityAltCalibrated",
            "baseName": "probabilityAltCalibrated",
            "type": "number"
        },
        {
            "name": "religionStats",
            "baseName": "religionStats",
            "type": "Array<ReligionStatOut>"
        },
        {
            "name": "religionStatsAlt",
            "baseName": "religionStatsAlt",
            "type": "Array<ReligionStatOut>"
        },
        {
            "name": "religionStatsSynthetic",
            "baseName": "religionStatsSynthetic",
            "type": "Array<ReligionStatOut>"
        }    ];

    static getAttributeTypeMap() {
        return PersonalNameOriginedOut.attributeTypeMap;
    }
}

