/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { APIKeyOut } from './aPIKeyOut';

/**
* Detailed usage as reported by the deduplicating API counter.
*/
export class APICounterV2Out {
    'apiKey'?: APIKeyOut;
    /**
    * The apiService corresponds to the classifier name.
    */
    'apiService'?: string;
    /**
    * The processing hostAddress.
    */
    'hostAddress'?: string;
    /**
    * The create datetime of the counter.
    */
    'createdDateTime'?: number;
    /**
    * The usage of the counter.
    */
    'totalUsage'?: number;
    /**
    * The flush datetime of the counter.
    */
    'lastFlushedDateTime'?: number;
    /**
    * The last usage datetime of the counter.
    */
    'lastUsedDateTime'?: number;
    /**
    * Usage of special features, such as Chinese, Japanese.
    */
    'serviceFeaturesUsage'?: { [key: string]: number; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "APIKeyOut"
        },
        {
            "name": "apiService",
            "baseName": "apiService",
            "type": "string"
        },
        {
            "name": "hostAddress",
            "baseName": "hostAddress",
            "type": "string"
        },
        {
            "name": "createdDateTime",
            "baseName": "createdDateTime",
            "type": "number"
        },
        {
            "name": "totalUsage",
            "baseName": "totalUsage",
            "type": "number"
        },
        {
            "name": "lastFlushedDateTime",
            "baseName": "lastFlushedDateTime",
            "type": "number"
        },
        {
            "name": "lastUsedDateTime",
            "baseName": "lastUsedDateTime",
            "type": "number"
        },
        {
            "name": "serviceFeaturesUsage",
            "baseName": "serviceFeaturesUsage",
            "type": "{ [key: string]: number; }"
        }    ];

    static getAttributeTypeMap() {
        return APICounterV2Out.attributeTypeMap;
    }
}

