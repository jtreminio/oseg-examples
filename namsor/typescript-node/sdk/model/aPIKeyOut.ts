/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CommunityEngageOptionOut } from './communityEngageOptionOut';

export class APIKeyOut {
    /**
    * The user API Key.
    */
    'apiKey'?: string;
    /**
    * The user identifier.
    */
    'userId'?: string;
    /**
    * The API Key has admin role.
    */
    'admin'?: boolean;
    /**
    * The API Key is vetted (assumed truthful) for machine learning.
    */
    'vetted'?: boolean;
    /**
    * The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it\'s processed).
    */
    'learnable'?: boolean;
    /**
    * The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it\'s processed).
    */
    'anonymized'?: boolean;
    /**
    * The API Key has partner role.
    */
    'partner'?: boolean;
    /**
    * The API Key is associated to a valid Stripe account.
    */
    'striped'?: boolean;
    /**
    * The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
    */
    'corporate'?: boolean;
    /**
    * The API Key is temporarily or permanently disabled.
    */
    'disabled'?: boolean;
    /**
    * The API Key supports the AI explainability option (may require a specific license).
    */
    'explainable'?: boolean;
    'ipAddress'?: string;
    'communityEngageOption'?: CommunityEngageOptionOut;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string"
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string"
        },
        {
            "name": "admin",
            "baseName": "admin",
            "type": "boolean"
        },
        {
            "name": "vetted",
            "baseName": "vetted",
            "type": "boolean"
        },
        {
            "name": "learnable",
            "baseName": "learnable",
            "type": "boolean"
        },
        {
            "name": "anonymized",
            "baseName": "anonymized",
            "type": "boolean"
        },
        {
            "name": "partner",
            "baseName": "partner",
            "type": "boolean"
        },
        {
            "name": "striped",
            "baseName": "striped",
            "type": "boolean"
        },
        {
            "name": "corporate",
            "baseName": "corporate",
            "type": "boolean"
        },
        {
            "name": "disabled",
            "baseName": "disabled",
            "type": "boolean"
        },
        {
            "name": "explainable",
            "baseName": "explainable",
            "type": "boolean"
        },
        {
            "name": "ipAddress",
            "baseName": "ipAddress",
            "type": "string"
        },
        {
            "name": "communityEngageOption",
            "baseName": "communityEngageOption",
            "type": "CommunityEngageOptionOut"
        }    ];

    static getAttributeTypeMap() {
        return APIKeyOut.attributeTypeMap;
    }
}

