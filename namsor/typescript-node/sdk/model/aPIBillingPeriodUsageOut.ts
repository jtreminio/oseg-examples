/**
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can\'t find here? We have many more features coming soon. Let us know, we\'ll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* The current billing period.
*/
export class APIBillingPeriodUsageOut {
    /**
    * User API Key.
    */
    'apiKey'?: string;
    /**
    * Datetime when the user subscribed to the plan.
    */
    'subscriptionStarted'?: number;
    /**
    * Datetime when the the plan\'s current period started.
    */
    'periodStarted'?: number;
    /**
    * Datetime when the the plan\'s current period endend.
    */
    'periodEnded'?: number;
    /**
    * Datetime when the the plan\'s current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
    */
    'stripeCurrentPeriodEnd'?: number;
    /**
    * Datetime when the the plan\'s current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
    */
    'stripeCurrentPeriodStart'?: number;
    /**
    * Current period billing status ex OPEN.
    */
    'billingStatus'?: string;
    /**
    * Current period usage in units (NB some API endpoints use more than one unit).
    */
    'usage'?: number;
    /**
    * Current period soft limit (reaching the limit sends an email notification).
    */
    'softLimit'?: number;
    /**
    * Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
    */
    'hardLimit'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiKey",
            "baseName": "apiKey",
            "type": "string"
        },
        {
            "name": "subscriptionStarted",
            "baseName": "subscriptionStarted",
            "type": "number"
        },
        {
            "name": "periodStarted",
            "baseName": "periodStarted",
            "type": "number"
        },
        {
            "name": "periodEnded",
            "baseName": "periodEnded",
            "type": "number"
        },
        {
            "name": "stripeCurrentPeriodEnd",
            "baseName": "stripeCurrentPeriodEnd",
            "type": "number"
        },
        {
            "name": "stripeCurrentPeriodStart",
            "baseName": "stripeCurrentPeriodStart",
            "type": "number"
        },
        {
            "name": "billingStatus",
            "baseName": "billingStatus",
            "type": "string"
        },
        {
            "name": "usage",
            "baseName": "usage",
            "type": "number"
        },
        {
            "name": "softLimit",
            "baseName": "softLimit",
            "type": "number"
        },
        {
            "name": "hardLimit",
            "baseName": "hardLimit",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return APIBillingPeriodUsageOut.attributeTypeMap;
    }
}

