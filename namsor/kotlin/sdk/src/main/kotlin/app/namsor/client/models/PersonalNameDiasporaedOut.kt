/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.models

import app.namsor.client.models.ReligionStatOut

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
 *
 * @param script 
 * @param id 
 * @param explanation 
 * @param name The input name.
 * @param score Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. 
 * @param ethnicityAlt The second best alternative ethnicity
 * @param ethnicity The most likely ethnicity
 * @param lifted Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.
 * @param countryIso2 From input data, the countryIso2 of geographic context (US,CA etc.)
 * @param ethnicitiesTop List most likely ethnicities (top 10)
 * @param probabilityCalibrated The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating. 
 * @param probabilityAltCalibrated The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating. 
 * @param religionStats Geographic religious statistics, assuming ethnicity is correctly predicted.
 * @param religionStatsAlt Geographic religious statistics, for country best alternative.
 */


data class PersonalNameDiasporaedOut (

    @Json(name = "script")
    val script: kotlin.String? = null,

    @Json(name = "id")
    val id: kotlin.String? = null,

    @Json(name = "explanation")
    val explanation: kotlin.String? = null,

    /* The input name. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.  */
    @Json(name = "score")
    val score: kotlin.Double? = null,

    /* The second best alternative ethnicity */
    @Json(name = "ethnicityAlt")
    val ethnicityAlt: kotlin.String? = null,

    /* The most likely ethnicity */
    @Json(name = "ethnicity")
    val ethnicity: kotlin.String? = null,

    /* Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true. */
    @Json(name = "lifted")
    val lifted: kotlin.Boolean? = null,

    /* From input data, the countryIso2 of geographic context (US,CA etc.) */
    @Json(name = "countryIso2")
    val countryIso2: kotlin.String? = null,

    /* List most likely ethnicities (top 10) */
    @Json(name = "ethnicitiesTop")
    val ethnicitiesTop: kotlin.collections.List<kotlin.String>? = null,

    /* The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating.  */
    @Json(name = "probabilityCalibrated")
    val probabilityCalibrated: kotlin.Double? = null,

    /* The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating.  */
    @Json(name = "probabilityAltCalibrated")
    val probabilityAltCalibrated: kotlin.Double? = null,

    /* Geographic religious statistics, assuming ethnicity is correctly predicted. */
    @Json(name = "religionStats")
    val religionStats: kotlin.collections.List<ReligionStatOut>? = null,

    /* Geographic religious statistics, for country best alternative. */
    @Json(name = "religionStatsAlt")
    val religionStatsAlt: kotlin.collections.List<ReligionStatOut>? = null

) {


}

