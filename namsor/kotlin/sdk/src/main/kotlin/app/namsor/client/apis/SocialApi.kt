/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import app.namsor.client.models.BatchFirstLastNamePhoneCodedOut
import app.namsor.client.models.BatchFirstLastNamePhoneNumberGeoIn
import app.namsor.client.models.BatchFirstLastNamePhoneNumberIn
import app.namsor.client.models.FirstLastNamePhoneCodedOut

import com.squareup.moshi.Json

import app.namsor.client.infrastructure.ApiClient
import app.namsor.client.infrastructure.ApiResponse
import app.namsor.client.infrastructure.ClientException
import app.namsor.client.infrastructure.ClientError
import app.namsor.client.infrastructure.ServerException
import app.namsor.client.infrastructure.ServerError
import app.namsor.client.infrastructure.MultiValueMap
import app.namsor.client.infrastructure.PartConfig
import app.namsor.client.infrastructure.RequestConfig
import app.namsor.client.infrastructure.RequestMethod
import app.namsor.client.infrastructure.ResponseType
import app.namsor.client.infrastructure.Success
import app.namsor.client.infrastructure.toMultiValue

class SocialApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://v2.namsor.com/NamSorAPIv2")
        }
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @return FirstLastNamePhoneCodedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun phoneCode(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String) : FirstLastNamePhoneCodedOut {
        val localVarResponse = phoneCodeWithHttpInfo(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNamePhoneCodedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @return ApiResponse<FirstLastNamePhoneCodedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun phoneCodeWithHttpInfo(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String) : ApiResponse<FirstLastNamePhoneCodedOut?> {
        val localVariableConfig = phoneCodeRequestConfig(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber)

        return request<Unit, FirstLastNamePhoneCodedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation phoneCode
     *
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @return RequestConfig
     */
    fun phoneCodeRequestConfig(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}".replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())).replace("{"+"phoneNumber"+"}", encodeURIComponent(phoneNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun phoneCodeBatch(batchFirstLastNamePhoneNumberIn: BatchFirstLastNamePhoneNumberIn? = null) : BatchFirstLastNamePhoneCodedOut {
        val localVarResponse = phoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn = batchFirstLastNamePhoneNumberIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNamePhoneCodedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNamePhoneCodedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun phoneCodeBatchWithHttpInfo(batchFirstLastNamePhoneNumberIn: BatchFirstLastNamePhoneNumberIn?) : ApiResponse<BatchFirstLastNamePhoneCodedOut?> {
        val localVariableConfig = phoneCodeBatchRequestConfig(batchFirstLastNamePhoneNumberIn = batchFirstLastNamePhoneNumberIn)

        return request<BatchFirstLastNamePhoneNumberIn, BatchFirstLastNamePhoneCodedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation phoneCodeBatch
     *
     * @param batchFirstLastNamePhoneNumberIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun phoneCodeBatchRequestConfig(batchFirstLastNamePhoneNumberIn: BatchFirstLastNamePhoneNumberIn?) : RequestConfig<BatchFirstLastNamePhoneNumberIn> {
        val localVariableBody = batchFirstLastNamePhoneNumberIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/phoneCodeBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param countryIso2 
     * @return FirstLastNamePhoneCodedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun phoneCodeGeo(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, countryIso2: kotlin.String) : FirstLastNamePhoneCodedOut {
        val localVarResponse = phoneCodeGeoWithHttpInfo(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber, countryIso2 = countryIso2)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNamePhoneCodedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param countryIso2 
     * @return ApiResponse<FirstLastNamePhoneCodedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun phoneCodeGeoWithHttpInfo(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, countryIso2: kotlin.String) : ApiResponse<FirstLastNamePhoneCodedOut?> {
        val localVariableConfig = phoneCodeGeoRequestConfig(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber, countryIso2 = countryIso2)

        return request<Unit, FirstLastNamePhoneCodedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation phoneCodeGeo
     *
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param countryIso2 
     * @return RequestConfig
     */
    fun phoneCodeGeoRequestConfig(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, countryIso2: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}".replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())).replace("{"+"phoneNumber"+"}", encodeURIComponent(phoneNumber.toString())).replace("{"+"countryIso2"+"}", encodeURIComponent(countryIso2.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return BatchFirstLastNamePhoneCodedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun phoneCodeGeoBatch(batchFirstLastNamePhoneNumberGeoIn: BatchFirstLastNamePhoneNumberGeoIn? = null) : BatchFirstLastNamePhoneCodedOut {
        val localVarResponse = phoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn = batchFirstLastNamePhoneNumberGeoIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNamePhoneCodedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNamePhoneCodedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun phoneCodeGeoBatchWithHttpInfo(batchFirstLastNamePhoneNumberGeoIn: BatchFirstLastNamePhoneNumberGeoIn?) : ApiResponse<BatchFirstLastNamePhoneCodedOut?> {
        val localVariableConfig = phoneCodeGeoBatchRequestConfig(batchFirstLastNamePhoneNumberGeoIn = batchFirstLastNamePhoneNumberGeoIn)

        return request<BatchFirstLastNamePhoneNumberGeoIn, BatchFirstLastNamePhoneCodedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation phoneCodeGeoBatch
     *
     * @param batchFirstLastNamePhoneNumberGeoIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun phoneCodeGeoBatchRequestConfig(batchFirstLastNamePhoneNumberGeoIn: BatchFirstLastNamePhoneNumberGeoIn?) : RequestConfig<BatchFirstLastNamePhoneNumberGeoIn> {
        val localVariableBody = batchFirstLastNamePhoneNumberGeoIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/phoneCodeGeoBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param phoneNumberE164 
     * @param countryIso2 
     * @return FirstLastNamePhoneCodedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun phoneCodeGeoFeedbackLoop(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, phoneNumberE164: kotlin.String, countryIso2: kotlin.String) : FirstLastNamePhoneCodedOut {
        val localVarResponse = phoneCodeGeoFeedbackLoopWithHttpInfo(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber, phoneNumberE164 = phoneNumberE164, countryIso2 = countryIso2)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNamePhoneCodedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param phoneNumberE164 
     * @param countryIso2 
     * @return ApiResponse<FirstLastNamePhoneCodedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun phoneCodeGeoFeedbackLoopWithHttpInfo(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, phoneNumberE164: kotlin.String, countryIso2: kotlin.String) : ApiResponse<FirstLastNamePhoneCodedOut?> {
        val localVariableConfig = phoneCodeGeoFeedbackLoopRequestConfig(firstName = firstName, lastName = lastName, phoneNumber = phoneNumber, phoneNumberE164 = phoneNumberE164, countryIso2 = countryIso2)

        return request<Unit, FirstLastNamePhoneCodedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation phoneCodeGeoFeedbackLoop
     *
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param phoneNumberE164 
     * @param countryIso2 
     * @return RequestConfig
     */
    fun phoneCodeGeoFeedbackLoopRequestConfig(firstName: kotlin.String, lastName: kotlin.String, phoneNumber: kotlin.String, phoneNumberE164: kotlin.String, countryIso2: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}".replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())).replace("{"+"phoneNumber"+"}", encodeURIComponent(phoneNumber.toString())).replace("{"+"phoneNumberE164"+"}", encodeURIComponent(phoneNumberE164.toString())).replace("{"+"countryIso2"+"}", encodeURIComponent(countryIso2.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
