/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.models

import app.namsor.client.models.ReligionStatOut

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Represents the output of inferring the LIKELY country of Origin from a personal name.
 *
 * @param script 
 * @param id 
 * @param explanation 
 * @param firstName The first name (also known as given name)
 * @param lastName The last name (also known as family name, or surname)
 * @param score Higher score is better, but score is not normalized. Use calibratedProbability if available. 
 * @param country Most likely country 
 * @param countryAlt Second best alternative : country 
 * @param region Most likely region (based on country ISO2 code)
 * @param topRegion Most likely top region (based on country ISO2 code)
 * @param subRegion Most likely sub region (based on country ISO2 code)
 * @param countriesTop List countries (top 10)
 * @param probabilityCalibrated The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 
 * @param probabilityAltCalibrated The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 
 * @param religionStats Geographic religious statistics, assuming country is correctly predicted.
 * @param religionStatsAlt Geographic religious statistics, for country best alternative.
 */


data class FirstLastNameGeoOut (

    @Json(name = "script")
    val script: kotlin.String? = null,

    @Json(name = "id")
    val id: kotlin.String? = null,

    @Json(name = "explanation")
    val explanation: kotlin.String? = null,

    /* The first name (also known as given name) */
    @Json(name = "firstName")
    val firstName: kotlin.String? = null,

    /* The last name (also known as family name, or surname) */
    @Json(name = "lastName")
    val lastName: kotlin.String? = null,

    /* Higher score is better, but score is not normalized. Use calibratedProbability if available.  */
    @Json(name = "score")
    val score: kotlin.Double? = null,

    /* Most likely country  */
    @Json(name = "country")
    val country: kotlin.String? = null,

    /* Second best alternative : country  */
    @Json(name = "countryAlt")
    val countryAlt: kotlin.String? = null,

    /* Most likely region (based on country ISO2 code) */
    @Json(name = "region")
    val region: kotlin.String? = null,

    /* Most likely top region (based on country ISO2 code) */
    @Json(name = "topRegion")
    val topRegion: kotlin.String? = null,

    /* Most likely sub region (based on country ISO2 code) */
    @Json(name = "subRegion")
    val subRegion: kotlin.String? = null,

    /* List countries (top 10) */
    @Json(name = "countriesTop")
    val countriesTop: kotlin.collections.List<kotlin.String>? = null,

    /* The calibrated probability for country to have been guessed correctly. -1 = still calibrating.  */
    @Json(name = "probabilityCalibrated")
    val probabilityCalibrated: kotlin.Double? = null,

    /* The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating.  */
    @Json(name = "probabilityAltCalibrated")
    val probabilityAltCalibrated: kotlin.Double? = null,

    /* Geographic religious statistics, assuming country is correctly predicted. */
    @Json(name = "religionStats")
    val religionStats: kotlin.collections.List<ReligionStatOut>? = null,

    /* Geographic religious statistics, for country best alternative. */
    @Json(name = "religionStatsAlt")
    val religionStatsAlt: kotlin.collections.List<ReligionStatOut>? = null

) {


}

