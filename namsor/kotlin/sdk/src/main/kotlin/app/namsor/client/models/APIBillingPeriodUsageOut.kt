/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The current billing period.
 *
 * @param apiKey User API Key.
 * @param subscriptionStarted Datetime when the user subscribed to the plan.
 * @param periodStarted Datetime when the the plan's current period started.
 * @param periodEnded Datetime when the the plan's current period endend.
 * @param stripeCurrentPeriodEnd Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
 * @param stripeCurrentPeriodStart Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
 * @param billingStatus Current period billing status ex OPEN.
 * @param usage Current period usage in units (NB some API endpoints use more than one unit).
 * @param softLimit Current period soft limit (reaching the limit sends an email notification).
 * @param hardLimit Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
 */


data class APIBillingPeriodUsageOut (

    /* User API Key. */
    @Json(name = "apiKey")
    val apiKey: kotlin.String? = null,

    /* Datetime when the user subscribed to the plan. */
    @Json(name = "subscriptionStarted")
    val subscriptionStarted: kotlin.Long? = null,

    /* Datetime when the the plan's current period started. */
    @Json(name = "periodStarted")
    val periodStarted: kotlin.Long? = null,

    /* Datetime when the the plan's current period endend. */
    @Json(name = "periodEnded")
    val periodEnded: kotlin.Long? = null,

    /* Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide. */
    @Json(name = "stripeCurrentPeriodEnd")
    val stripeCurrentPeriodEnd: kotlin.Long? = null,

    /* Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide. */
    @Json(name = "stripeCurrentPeriodStart")
    val stripeCurrentPeriodStart: kotlin.Long? = null,

    /* Current period billing status ex OPEN. */
    @Json(name = "billingStatus")
    val billingStatus: kotlin.String? = null,

    /* Current period usage in units (NB some API endpoints use more than one unit). */
    @Json(name = "usage")
    val usage: kotlin.Long? = null,

    /* Current period soft limit (reaching the limit sends an email notification). */
    @Json(name = "softLimit")
    val softLimit: kotlin.Long? = null,

    /* Current period hard limit (reaching the limit sends an email notification and blocks the API Key). */
    @Json(name = "hardLimit")
    val hardLimit: kotlin.Long? = null

) {


}

