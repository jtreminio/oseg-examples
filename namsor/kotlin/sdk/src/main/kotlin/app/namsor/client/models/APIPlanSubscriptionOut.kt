/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The API Plan governing the subscription.
 *
 * @param apiKey User API Key.
 * @param planStarted Datetime when the user subscribed to the current plan.
 * @param priorPlanStarted Datetime when the user subscribed to the prior plan.
 * @param planEnded Datetime when the user ended the plan.
 * @param taxRate Applicable tax rate for the plan.
 * @param planName Current plan name.
 * @param planBaseFeesKey Current plan key (as in Stripe product).
 * @param planStatus Plan status.
 * @param planQuota Current plan quota in quantity of units (NB: some API use several units per name).
 * @param priceUSD Current plan monthly price expressed in USD (includes a free quota).
 * @param priceOverageUSD Current plan price for overages expressed in USD (extra price per unit above the free quota).
 * @param price Current plan price for overages expressed in Currency (extra price per unit above the free quota).
 * @param priceOverage Current plan price for overages expressed in Currency (extra price per unit above the free quota).
 * @param currency Current plan Currency for prices.
 * @param currencyFactor For USD, GBP, EUR - the factor is 1.
 * @param stripeCustomerId Stripe customer identifier.
 * @param stripeStatus Stripe status ex active.
 * @param stripeSubscription Stripe subscription identifier.
 * @param userId Internal user identifier.
 */


data class APIPlanSubscriptionOut (

    /* User API Key. */
    @Json(name = "apiKey")
    val apiKey: kotlin.String? = null,

    /* Datetime when the user subscribed to the current plan. */
    @Json(name = "planStarted")
    val planStarted: kotlin.Long? = null,

    /* Datetime when the user subscribed to the prior plan. */
    @Json(name = "priorPlanStarted")
    val priorPlanStarted: kotlin.Long? = null,

    /* Datetime when the user ended the plan. */
    @Json(name = "planEnded")
    val planEnded: kotlin.Long? = null,

    /* Applicable tax rate for the plan. */
    @Json(name = "taxRate")
    val taxRate: kotlin.Double? = null,

    /* Current plan name. */
    @Json(name = "planName")
    val planName: kotlin.String? = null,

    /* Current plan key (as in Stripe product). */
    @Json(name = "planBaseFeesKey")
    val planBaseFeesKey: kotlin.String? = null,

    /* Plan status. */
    @Json(name = "planStatus")
    val planStatus: kotlin.String? = null,

    /* Current plan quota in quantity of units (NB: some API use several units per name). */
    @Json(name = "planQuota")
    val planQuota: kotlin.Long? = null,

    /* Current plan monthly price expressed in USD (includes a free quota). */
    @Json(name = "priceUSD")
    val priceUSD: kotlin.Double? = null,

    /* Current plan price for overages expressed in USD (extra price per unit above the free quota). */
    @Json(name = "priceOverageUSD")
    val priceOverageUSD: kotlin.Double? = null,

    /* Current plan price for overages expressed in Currency (extra price per unit above the free quota). */
    @Json(name = "price")
    val price: kotlin.Double? = null,

    /* Current plan price for overages expressed in Currency (extra price per unit above the free quota). */
    @Json(name = "priceOverage")
    val priceOverage: kotlin.Double? = null,

    /* Current plan Currency for prices. */
    @Json(name = "currency")
    val currency: kotlin.String? = null,

    /* For USD, GBP, EUR - the factor is 1. */
    @Json(name = "currencyFactor")
    val currencyFactor: kotlin.Double? = null,

    /* Stripe customer identifier. */
    @Json(name = "stripeCustomerId")
    val stripeCustomerId: kotlin.String? = null,

    /* Stripe status ex active. */
    @Json(name = "stripeStatus")
    val stripeStatus: kotlin.String? = null,

    /* Stripe subscription identifier. */
    @Json(name = "stripeSubscription")
    val stripeSubscription: kotlin.String? = null,

    /* Internal user identifier. */
    @Json(name = "userId")
    val userId: kotlin.String? = null

) {


}

