/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import app.namsor.client.models.BatchFirstLastNameCasteOut
import app.namsor.client.models.BatchFirstLastNameCastegroupOut
import app.namsor.client.models.BatchFirstLastNameGeoIn
import app.namsor.client.models.BatchFirstLastNameGeoSubclassificationOut
import app.namsor.client.models.BatchFirstLastNameGeoSubdivisionIn
import app.namsor.client.models.BatchFirstLastNameReligionedOut
import app.namsor.client.models.BatchFirstLastNameSubdivisionIn
import app.namsor.client.models.BatchPersonalNameCastegroupOut
import app.namsor.client.models.BatchPersonalNameGeoIn
import app.namsor.client.models.BatchPersonalNameGeoSubclassificationOut
import app.namsor.client.models.BatchPersonalNameReligionedOut
import app.namsor.client.models.BatchPersonalNameSubdivisionIn
import app.namsor.client.models.FirstLastNameCasteOut
import app.namsor.client.models.FirstLastNameCastegroupOut
import app.namsor.client.models.FirstLastNameGeoSubclassificationOut
import app.namsor.client.models.FirstLastNameReligionedOut
import app.namsor.client.models.PersonalNameCastegroupOut
import app.namsor.client.models.PersonalNameGeoSubclassificationOut
import app.namsor.client.models.PersonalNameReligionedOut

import com.squareup.moshi.Json

import app.namsor.client.infrastructure.ApiClient
import app.namsor.client.infrastructure.ApiResponse
import app.namsor.client.infrastructure.ClientException
import app.namsor.client.infrastructure.ClientError
import app.namsor.client.infrastructure.ServerException
import app.namsor.client.infrastructure.ServerError
import app.namsor.client.infrastructure.MultiValueMap
import app.namsor.client.infrastructure.PartConfig
import app.namsor.client.infrastructure.RequestConfig
import app.namsor.client.infrastructure.RequestMethod
import app.namsor.client.infrastructure.ResponseType
import app.namsor.client.infrastructure.Success
import app.namsor.client.infrastructure.toMultiValue

class IndianApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://v2.namsor.com/NamSorAPIv2")
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
     * 
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameCasteOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun casteIndianBatch(batchFirstLastNameGeoSubdivisionIn: BatchFirstLastNameGeoSubdivisionIn? = null) : BatchFirstLastNameCasteOut {
        val localVarResponse = casteIndianBatchWithHttpInfo(batchFirstLastNameGeoSubdivisionIn = batchFirstLastNameGeoSubdivisionIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNameCasteOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
     * 
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNameCasteOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun casteIndianBatchWithHttpInfo(batchFirstLastNameGeoSubdivisionIn: BatchFirstLastNameGeoSubdivisionIn?) : ApiResponse<BatchFirstLastNameCasteOut?> {
        val localVariableConfig = casteIndianBatchRequestConfig(batchFirstLastNameGeoSubdivisionIn = batchFirstLastNameGeoSubdivisionIn)

        return request<BatchFirstLastNameGeoSubdivisionIn, BatchFirstLastNameCasteOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation casteIndianBatch
     *
     * @param batchFirstLastNameGeoSubdivisionIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun casteIndianBatchRequestConfig(batchFirstLastNameGeoSubdivisionIn: BatchFirstLastNameGeoSubdivisionIn?) : RequestConfig<BatchFirstLastNameGeoSubdivisionIn> {
        val localVariableBody = batchFirstLastNameGeoSubdivisionIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/casteIndianBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return FirstLastNameCastegroupOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun castegroupIndian(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : FirstLastNameCastegroupOut {
        val localVarResponse = castegroupIndianWithHttpInfo(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNameCastegroupOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return ApiResponse<FirstLastNameCastegroupOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun castegroupIndianWithHttpInfo(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : ApiResponse<FirstLastNameCastegroupOut?> {
        val localVariableConfig = castegroupIndianRequestConfig(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return request<Unit, FirstLastNameCastegroupOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation castegroupIndian
     *
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return RequestConfig
     */
    fun castegroupIndianRequestConfig(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}".replace("{"+"subDivisionIso31662"+"}", encodeURIComponent(subDivisionIso31662.toString())).replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameCastegroupOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun castegroupIndianBatch(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn? = null) : BatchFirstLastNameCastegroupOut {
        val localVarResponse = castegroupIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn = batchFirstLastNameSubdivisionIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNameCastegroupOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNameCastegroupOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun castegroupIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn?) : ApiResponse<BatchFirstLastNameCastegroupOut?> {
        val localVariableConfig = castegroupIndianBatchRequestConfig(batchFirstLastNameSubdivisionIn = batchFirstLastNameSubdivisionIn)

        return request<BatchFirstLastNameSubdivisionIn, BatchFirstLastNameCastegroupOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation castegroupIndianBatch
     *
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun castegroupIndianBatchRequestConfig(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn?) : RequestConfig<BatchFirstLastNameSubdivisionIn> {
        val localVariableBody = batchFirstLastNameSubdivisionIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/castegroupIndianBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return PersonalNameCastegroupOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun castegroupIndianFull(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : PersonalNameCastegroupOut {
        val localVarResponse = castegroupIndianFullWithHttpInfo(subDivisionIso31662 = subDivisionIso31662, personalNameFull = personalNameFull)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PersonalNameCastegroupOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return ApiResponse<PersonalNameCastegroupOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun castegroupIndianFullWithHttpInfo(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : ApiResponse<PersonalNameCastegroupOut?> {
        val localVariableConfig = castegroupIndianFullRequestConfig(subDivisionIso31662 = subDivisionIso31662, personalNameFull = personalNameFull)

        return request<Unit, PersonalNameCastegroupOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation castegroupIndianFull
     *
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return RequestConfig
     */
    fun castegroupIndianFullRequestConfig(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}".replace("{"+"subDivisionIso31662"+"}", encodeURIComponent(subDivisionIso31662.toString())).replace("{"+"personalNameFull"+"}", encodeURIComponent(personalNameFull.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameCastegroupOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun castegroupIndianFullBatch(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn? = null) : BatchPersonalNameCastegroupOut {
        val localVarResponse = castegroupIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn = batchPersonalNameSubdivisionIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchPersonalNameCastegroupOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse<BatchPersonalNameCastegroupOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun castegroupIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn?) : ApiResponse<BatchPersonalNameCastegroupOut?> {
        val localVariableConfig = castegroupIndianFullBatchRequestConfig(batchPersonalNameSubdivisionIn = batchPersonalNameSubdivisionIn)

        return request<BatchPersonalNameSubdivisionIn, BatchPersonalNameCastegroupOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation castegroupIndianFullBatch
     *
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun castegroupIndianFullBatchRequestConfig(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn?) : RequestConfig<BatchPersonalNameSubdivisionIn> {
        val localVariableBody = batchPersonalNameSubdivisionIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/castegroupIndianFullBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return FirstLastNameCasteOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun castegroupIndianHindu(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : FirstLastNameCasteOut {
        val localVarResponse = castegroupIndianHinduWithHttpInfo(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNameCasteOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return ApiResponse<FirstLastNameCasteOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun castegroupIndianHinduWithHttpInfo(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : ApiResponse<FirstLastNameCasteOut?> {
        val localVariableConfig = castegroupIndianHinduRequestConfig(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return request<Unit, FirstLastNameCasteOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation castegroupIndianHindu
     *
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return RequestConfig
     */
    fun castegroupIndianHinduRequestConfig(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}".replace("{"+"subDivisionIso31662"+"}", encodeURIComponent(subDivisionIso31662.toString())).replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return PersonalNameReligionedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun religion(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : PersonalNameReligionedOut {
        val localVarResponse = religionWithHttpInfo(subDivisionIso31662 = subDivisionIso31662, personalNameFull = personalNameFull)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PersonalNameReligionedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return ApiResponse<PersonalNameReligionedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun religionWithHttpInfo(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : ApiResponse<PersonalNameReligionedOut?> {
        val localVariableConfig = religionRequestConfig(subDivisionIso31662 = subDivisionIso31662, personalNameFull = personalNameFull)

        return request<Unit, PersonalNameReligionedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation religion
     *
     * @param subDivisionIso31662 
     * @param personalNameFull 
     * @return RequestConfig
     */
    fun religionRequestConfig(subDivisionIso31662: kotlin.String, personalNameFull: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}".replace("{"+"subDivisionIso31662"+"}", encodeURIComponent(subDivisionIso31662.toString())).replace("{"+"personalNameFull"+"}", encodeURIComponent(personalNameFull.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return FirstLastNameReligionedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun religion1(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : FirstLastNameReligionedOut {
        val localVarResponse = religion1WithHttpInfo(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNameReligionedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return ApiResponse<FirstLastNameReligionedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun religion1WithHttpInfo(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : ApiResponse<FirstLastNameReligionedOut?> {
        val localVariableConfig = religion1RequestConfig(subDivisionIso31662 = subDivisionIso31662, firstName = firstName, lastName = lastName)

        return request<Unit, FirstLastNameReligionedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation religion1
     *
     * @param subDivisionIso31662 
     * @param firstName 
     * @param lastName 
     * @return RequestConfig
     */
    fun religion1RequestConfig(subDivisionIso31662: kotlin.String, firstName: kotlin.String, lastName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}".replace("{"+"subDivisionIso31662"+"}", encodeURIComponent(subDivisionIso31662.toString())).replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return BatchFirstLastNameReligionedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun religionIndianBatch(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn? = null) : BatchFirstLastNameReligionedOut {
        val localVarResponse = religionIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn = batchFirstLastNameSubdivisionIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNameReligionedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNameReligionedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun religionIndianBatchWithHttpInfo(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn?) : ApiResponse<BatchFirstLastNameReligionedOut?> {
        val localVariableConfig = religionIndianBatchRequestConfig(batchFirstLastNameSubdivisionIn = batchFirstLastNameSubdivisionIn)

        return request<BatchFirstLastNameSubdivisionIn, BatchFirstLastNameReligionedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation religionIndianBatch
     *
     * @param batchFirstLastNameSubdivisionIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun religionIndianBatchRequestConfig(batchFirstLastNameSubdivisionIn: BatchFirstLastNameSubdivisionIn?) : RequestConfig<BatchFirstLastNameSubdivisionIn> {
        val localVariableBody = batchFirstLastNameSubdivisionIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/religionIndianBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return BatchPersonalNameReligionedOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun religionIndianFullBatch(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn? = null) : BatchPersonalNameReligionedOut {
        val localVarResponse = religionIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn = batchPersonalNameSubdivisionIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchPersonalNameReligionedOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return ApiResponse<BatchPersonalNameReligionedOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun religionIndianFullBatchWithHttpInfo(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn?) : ApiResponse<BatchPersonalNameReligionedOut?> {
        val localVariableConfig = religionIndianFullBatchRequestConfig(batchPersonalNameSubdivisionIn = batchPersonalNameSubdivisionIn)

        return request<BatchPersonalNameSubdivisionIn, BatchPersonalNameReligionedOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation religionIndianFullBatch
     *
     * @param batchPersonalNameSubdivisionIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun religionIndianFullBatchRequestConfig(batchPersonalNameSubdivisionIn: BatchPersonalNameSubdivisionIn?) : RequestConfig<BatchPersonalNameSubdivisionIn> {
        val localVariableBody = batchPersonalNameSubdivisionIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/religionIndianFullBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName 
     * @param lastName 
     * @return FirstLastNameGeoSubclassificationOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subclassificationIndian(firstName: kotlin.String, lastName: kotlin.String) : FirstLastNameGeoSubclassificationOut {
        val localVarResponse = subclassificationIndianWithHttpInfo(firstName = firstName, lastName = lastName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FirstLastNameGeoSubclassificationOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param firstName 
     * @param lastName 
     * @return ApiResponse<FirstLastNameGeoSubclassificationOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subclassificationIndianWithHttpInfo(firstName: kotlin.String, lastName: kotlin.String) : ApiResponse<FirstLastNameGeoSubclassificationOut?> {
        val localVariableConfig = subclassificationIndianRequestConfig(firstName = firstName, lastName = lastName)

        return request<Unit, FirstLastNameGeoSubclassificationOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subclassificationIndian
     *
     * @param firstName 
     * @param lastName 
     * @return RequestConfig
     */
    fun subclassificationIndianRequestConfig(firstName: kotlin.String, lastName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/subclassificationIndian/{firstName}/{lastName}".replace("{"+"firstName"+"}", encodeURIComponent(firstName.toString())).replace("{"+"lastName"+"}", encodeURIComponent(lastName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return BatchFirstLastNameGeoSubclassificationOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subclassificationIndianBatch(batchFirstLastNameGeoIn: BatchFirstLastNameGeoIn? = null) : BatchFirstLastNameGeoSubclassificationOut {
        val localVarResponse = subclassificationIndianBatchWithHttpInfo(batchFirstLastNameGeoIn = batchFirstLastNameGeoIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchFirstLastNameGeoSubclassificationOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return ApiResponse<BatchFirstLastNameGeoSubclassificationOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subclassificationIndianBatchWithHttpInfo(batchFirstLastNameGeoIn: BatchFirstLastNameGeoIn?) : ApiResponse<BatchFirstLastNameGeoSubclassificationOut?> {
        val localVariableConfig = subclassificationIndianBatchRequestConfig(batchFirstLastNameGeoIn = batchFirstLastNameGeoIn)

        return request<BatchFirstLastNameGeoIn, BatchFirstLastNameGeoSubclassificationOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subclassificationIndianBatch
     *
     * @param batchFirstLastNameGeoIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun subclassificationIndianBatchRequestConfig(batchFirstLastNameGeoIn: BatchFirstLastNameGeoIn?) : RequestConfig<BatchFirstLastNameGeoIn> {
        val localVariableBody = batchFirstLastNameGeoIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/subclassificationIndianBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName 
     * @return PersonalNameGeoSubclassificationOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subclassificationIndianFull(fullName: kotlin.String) : PersonalNameGeoSubclassificationOut {
        val localVarResponse = subclassificationIndianFullWithHttpInfo(fullName = fullName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PersonalNameGeoSubclassificationOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param fullName 
     * @return ApiResponse<PersonalNameGeoSubclassificationOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subclassificationIndianFullWithHttpInfo(fullName: kotlin.String) : ApiResponse<PersonalNameGeoSubclassificationOut?> {
        val localVariableConfig = subclassificationIndianFullRequestConfig(fullName = fullName)

        return request<Unit, PersonalNameGeoSubclassificationOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subclassificationIndianFull
     *
     * @param fullName 
     * @return RequestConfig
     */
    fun subclassificationIndianFullRequestConfig(fullName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api2/json/subclassificationIndianFull/{fullName}".replace("{"+"fullName"+"}", encodeURIComponent(fullName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return BatchPersonalNameGeoSubclassificationOut
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subclassificationIndianFullBatch(batchPersonalNameGeoIn: BatchPersonalNameGeoIn? = null) : BatchPersonalNameGeoSubclassificationOut {
        val localVarResponse = subclassificationIndianFullBatchWithHttpInfo(batchPersonalNameGeoIn = batchPersonalNameGeoIn)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchPersonalNameGeoSubclassificationOut
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return ApiResponse<BatchPersonalNameGeoSubclassificationOut?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subclassificationIndianFullBatchWithHttpInfo(batchPersonalNameGeoIn: BatchPersonalNameGeoIn?) : ApiResponse<BatchPersonalNameGeoSubclassificationOut?> {
        val localVariableConfig = subclassificationIndianFullBatchRequestConfig(batchPersonalNameGeoIn = batchPersonalNameGeoIn)

        return request<BatchPersonalNameGeoIn, BatchPersonalNameGeoSubclassificationOut>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subclassificationIndianFullBatch
     *
     * @param batchPersonalNameGeoIn A list of personal names (optional)
     * @return RequestConfig
     */
    fun subclassificationIndianFullBatchRequestConfig(batchPersonalNameGeoIn: BatchPersonalNameGeoIn?) : RequestConfig<BatchPersonalNameGeoIn> {
        val localVariableBody = batchPersonalNameGeoIn
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api2/json/subclassificationIndianFullBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
