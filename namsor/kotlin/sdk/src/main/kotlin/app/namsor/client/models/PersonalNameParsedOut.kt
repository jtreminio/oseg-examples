/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.namsor.client.models

import app.namsor.client.models.FirstLastNameOut

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param script 
 * @param id 
 * @param explanation 
 * @param name The input name.
 * @param nameParserType Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 * @param nameParserTypeAlt Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 * @param firstLastName 
 * @param score Higher score is better, but score is not normalized. Use calibratedProbability if available. 
 */


data class PersonalNameParsedOut (

    @Json(name = "script")
    val script: kotlin.String? = null,

    @Json(name = "id")
    val id: kotlin.String? = null,

    @Json(name = "explanation")
    val explanation: kotlin.String? = null,

    /* The input name. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order. */
    @Json(name = "nameParserType")
    val nameParserType: PersonalNameParsedOut.NameParserType? = null,

    /* Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order. */
    @Json(name = "nameParserTypeAlt")
    val nameParserTypeAlt: PersonalNameParsedOut.NameParserTypeAlt? = null,

    @Json(name = "firstLastName")
    val firstLastName: FirstLastNameOut? = null,

    /* Higher score is better, but score is not normalized. Use calibratedProbability if available.  */
    @Json(name = "score")
    val score: kotlin.Double? = null

) {

    /**
     * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     *
     * Values: FN1LN1,LN1FN1,FN1LN2,LN2FN1,FN1LNx,LNxFN1,FN2LN1,LN1FN2,FN2LN2,LN2FN2,FN2LNx,LNxFN2,FNxLN1,LN1FNx,FNxLN2,LN2FNx,FNxLNx,LNxFNx
     */
    @JsonClass(generateAdapter = false)
    enum class NameParserType(val value: kotlin.String) {
        @Json(name = "FN1LN1") FN1LN1("FN1LN1"),
        @Json(name = "LN1FN1") LN1FN1("LN1FN1"),
        @Json(name = "FN1LN2") FN1LN2("FN1LN2"),
        @Json(name = "LN2FN1") LN2FN1("LN2FN1"),
        @Json(name = "FN1LNx") FN1LNx("FN1LNx"),
        @Json(name = "LNxFN1") LNxFN1("LNxFN1"),
        @Json(name = "FN2LN1") FN2LN1("FN2LN1"),
        @Json(name = "LN1FN2") LN1FN2("LN1FN2"),
        @Json(name = "FN2LN2") FN2LN2("FN2LN2"),
        @Json(name = "LN2FN2") LN2FN2("LN2FN2"),
        @Json(name = "FN2LNx") FN2LNx("FN2LNx"),
        @Json(name = "LNxFN2") LNxFN2("LNxFN2"),
        @Json(name = "FNxLN1") FNxLN1("FNxLN1"),
        @Json(name = "LN1FNx") LN1FNx("LN1FNx"),
        @Json(name = "FNxLN2") FNxLN2("FNxLN2"),
        @Json(name = "LN2FNx") LN2FNx("LN2FNx"),
        @Json(name = "FNxLNx") FNxLNx("FNxLNx"),
        @Json(name = "LNxFNx") LNxFNx("LNxFNx");
    }
    /**
     * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     *
     * Values: FN1LN1,LN1FN1,FN1LN2,LN2FN1,FN1LNx,LNxFN1,FN2LN1,LN1FN2,FN2LN2,LN2FN2,FN2LNx,LNxFN2,FNxLN1,LN1FNx,FNxLN2,LN2FNx,FNxLNx,LNxFNx
     */
    @JsonClass(generateAdapter = false)
    enum class NameParserTypeAlt(val value: kotlin.String) {
        @Json(name = "FN1LN1") FN1LN1("FN1LN1"),
        @Json(name = "LN1FN1") LN1FN1("LN1FN1"),
        @Json(name = "FN1LN2") FN1LN2("FN1LN2"),
        @Json(name = "LN2FN1") LN2FN1("LN2FN1"),
        @Json(name = "FN1LNx") FN1LNx("FN1LNx"),
        @Json(name = "LNxFN1") LNxFN1("LNxFN1"),
        @Json(name = "FN2LN1") FN2LN1("FN2LN1"),
        @Json(name = "LN1FN2") LN1FN2("LN1FN2"),
        @Json(name = "FN2LN2") FN2LN2("FN2LN2"),
        @Json(name = "LN2FN2") LN2FN2("LN2FN2"),
        @Json(name = "FN2LNx") FN2LNx("FN2LNx"),
        @Json(name = "LNxFN2") LNxFN2("LNxFN2"),
        @Json(name = "FNxLN1") FNxLN1("FNxLN1"),
        @Json(name = "LN1FNx") LN1FNx("LN1FNx"),
        @Json(name = "FNxLN2") FNxLN2("FNxLN2"),
        @Json(name = "LN2FNx") LN2FNx("LN2FNx"),
        @Json(name = "FNxLNx") FNxLNx("FNxLNx"),
        @Json(name = "LNxFNx") LNxFNx("LNxFNx");
    }

}

