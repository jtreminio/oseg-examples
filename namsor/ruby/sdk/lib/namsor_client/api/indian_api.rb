=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class IndianApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoSubdivisionIn] :batch_first_last_name_geo_subdivision_in A list of personal names
    # @return [BatchFirstLastNameCasteOut]
    def caste_indian_batch(opts = {})
      data, _status_code, _headers = caste_indian_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name caste of up to 100 personal Indian Hindu names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoSubdivisionIn] :batch_first_last_name_geo_subdivision_in A list of personal names
    # @return [Array<(BatchFirstLastNameCasteOut, Integer, Hash)>] BatchFirstLastNameCasteOut data, response status code and response headers
    def caste_indian_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.caste_indian_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/casteIndianBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameCasteOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.caste_indian_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#caste_indian_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameCastegroupOut]
    def castegroup_indian(sub_division_iso31662, first_name, last_name, opts = {})
      data, _status_code, _headers = castegroup_indian_with_http_info(sub_division_iso31662, first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a first / last name.
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameCastegroupOut, Integer, Hash)>] FirstLastNameCastegroupOut data, response status code and response headers
    def castegroup_indian_with_http_info(sub_division_iso31662, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.castegroup_indian ...'
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling IndianApi.castegroup_indian"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling IndianApi.castegroup_indian"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling IndianApi.castegroup_indian"
      end
      # resource path
      local_var_path = '/api2/json/castegroupIndian/{subDivisionIso31662}/{firstName}/{lastName}'.sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameCastegroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.castegroup_indian",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#castegroup_indian\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameSubdivisionIn] :batch_first_last_name_subdivision_in A list of personal names
    # @return [BatchFirstLastNameCastegroupOut]
    def castegroup_indian_batch(opts = {})
      data, _status_code, _headers = castegroup_indian_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal first / last names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameSubdivisionIn] :batch_first_last_name_subdivision_in A list of personal names
    # @return [Array<(BatchFirstLastNameCastegroupOut, Integer, Hash)>] BatchFirstLastNameCastegroupOut data, response status code and response headers
    def castegroup_indian_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.castegroup_indian_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/castegroupIndianBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameCastegroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.castegroup_indian_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#castegroup_indian_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameCastegroupOut]
    def castegroup_indian_full(sub_division_iso31662, personal_name_full, opts = {})
      data, _status_code, _headers = castegroup_indian_full_with_http_info(sub_division_iso31662, personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameCastegroupOut, Integer, Hash)>] PersonalNameCastegroupOut data, response status code and response headers
    def castegroup_indian_full_with_http_info(sub_division_iso31662, personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.castegroup_indian_full ...'
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling IndianApi.castegroup_indian_full"
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling IndianApi.castegroup_indian_full"
      end
      # resource path
      local_var_path = '/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}'.sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameCastegroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.castegroup_indian_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#castegroup_indian_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameSubdivisionIn] :batch_personal_name_subdivision_in A list of personal names
    # @return [BatchPersonalNameCastegroupOut]
    def castegroup_indian_full_batch(opts = {})
      data, _status_code, _headers = castegroup_indian_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameSubdivisionIn] :batch_personal_name_subdivision_in A list of personal names
    # @return [Array<(BatchPersonalNameCastegroupOut, Integer, Hash)>] BatchPersonalNameCastegroupOut data, response status code and response headers
    def castegroup_indian_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.castegroup_indian_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/castegroupIndianFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameCastegroupOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.castegroup_indian_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#castegroup_indian_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameCasteOut]
    def castegroup_indian_hindu(sub_division_iso31662, first_name, last_name, opts = {})
      data, _status_code, _headers = castegroup_indian_hindu_with_http_info(sub_division_iso31662, first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian name caste of a personal Hindu name.
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameCasteOut, Integer, Hash)>] FirstLastNameCasteOut data, response status code and response headers
    def castegroup_indian_hindu_with_http_info(sub_division_iso31662, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.castegroup_indian_hindu ...'
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling IndianApi.castegroup_indian_hindu"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling IndianApi.castegroup_indian_hindu"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling IndianApi.castegroup_indian_hindu"
      end
      # resource path
      local_var_path = '/api2/json/casteIndian/{subDivisionIso31662}/{firstName}/{lastName}'.sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameCasteOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.castegroup_indian_hindu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#castegroup_indian_hindu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameReligionedOut]
    def religion(sub_division_iso31662, personal_name_full, opts = {})
      data, _status_code, _headers = religion_with_http_info(sub_division_iso31662, personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameReligionedOut, Integer, Hash)>] PersonalNameReligionedOut data, response status code and response headers
    def religion_with_http_info(sub_division_iso31662, personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.religion ...'
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling IndianApi.religion"
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling IndianApi.religion"
      end
      # resource path
      local_var_path = '/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}'.sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.religion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#religion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameReligionedOut]
    def religion1(sub_division_iso31662, first_name, last_name, opts = {})
      data, _status_code, _headers = religion1_with_http_info(sub_division_iso31662, first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian first/last name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameReligionedOut, Integer, Hash)>] FirstLastNameReligionedOut data, response status code and response headers
    def religion1_with_http_info(sub_division_iso31662, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.religion1 ...'
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling IndianApi.religion1"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling IndianApi.religion1"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling IndianApi.religion1"
      end
      # resource path
      local_var_path = '/api2/json/religionIndian/{subDivisionIso31662}/{firstName}/{lastName}'.sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.religion1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#religion1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameSubdivisionIn] :batch_first_last_name_subdivision_in A list of personal names
    # @return [BatchFirstLastNameReligionedOut]
    def religion_indian_batch(opts = {})
      data, _status_code, _headers = religion_indian_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameSubdivisionIn] :batch_first_last_name_subdivision_in A list of personal names
    # @return [Array<(BatchFirstLastNameReligionedOut, Integer, Hash)>] BatchFirstLastNameReligionedOut data, response status code and response headers
    def religion_indian_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.religion_indian_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/religionIndianBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.religion_indian_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#religion_indian_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameSubdivisionIn] :batch_personal_name_subdivision_in A list of personal names
    # @return [BatchPersonalNameReligionedOut]
    def religion_indian_full_batch(opts = {})
      data, _status_code, _headers = religion_indian_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameSubdivisionIn] :batch_personal_name_subdivision_in A list of personal names
    # @return [Array<(BatchPersonalNameReligionedOut, Integer, Hash)>] BatchPersonalNameReligionedOut data, response status code and response headers
    def religion_indian_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.religion_indian_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/religionIndianFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.religion_indian_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#religion_indian_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGeoSubclassificationOut]
    def subclassification_indian(first_name, last_name, opts = {})
      data, _status_code, _headers = subclassification_indian_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGeoSubclassificationOut, Integer, Hash)>] FirstLastNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_indian_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.subclassification_indian ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling IndianApi.subclassification_indian"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling IndianApi.subclassification_indian"
      end
      # resource path
      local_var_path = '/api2/json/subclassificationIndian/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.subclassification_indian",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#subclassification_indian\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameGeoSubclassificationOut]
    def subclassification_indian_batch(opts = {})
      data, _status_code, _headers = subclassification_indian_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameGeoSubclassificationOut, Integer, Hash)>] BatchFirstLastNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_indian_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.subclassification_indian_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/subclassificationIndianBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.subclassification_indian_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#subclassification_indian_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGeoSubclassificationOut]
    def subclassification_indian_full(full_name, opts = {})
      data, _status_code, _headers = subclassification_indian_full_with_http_info(full_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGeoSubclassificationOut, Integer, Hash)>] PersonalNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_indian_full_with_http_info(full_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.subclassification_indian_full ...'
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling IndianApi.subclassification_indian_full"
      end
      # resource path
      local_var_path = '/api2/json/subclassificationIndianFull/{fullName}'.sub('{' + 'fullName' + '}', CGI.escape(full_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.subclassification_indian_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#subclassification_indian_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameGeoSubclassificationOut]
    def subclassification_indian_full_batch(opts = {})
      data, _status_code, _headers = subclassification_indian_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameGeoSubclassificationOut, Integer, Hash)>] BatchPersonalNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_indian_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndianApi.subclassification_indian_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/subclassificationIndianFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndianApi.subclassification_indian_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndianApi#subclassification_indian_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
