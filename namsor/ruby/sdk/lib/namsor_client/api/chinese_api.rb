=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class ChineseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchCandidatesOut]
    def chinese_name_candidates(chinese_surname_latin, chinese_given_name_latin, opts = {})
      data, _status_code, _headers = chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchCandidatesOut, Integer, Hash)>] NameMatchCandidatesOut data, response status code and response headers
    def chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.chinese_name_candidates"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.chinese_name_candidates"
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}'.sub('{' + 'chineseSurnameLatin' + '}', CGI.escape(chinese_surname_latin.to_s)).sub('{' + 'chineseGivenNameLatin' + '}', CGI.escape(chinese_given_name_latin.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_candidates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [BatchNameMatchCandidatesOut]
    def chinese_name_candidates_batch(opts = {})
      data, _status_code, _headers = chinese_name_candidates_batch_with_http_info(opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Integer, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def chinese_name_candidates_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidatesBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_candidates_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGenderIn] :batch_first_last_name_gender_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [BatchNameMatchCandidatesOut]
    def chinese_name_candidates_gender_batch(opts = {})
      data, _status_code, _headers = chinese_name_candidates_gender_batch_with_http_info(opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname) ex. Wang Xiaoming.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGenderIn] :batch_first_last_name_gender_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Integer, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def chinese_name_candidates_gender_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_candidates_gender_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/chineseNameCandidatesGenderBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_gender_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_candidates_gender_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_candidates_gender_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param known_gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchCandidatesOut]
    def chinese_name_gender_candidates(chinese_surname_latin, chinese_given_name_latin, known_gender, opts = {})
      data, _status_code, _headers = chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender (&#39;male&#39; or &#39;female&#39;)
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param known_gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchCandidatesOut, Integer, Hash)>] NameMatchCandidatesOut data, response status code and response headers
    def chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_gender_candidates ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # verify the required parameter 'known_gender' is set
      if @api_client.config.client_side_validation && known_gender.nil?
        fail ArgumentError, "Missing the required parameter 'known_gender' when calling ChineseApi.chinese_name_gender_candidates"
      end
      # resource path
      local_var_path = '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}'.sub('{' + 'chineseSurnameLatin' + '}', CGI.escape(chinese_surname_latin.to_s)).sub('{' + 'chineseGivenNameLatin' + '}', CGI.escape(chinese_given_name_latin.to_s)).sub('{' + 'knownGender' + '}', CGI.escape(known_gender.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_gender_candidates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_gender_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchedOut]
    def chinese_name_match(chinese_surname_latin, chinese_given_name_latin, chinese_name, opts = {})
      data, _status_code, _headers = chinese_name_match_with_http_info(chinese_surname_latin, chinese_given_name_latin, chinese_name, opts)
      data
    end

    # Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchedOut, Integer, Hash)>] NameMatchedOut data, response status code and response headers
    def chinese_name_match_with_http_info(chinese_surname_latin, chinese_given_name_latin, chinese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_match ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.chinese_name_match"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.chinese_name_match"
      end
      # verify the required parameter 'chinese_name' is set
      if @api_client.config.client_side_validation && chinese_name.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_name' when calling ChineseApi.chinese_name_match"
      end
      # resource path
      local_var_path = '/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}'.sub('{' + 'chineseSurnameLatin' + '}', CGI.escape(chinese_surname_latin.to_s)).sub('{' + 'chineseGivenNameLatin' + '}', CGI.escape(chinese_given_name_latin.to_s)).sub('{' + 'chineseName' + '}', CGI.escape(chinese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_match",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_match\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming
    # @param [Hash] opts the optional parameters
    # @option opts [BatchMatchPersonalFirstLastNameIn] :batch_match_personal_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [BatchNameMatchedOut]
    def chinese_name_match_batch(opts = {})
      data, _status_code, _headers = chinese_name_match_batch_with_http_info(opts)
      data
    end

    # Identify Chinese name candidates, based on the romanized name (firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname), ex. Wang Xiaoming
    # @param [Hash] opts the optional parameters
    # @option opts [BatchMatchPersonalFirstLastNameIn] :batch_match_personal_first_last_name_in A list of personal Chinese names in LATIN, firstName &#x3D; chineseGivenName; lastName&#x3D;chineseSurname
    # @return [Array<(BatchNameMatchedOut, Integer, Hash)>] BatchNameMatchedOut data, response status code and response headers
    def chinese_name_match_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.chinese_name_match_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/chineseNameMatchBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_match_personal_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.chinese_name_match_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#chinese_name_match_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a Chinese full name ex. 王晓明
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGenderedOut]
    def gender_chinese_name(chinese_name, opts = {})
      data, _status_code, _headers = gender_chinese_name_with_http_info(chinese_name, opts)
      data
    end

    # Infer the likely gender of a Chinese full name ex. 王晓明
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGenderedOut, Integer, Hash)>] PersonalNameGenderedOut data, response status code and response headers
    def gender_chinese_name_with_http_info(chinese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.gender_chinese_name ...'
      end
      # verify the required parameter 'chinese_name' is set
      if @api_client.config.client_side_validation && chinese_name.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_name' when calling ChineseApi.gender_chinese_name"
      end
      # resource path
      local_var_path = '/api2/json/genderChineseName/{chineseName}'.sub('{' + 'chineseName' + '}', CGI.escape(chinese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.gender_chinese_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#gender_chinese_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 full names ex. 王晓明
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names, with a country ISO2 code
    # @return [BatchPersonalNameGenderedOut]
    def gender_chinese_name_batch(opts = {})
      data, _status_code, _headers = gender_chinese_name_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 full names ex. 王晓明
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names, with a country ISO2 code
    # @return [Array<(BatchPersonalNameGenderedOut, Integer, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_chinese_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.gender_chinese_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderChineseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.gender_chinese_name_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#gender_chinese_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a Chinese name in LATIN (Pinyin).
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_chinese_name_pinyin(chinese_surname_latin, chinese_given_name_latin, opts = {})
      data, _status_code, _headers = gender_chinese_name_pinyin_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts)
      data
    end

    # Infer the likely gender of a Chinese name in LATIN (Pinyin).
    # @param chinese_surname_latin [String] 
    # @param chinese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Integer, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_chinese_name_pinyin_with_http_info(chinese_surname_latin, chinese_given_name_latin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.gender_chinese_name_pinyin ...'
      end
      # verify the required parameter 'chinese_surname_latin' is set
      if @api_client.config.client_side_validation && chinese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_surname_latin' when calling ChineseApi.gender_chinese_name_pinyin"
      end
      # verify the required parameter 'chinese_given_name_latin' is set
      if @api_client.config.client_side_validation && chinese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_given_name_latin' when calling ChineseApi.gender_chinese_name_pinyin"
      end
      # resource path
      local_var_path = '/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}'.sub('{' + 'chineseSurnameLatin' + '}', CGI.escape(chinese_surname_latin.to_s)).sub('{' + 'chineseGivenNameLatin' + '}', CGI.escape(chinese_given_name_latin.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.gender_chinese_name_pinyin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#gender_chinese_name_pinyin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of names, with country code.
    # @return [BatchFirstLastNameGenderedOut]
    def gender_chinese_name_pinyin_batch(opts = {})
      data, _status_code, _headers = gender_chinese_name_pinyin_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of names, with country code.
    # @return [Array<(BatchFirstLastNameGenderedOut, Integer, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_chinese_name_pinyin_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.gender_chinese_name_pinyin_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderChineseNamePinyinBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.gender_chinese_name_pinyin_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#gender_chinese_name_pinyin_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_chinese_name(chinese_name, opts = {})
      data, _status_code, _headers = parse_chinese_name_with_http_info(chinese_name, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name)
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Integer, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_chinese_name_with_http_info(chinese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.parse_chinese_name ...'
      end
      # verify the required parameter 'chinese_name' is set
      if @api_client.config.client_side_validation && chinese_name.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_name' when calling ChineseApi.parse_chinese_name"
      end
      # resource path
      local_var_path = '/api2/json/parseChineseName/{chineseName}'.sub('{' + 'chineseName' + '}', CGI.escape(chinese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.parse_chinese_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#parse_chinese_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_chinese_name_batch(opts = {})
      data, _status_code, _headers = parse_chinese_name_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. 王晓明 -&gt; 王(surname) 晓明(given name).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Integer, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_chinese_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.parse_chinese_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseChineseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.parse_chinese_name_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#parse_chinese_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def pinyin_chinese_name(chinese_name, opts = {})
      data, _status_code, _headers = pinyin_chinese_name_with_http_info(chinese_name, opts)
      data
    end

    # Romanize the Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name)
    # @param chinese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Integer, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def pinyin_chinese_name_with_http_info(chinese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.pinyin_chinese_name ...'
      end
      # verify the required parameter 'chinese_name' is set
      if @api_client.config.client_side_validation && chinese_name.nil?
        fail ArgumentError, "Missing the required parameter 'chinese_name' when calling ChineseApi.pinyin_chinese_name"
      end
      # resource path
      local_var_path = '/api2/json/pinyinChineseName/{chineseName}'.sub('{' + 'chineseName' + '}', CGI.escape(chinese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.pinyin_chinese_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#pinyin_chinese_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of Chinese names
    # @return [BatchPersonalNameParsedOut]
    def pinyin_chinese_name_batch(opts = {})
      data, _status_code, _headers = pinyin_chinese_name_batch_with_http_info(opts)
      data
    end

    # Romanize a list of Chinese name to Pinyin, ex. 王晓明 -&gt; Wang (surname) Xiaoming (given name).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of Chinese names
    # @return [Array<(BatchPersonalNameParsedOut, Integer, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def pinyin_chinese_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChineseApi.pinyin_chinese_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/pinyinChineseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"ChineseApi.pinyin_chinese_name_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChineseApi#pinyin_chinese_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
