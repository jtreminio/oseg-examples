=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class GeneralApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Infer the likely type of a proper noun (personal name, brand name, place name etc.)
    # @param proper_noun [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProperNounCategorizedOut]
    def name_type(proper_noun, opts = {})
      data, _status_code, _headers = name_type_with_http_info(proper_noun, opts)
      data
    end

    # Infer the likely type of a proper noun (personal name, brand name, place name etc.)
    # @param proper_noun [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProperNounCategorizedOut, Integer, Hash)>] ProperNounCategorizedOut data, response status code and response headers
    def name_type_with_http_info(proper_noun, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.name_type ...'
      end
      # verify the required parameter 'proper_noun' is set
      if @api_client.config.client_side_validation && proper_noun.nil?
        fail ArgumentError, "Missing the required parameter 'proper_noun' when calling GeneralApi.name_type"
      end
      # resource path
      local_var_path = '/api2/json/nameType/{properNoun}'.sub('{' + 'properNoun' + '}', CGI.escape(proper_noun.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProperNounCategorizedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GeneralApi.name_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#name_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchNameIn] :batch_name_in A list of proper names
    # @return [BatchProperNounCategorizedOut]
    def name_type_batch(opts = {})
      data, _status_code, _headers = name_type_batch_with_http_info(opts)
      data
    end

    # Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchNameIn] :batch_name_in A list of proper names
    # @return [Array<(BatchProperNounCategorizedOut, Integer, Hash)>] BatchProperNounCategorizedOut data, response status code and response headers
    def name_type_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.name_type_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/nameTypeBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchProperNounCategorizedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GeneralApi.name_type_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#name_type_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely type of a proper noun (personal name, brand name, place name etc.)
    # @param proper_noun [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProperNounCategorizedOut]
    def name_type_geo(proper_noun, country_iso2, opts = {})
      data, _status_code, _headers = name_type_geo_with_http_info(proper_noun, country_iso2, opts)
      data
    end

    # Infer the likely type of a proper noun (personal name, brand name, place name etc.)
    # @param proper_noun [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProperNounCategorizedOut, Integer, Hash)>] ProperNounCategorizedOut data, response status code and response headers
    def name_type_geo_with_http_info(proper_noun, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.name_type_geo ...'
      end
      # verify the required parameter 'proper_noun' is set
      if @api_client.config.client_side_validation && proper_noun.nil?
        fail ArgumentError, "Missing the required parameter 'proper_noun' when calling GeneralApi.name_type_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling GeneralApi.name_type_geo"
      end
      # resource path
      local_var_path = '/api2/json/nameTypeGeo/{properNoun}/{countryIso2}'.sub('{' + 'properNoun' + '}', CGI.escape(proper_noun.to_s)).sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProperNounCategorizedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GeneralApi.name_type_geo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#name_type_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchNameGeoIn] :batch_name_geo_in A list of proper names
    # @return [BatchProperNounCategorizedOut]
    def name_type_geo_batch(opts = {})
      data, _status_code, _headers = name_type_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchNameGeoIn] :batch_name_geo_in A list of proper names
    # @return [Array<(BatchProperNounCategorizedOut, Integer, Hash)>] BatchProperNounCategorizedOut data, response status code and response headers
    def name_type_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeneralApi.name_type_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/nameTypeGeoBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchProperNounCategorizedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GeneralApi.name_type_geo_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeneralApi#name_type_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
