=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate/deactivate anonymization for a source.
    # @param source [String] 
    # @param anonymized [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def anonymize(source, anonymized, opts = {})
      anonymize_with_http_info(source, anonymized, opts)
      nil
    end

    # Activate/deactivate anonymization for a source.
    # @param source [String] 
    # @param anonymized [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def anonymize_with_http_info(source, anonymized, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.anonymize ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.anonymize"
      end
      # verify the required parameter 'anonymized' is set
      if @api_client.config.client_side_validation && anonymized.nil?
        fail ArgumentError, "Missing the required parameter 'anonymized' when calling AdminApi.anonymize"
      end
      # resource path
      local_var_path = '/api2/json/anonymize/{source}/{anonymized}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'anonymized' + '}', CGI.escape(anonymized.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.anonymize",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#anonymize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate/deactivate anonymization for a source.
    # @param source [String] 
    # @param anonymized [Boolean] 
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def anonymize1(source, anonymized, token, opts = {})
      data, _status_code, _headers = anonymize1_with_http_info(source, anonymized, token, opts)
      data
    end

    # Activate/deactivate anonymization for a source.
    # @param source [String] 
    # @param anonymized [Boolean] 
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Integer, Hash)>] APIKeyOut data, response status code and response headers
    def anonymize1_with_http_info(source, anonymized, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.anonymize1 ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.anonymize1"
      end
      # verify the required parameter 'anonymized' is set
      if @api_client.config.client_side_validation && anonymized.nil?
        fail ArgumentError, "Missing the required parameter 'anonymized' when calling AdminApi.anonymize1"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.anonymize1"
      end
      # resource path
      local_var_path = '/api2/json/anonymize/{source}/{anonymized}/{token}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'anonymized' + '}', CGI.escape(anonymized.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.anonymize1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#anonymize1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Read API Key info.
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def api_key_info(opts = {})
      data, _status_code, _headers = api_key_info_with_http_info(opts)
      data
    end

    # Read API Key info.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Integer, Hash)>] APIKeyOut data, response status code and response headers
    def api_key_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_key_info ...'
      end
      # resource path
      local_var_path = '/api2/json/apiKeyInfo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.api_key_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_key_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
    # @param [Hash] opts the optional parameters
    # @return [APIClassifiersStatusOut]
    def api_status(opts = {})
      data, _status_code, _headers = api_status_with_http_info(opts)
      data
    end

    # Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIClassifiersStatusOut, Integer, Hash)>] APIClassifiersStatusOut data, response status code and response headers
    def api_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_status ...'
      end
      # resource path
      local_var_path = '/api2/json/apiStatus'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIClassifiersStatusOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.api_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print current API usage.
    # @param [Hash] opts the optional parameters
    # @return [APIPeriodUsageOut]
    def api_usage(opts = {})
      data, _status_code, _headers = api_usage_with_http_info(opts)
      data
    end

    # Print current API usage.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIPeriodUsageOut, Integer, Hash)>] APIPeriodUsageOut data, response status code and response headers
    def api_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIPeriodUsageOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.api_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print historical API usage.
    # @param [Hash] opts the optional parameters
    # @return [APIUsageHistoryOut]
    def api_usage_history(opts = {})
      data, _status_code, _headers = api_usage_history_with_http_info(opts)
      data
    end

    # Print historical API usage.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUsageHistoryOut, Integer, Hash)>] APIUsageHistoryOut data, response status code and response headers
    def api_usage_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage_history ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsageHistory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIUsageHistoryOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.api_usage_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print historical API usage (in an aggregated view, by service, by day/hour/min).
    # @param [Hash] opts the optional parameters
    # @return [APIUsageAggregatedOut]
    def api_usage_history_aggregate(opts = {})
      data, _status_code, _headers = api_usage_history_aggregate_with_http_info(opts)
      data
    end

    # Print historical API usage (in an aggregated view, by service, by day/hour/min).
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIUsageAggregatedOut, Integer, Hash)>] APIUsageAggregatedOut data, response status code and response headers
    def api_usage_history_aggregate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.api_usage_history_aggregate ...'
      end
      # resource path
      local_var_path = '/api2/json/apiUsageHistoryAggregate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIUsageAggregatedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.api_usage_history_aggregate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#api_usage_history_aggregate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
    # @param [Hash] opts the optional parameters
    # @return [APIServicesOut]
    def available_services(opts = {})
      data, _status_code, _headers = available_services_with_http_info(opts)
      data
    end

    # List of classification services and usage cost in Units per classification (default is 1&#x3D;ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIServicesOut, Integer, Hash)>] APIServicesOut data, response status code and response headers
    def available_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.available_services ...'
      end
      # resource path
      local_var_path = '/api2/json/apiServices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIServicesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.available_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#available_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate/deactivate an API Key.
    # @param source [String] The API Key to set as enabled/disabled.
    # @param disabled [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable(source, disabled, opts = {})
      disable_with_http_info(source, disabled, opts)
      nil
    end

    # Activate/deactivate an API Key.
    # @param source [String] The API Key to set as enabled/disabled.
    # @param disabled [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_with_http_info(source, disabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.disable ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.disable"
      end
      # verify the required parameter 'disabled' is set
      if @api_client.config.client_side_validation && disabled.nil?
        fail ArgumentError, "Missing the required parameter 'disabled' when calling AdminApi.disable"
      end
      # resource path
      local_var_path = '/api2/json/disable/{source}/{disabled}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'disabled' + '}', CGI.escape(disabled.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.disable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#disable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate/deactivate learning from a source.
    # @param source [String] The API Key to set as learnable/non learnable.
    # @param learnable [Boolean] 
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyOut]
    def learnable(source, learnable, token, opts = {})
      data, _status_code, _headers = learnable_with_http_info(source, learnable, token, opts)
      data
    end

    # Activate/deactivate learning from a source.
    # @param source [String] The API Key to set as learnable/non learnable.
    # @param learnable [Boolean] 
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyOut, Integer, Hash)>] APIKeyOut data, response status code and response headers
    def learnable_with_http_info(source, learnable, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.learnable ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.learnable"
      end
      # verify the required parameter 'learnable' is set
      if @api_client.config.client_side_validation && learnable.nil?
        fail ArgumentError, "Missing the required parameter 'learnable' when calling AdminApi.learnable"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.learnable"
      end
      # resource path
      local_var_path = '/api2/json/learnable/{source}/{learnable}/{token}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'learnable' + '}', CGI.escape(learnable.to_s)).sub('{' + 'token' + '}', CGI.escape(token.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.learnable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#learnable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate/deactivate learning from a source.
    # @param source [String] The API Key to set as learnable/non learnable.
    # @param learnable [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def learnable1(source, learnable, opts = {})
      learnable1_with_http_info(source, learnable, opts)
      nil
    end

    # Activate/deactivate learning from a source.
    # @param source [String] The API Key to set as learnable/non learnable.
    # @param learnable [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def learnable1_with_http_info(source, learnable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.learnable1 ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling AdminApi.learnable1"
      end
      # verify the required parameter 'learnable' is set
      if @api_client.config.client_side_validation && learnable.nil?
        fail ArgumentError, "Missing the required parameter 'learnable' when calling AdminApi.learnable1"
      end
      # resource path
      local_var_path = '/api2/json/learnable/{source}/{learnable}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'learnable' + '}', CGI.escape(learnable.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.learnable1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#learnable1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print basic source statistics.
    # @param [Hash] opts the optional parameters
    # @return [RegionOut]
    def regions(opts = {})
      data, _status_code, _headers = regions_with_http_info(opts)
      data
    end

    # Print basic source statistics.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegionOut, Integer, Hash)>] RegionOut data, response status code and response headers
    def regions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.regions ...'
      end
      # resource path
      local_var_path = '/api2/json/regions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegionOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.regions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#regions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current software version
    # @param [Hash] opts the optional parameters
    # @return [SoftwareVersionOut]
    def software_version(opts = {})
      data, _status_code, _headers = software_version_with_http_info(opts)
      data
    end

    # Get the current software version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareVersionOut, Integer, Hash)>] SoftwareVersionOut data, response status code and response headers
    def software_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.software_version ...'
      end
      # resource path
      local_var_path = '/api2/json/softwareVersion'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SoftwareVersionOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.software_version",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#software_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Print the taxonomy classes valid for the given classifier.
    # @param classifier_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIClassifierTaxonomyOut]
    def taxonomy_classes(classifier_name, opts = {})
      data, _status_code, _headers = taxonomy_classes_with_http_info(classifier_name, opts)
      data
    end

    # Print the taxonomy classes valid for the given classifier.
    # @param classifier_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIClassifierTaxonomyOut, Integer, Hash)>] APIClassifierTaxonomyOut data, response status code and response headers
    def taxonomy_classes_with_http_info(classifier_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.taxonomy_classes ...'
      end
      # verify the required parameter 'classifier_name' is set
      if @api_client.config.client_side_validation && classifier_name.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_name' when calling AdminApi.taxonomy_classes"
      end
      # resource path
      local_var_path = '/api2/json/taxonomyClasses/{classifierName}'.sub('{' + 'classifierName' + '}', CGI.escape(classifier_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIClassifierTaxonomyOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"AdminApi.taxonomy_classes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#taxonomy_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
