=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class PersonalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [CommunityEngageOut]
    def community_engage(country_iso2, first_name, last_name, opts = {})
      data, _status_code, _headers = community_engage_with_http_info(country_iso2, first_name, last_name, opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunityEngageOut, Integer, Hash)>] CommunityEngageOut data, response status code and response headers
    def community_engage_with_http_info(country_iso2, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.community_engage ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.community_engage"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.community_engage"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.community_engage"
      end
      # resource path
      local_var_path = '/api2/json/communityEngage/{countryIso2}/{firstName}/{lastName}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommunityEngageOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.community_engage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#community_engage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchCommunityEngageOut]
    def community_engage_batch(opts = {})
      data, _status_code, _headers = community_engage_batch_with_http_info(opts)
      data
    end

    # Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchCommunityEngageOut, Integer, Hash)>] BatchCommunityEngageOut data, response status code and response headers
    def community_engage_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.community_engage_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/communityEngageBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchCommunityEngageOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.community_engage_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#community_engage_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param country_iso2 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [CommunityEngageOut]
    def community_engage_full(country_iso2, personal_name_full, opts = {})
      data, _status_code, _headers = community_engage_full_with_http_info(country_iso2, personal_name_full, opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora, country, gender of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param country_iso2 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommunityEngageOut, Integer, Hash)>] CommunityEngageOut data, response status code and response headers
    def community_engage_full_with_http_info(country_iso2, personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.community_engage_full ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.community_engage_full"
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.community_engage_full"
      end
      # resource path
      local_var_path = '/api2/json/communityEngageFull/{countryIso2}/{personalNameFull}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommunityEngageOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.community_engage_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#community_engage_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchCommunityEngageFullOut]
    def community_engage_full_batch(opts = {})
      data, _status_code, _headers = community_engage_full_batch_with_http_info(opts)
      data
    end

    # Infer the likely ethnicity/diaspora, country, gender of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) for community engagement (require special module/pricing)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchCommunityEngageFullOut, Integer, Hash)>] BatchCommunityEngageFullOut data, response status code and response headers
    def community_engage_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.community_engage_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/communityEngageFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchCommunityEngageFullOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.community_engage_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#community_engage_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
    # @param country_iso2_from [String] 
    # @param first_name_from [String] 
    # @param last_name_from [String] 
    # @param country_iso2_to [String] 
    # @param first_name_to [String] 
    # @param last_name_to [String] 
    # @param [Hash] opts the optional parameters
    # @return [CorridorOut]
    def corridor(country_iso2_from, first_name_from, last_name_from, country_iso2_to, first_name_to, last_name_to, opts = {})
      data, _status_code, _headers = corridor_with_http_info(country_iso2_from, first_name_from, last_name_from, country_iso2_to, first_name_to, last_name_to, opts)
      data
    end

    # [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
    # @param country_iso2_from [String] 
    # @param first_name_from [String] 
    # @param last_name_from [String] 
    # @param country_iso2_to [String] 
    # @param first_name_to [String] 
    # @param last_name_to [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorridorOut, Integer, Hash)>] CorridorOut data, response status code and response headers
    def corridor_with_http_info(country_iso2_from, first_name_from, last_name_from, country_iso2_to, first_name_to, last_name_to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.corridor ...'
      end
      # verify the required parameter 'country_iso2_from' is set
      if @api_client.config.client_side_validation && country_iso2_from.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2_from' when calling PersonalApi.corridor"
      end
      # verify the required parameter 'first_name_from' is set
      if @api_client.config.client_side_validation && first_name_from.nil?
        fail ArgumentError, "Missing the required parameter 'first_name_from' when calling PersonalApi.corridor"
      end
      # verify the required parameter 'last_name_from' is set
      if @api_client.config.client_side_validation && last_name_from.nil?
        fail ArgumentError, "Missing the required parameter 'last_name_from' when calling PersonalApi.corridor"
      end
      # verify the required parameter 'country_iso2_to' is set
      if @api_client.config.client_side_validation && country_iso2_to.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2_to' when calling PersonalApi.corridor"
      end
      # verify the required parameter 'first_name_to' is set
      if @api_client.config.client_side_validation && first_name_to.nil?
        fail ArgumentError, "Missing the required parameter 'first_name_to' when calling PersonalApi.corridor"
      end
      # verify the required parameter 'last_name_to' is set
      if @api_client.config.client_side_validation && last_name_to.nil?
        fail ArgumentError, "Missing the required parameter 'last_name_to' when calling PersonalApi.corridor"
      end
      # resource path
      local_var_path = '/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}'.sub('{' + 'countryIso2From' + '}', CGI.escape(country_iso2_from.to_s)).sub('{' + 'firstNameFrom' + '}', CGI.escape(first_name_from.to_s)).sub('{' + 'lastNameFrom' + '}', CGI.escape(last_name_from.to_s)).sub('{' + 'countryIso2To' + '}', CGI.escape(country_iso2_to.to_s)).sub('{' + 'firstNameTo' + '}', CGI.escape(first_name_to.to_s)).sub('{' + 'lastNameTo' + '}', CGI.escape(last_name_to.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorridorOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.corridor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#corridor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCorridorIn] :batch_corridor_in A list of name pairs, with country code (nameFrom -&gt; nameTo).
    # @return [BatchCorridorOut]
    def corridor_batch(opts = {})
      data, _status_code, _headers = corridor_batch_with_http_info(opts)
      data
    end

    # [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchCorridorIn] :batch_corridor_in A list of name pairs, with country code (nameFrom -&gt; nameTo).
    # @return [Array<(BatchCorridorOut, Integer, Hash)>] BatchCorridorOut data, response status code and response headers
    def corridor_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.corridor_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/corridorBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_corridor_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchCorridorOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.corridor_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#corridor_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGeoOut]
    def country(personal_name_full, opts = {})
      data, _status_code, _headers = country_with_http_info(personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGeoOut, Integer, Hash)>] PersonalNameGeoOut data, response status code and response headers
    def country_with_http_info(personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country ...'
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.country"
      end
      # resource path
      local_var_path = '/api2/json/country/{personalNameFull}'.sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGeoOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.country",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameGeoOut]
    def country_batch(opts = {})
      data, _status_code, _headers = country_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameGeoOut, Integer, Hash)>] BatchPersonalNameGeoOut data, response status code and response headers
    def country_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/countryBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGeoOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.country_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameOriginedOut]
    def country_fn_ln(first_name, last_name, opts = {})
      data, _status_code, _headers = country_fn_ln_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal first / last name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameOriginedOut, Integer, Hash)>] FirstLastNameOriginedOut data, response status code and response headers
    def country_fn_ln_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country_fn_ln ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.country_fn_ln"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.country_fn_ln"
      end
      # resource path
      local_var_path = '/api2/json/countryFnLn/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameOriginedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.country_fn_ln",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country_fn_ln\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [BatchFirstLastNameGeoOut]
    def country_fn_ln_batch(opts = {})
      data, _status_code, _headers = country_fn_ln_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal first / last names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameGeoOut, Integer, Hash)>] BatchFirstLastNameGeoOut data, response status code and response headers
    def country_fn_ln_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.country_fn_ln_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/countryFnLnBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGeoOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.country_fn_ln_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#country_fn_ln_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameDiasporaedOut]
    def diaspora(country_iso2, first_name, last_name, opts = {})
      data, _status_code, _headers = diaspora_with_http_info(country_iso2, first_name, last_name, opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameDiasporaedOut, Integer, Hash)>] FirstLastNameDiasporaedOut data, response status code and response headers
    def diaspora_with_http_info(country_iso2, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.diaspora"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.diaspora"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.diaspora"
      end
      # resource path
      local_var_path = '/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameDiasporaedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.diaspora",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameDiasporaedOut]
    def diaspora_batch(opts = {})
      data, _status_code, _headers = diaspora_batch_with_http_info(opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameDiasporaedOut, Integer, Hash)>] BatchFirstLastNameDiasporaedOut data, response status code and response headers
    def diaspora_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/diasporaBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameDiasporaedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.diaspora_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameDiasporaedOut]
    def diaspora_full(country_iso2, personal_name_full, opts = {})
      data, _status_code, _headers = diaspora_full_with_http_info(country_iso2, personal_name_full, opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param country_iso2 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameDiasporaedOut, Integer, Hash)>] PersonalNameDiasporaedOut data, response status code and response headers
    def diaspora_full_with_http_info(country_iso2, personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora_full ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.diaspora_full"
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.diaspora_full"
      end
      # resource path
      local_var_path = '/api2/json/diasporaFull/{countryIso2}/{personalNameFull}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameDiasporaedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.diaspora_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameDiasporaedOut]
    def diaspora_full_batch(opts = {})
      data, _status_code, _headers = diaspora_full_batch_with_http_info(opts)
      data
    end

    # [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameDiasporaedOut, Integer, Hash)>] BatchPersonalNameDiasporaedOut data, response status code and response headers
    def diaspora_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.diaspora_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/diasporaFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameDiasporaedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.diaspora_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#diaspora_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy.
    # @param first_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender(first_name, opts = {})
      data, _status_code, _headers = gender_with_http_info(first_name, opts)
      data
    end

    # Infer the likely gender of a just a fiven name, assuming default &#39;US&#39; local context. Please use preferably full names and local geographic context for better accuracy.
    # @param first_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Integer, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_with_http_info(first_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.gender"
      end
      # resource path
      local_var_path = '/api2/json/gender/{firstName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a name.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender1(first_name, last_name, opts = {})
      data, _status_code, _headers = gender1_with_http_info(first_name, last_name, opts)
      data
    end

    # Infer the likely gender of a name.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Integer, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender1_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender1 ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.gender1"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.gender1"
      end
      # resource path
      local_var_path = '/api2/json/gender/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [BatchFirstLastNameGenderedOut]
    def gender_batch(opts = {})
      data, _status_code, _headers = gender_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameGenderedOut, Integer, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a full name, ex. John H. Smith
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGenderedOut]
    def gender_full(full_name, opts = {})
      data, _status_code, _headers = gender_full_with_http_info(full_name, opts)
      data
    end

    # Infer the likely gender of a full name, ex. John H. Smith
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGenderedOut, Integer, Hash)>] PersonalNameGenderedOut data, response status code and response headers
    def gender_full_with_http_info(full_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full ...'
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling PersonalApi.gender_full"
      end
      # resource path
      local_var_path = '/api2/json/genderFull/{fullName}'.sub('{' + 'fullName' + '}', CGI.escape(full_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameGenderedOut]
    def gender_full_batch(opts = {})
      data, _status_code, _headers = gender_full_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameGenderedOut, Integer, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a full name, given a local context (ISO2 country code).
    # @param full_name [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGenderedOut]
    def gender_full_geo(full_name, country_iso2, opts = {})
      data, _status_code, _headers = gender_full_geo_with_http_info(full_name, country_iso2, opts)
      data
    end

    # Infer the likely gender of a full name, given a local context (ISO2 country code).
    # @param full_name [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGenderedOut, Integer, Hash)>] PersonalNameGenderedOut data, response status code and response headers
    def gender_full_geo_with_http_info(full_name, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_geo ...'
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling PersonalApi.gender_full_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.gender_full_geo"
      end
      # resource path
      local_var_path = '/api2/json/genderFullGeo/{fullName}/{countryIso2}'.sub('{' + 'fullName' + '}', CGI.escape(full_name.to_s)).sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_full_geo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names, with a country ISO2 code
    # @return [BatchPersonalNameGenderedOut]
    def gender_full_geo_batch(opts = {})
      data, _status_code, _headers = gender_full_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names, with a country ISO2 code
    # @return [Array<(BatchPersonalNameGenderedOut, Integer, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_full_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_full_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderFullGeoBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_full_geo_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_full_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a name, given a local context (ISO2 country code).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_geo(first_name, last_name, country_iso2, opts = {})
      data, _status_code, _headers = gender_geo_with_http_info(first_name, last_name, country_iso2, opts)
      data
    end

    # Infer the likely gender of a name, given a local context (ISO2 country code).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Integer, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_geo_with_http_info(first_name, last_name, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_geo ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.gender_geo"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.gender_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.gender_geo"
      end
      # resource path
      local_var_path = '/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s)).sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_geo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of names, with country code.
    # @return [BatchFirstLastNameGenderedOut]
    def gender_geo_batch(opts = {})
      data, _status_code, _headers = gender_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of names, with country code.
    # @return [Array<(BatchFirstLastNameGenderedOut, Integer, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.gender_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderGeoBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.gender_geo_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#gender_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameOriginedOut]
    def origin(first_name, last_name, opts = {})
      data, _status_code, _headers = origin_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameOriginedOut, Integer, Hash)>] FirstLastNameOriginedOut data, response status code and response headers
    def origin_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.origin"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.origin"
      end
      # resource path
      local_var_path = '/api2/json/origin/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameOriginedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.origin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [BatchFirstLastNameOriginedOut]
    def origin_batch(opts = {})
      data, _status_code, _headers = origin_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal names
    # @return [Array<(BatchFirstLastNameOriginedOut, Integer, Hash)>] BatchFirstLastNameOriginedOut data, response status code and response headers
    def origin_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/originBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameOriginedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.origin_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameOriginedOut]
    def origin_full(personal_name_full, opts = {})
      data, _status_code, _headers = origin_full_with_http_info(personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use &#39;diaspora&#39; instead.
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameOriginedOut, Integer, Hash)>] PersonalNameOriginedOut data, response status code and response headers
    def origin_full_with_http_info(personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin_full ...'
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.origin_full"
      end
      # resource path
      local_var_path = '/api2/json/originFull/{personalNameFull}'.sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameOriginedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.origin_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameOriginedOut]
    def origin_full_batch(opts = {})
      data, _status_code, _headers = origin_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameOriginedOut, Integer, Hash)>] BatchPersonalNameOriginedOut data, response status code and response headers
    def origin_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.origin_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/originFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameOriginedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.origin_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#origin_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
    # @param name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_name(name_full, opts = {})
      data, _status_code, _headers = parse_name_with_http_info(name_full, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
    # @param name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Integer, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_name_with_http_info(name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name ...'
      end
      # verify the required parameter 'name_full' is set
      if @api_client.config.client_side_validation && name_full.nil?
        fail ArgumentError, "Missing the required parameter 'name_full' when calling PersonalApi.parse_name"
      end
      # resource path
      local_var_path = '/api2/json/parseName/{nameFull}'.sub('{' + 'nameFull' + '}', CGI.escape(name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.parse_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_name_batch(opts = {})
      data, _status_code, _headers = parse_name_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Integer, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.parse_name_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
    # @param name_full [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_name_geo(name_full, country_iso2, opts = {})
      data, _status_code, _headers = parse_name_geo_with_http_info(name_full, country_iso2, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
    # @param name_full [String] 
    # @param country_iso2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Integer, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_name_geo_with_http_info(name_full, country_iso2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_geo ...'
      end
      # verify the required parameter 'name_full' is set
      if @api_client.config.client_side_validation && name_full.nil?
        fail ArgumentError, "Missing the required parameter 'name_full' when calling PersonalApi.parse_name_geo"
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.parse_name_geo"
      end
      # resource path
      local_var_path = '/api2/json/parseName/{nameFull}/{countryIso2}'.sub('{' + 'nameFull' + '}', CGI.escape(name_full.to_s)).sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.parse_name_geo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_geo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_name_geo_batch(opts = {})
      data, _status_code, _headers = parse_name_geo_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Integer, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_name_geo_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.parse_name_geo_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseNameGeoBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.parse_name_geo_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#parse_name_geo_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
    # @param country_iso2 [String] 
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameReligionedOut]
    def religion2(country_iso2, sub_division_iso31662, first_name, last_name, opts = {})
      data, _status_code, _headers = religion2_with_http_info(country_iso2, sub_division_iso31662, first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal first/last name. NB: only for INDIA (as of current version).
    # @param country_iso2 [String] 
    # @param sub_division_iso31662 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameReligionedOut, Integer, Hash)>] FirstLastNameReligionedOut data, response status code and response headers
    def religion2_with_http_info(country_iso2, sub_division_iso31662, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.religion2 ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.religion2"
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling PersonalApi.religion2"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.religion2"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.religion2"
      end
      # resource path
      local_var_path = '/api2/json/religion/{countryIso2}/{subDivisionIso31662}/{firstName}/{lastName}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.religion2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#religion2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoSubdivisionIn] :batch_first_last_name_geo_subdivision_in A list of personal first / last names
    # @return [BatchFirstLastNameReligionedOut]
    def religion_batch(opts = {})
      data, _status_code, _headers = religion_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal first/last names. NB: only for India as of currently.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoSubdivisionIn] :batch_first_last_name_geo_subdivision_in A list of personal first / last names
    # @return [Array<(BatchFirstLastNameReligionedOut, Integer, Hash)>] BatchFirstLastNameReligionedOut data, response status code and response headers
    def religion_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.religion_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/religionBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.religion_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#religion_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
    # @param country_iso2 [String] 
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameReligionedOut]
    def religion_full(country_iso2, sub_division_iso31662, personal_name_full, opts = {})
      data, _status_code, _headers = religion_full_with_http_info(country_iso2, sub_division_iso31662, personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
    # @param country_iso2 [String] 
    # @param sub_division_iso31662 [String] 
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameReligionedOut, Integer, Hash)>] PersonalNameReligionedOut data, response status code and response headers
    def religion_full_with_http_info(country_iso2, sub_division_iso31662, personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.religion_full ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.religion_full"
      end
      # verify the required parameter 'sub_division_iso31662' is set
      if @api_client.config.client_side_validation && sub_division_iso31662.nil?
        fail ArgumentError, "Missing the required parameter 'sub_division_iso31662' when calling PersonalApi.religion_full"
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.religion_full"
      end
      # resource path
      local_var_path = '/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'subDivisionIso31662' + '}', CGI.escape(sub_division_iso31662.to_s)).sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.religion_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#religion_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoSubdivisionIn] :batch_personal_name_geo_subdivision_in A list of personal names
    # @return [BatchPersonalNameReligionedOut]
    def religion_full_batch(opts = {})
      data, _status_code, _headers = religion_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoSubdivisionIn] :batch_personal_name_geo_subdivision_in A list of personal names
    # @return [Array<(BatchPersonalNameReligionedOut, Integer, Hash)>] BatchPersonalNameReligionedOut data, response status code and response headers
    def religion_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.religion_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/religionFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_subdivision_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameReligionedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.religion_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#religion_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGeoSubclassificationOut]
    def subclassification(country_iso2, first_name, last_name, opts = {})
      data, _status_code, _headers = subclassification_with_http_info(country_iso2, first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
    # @param country_iso2 [String] 
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGeoSubclassificationOut, Integer, Hash)>] FirstLastNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_with_http_info(country_iso2, first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.subclassification ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.subclassification"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.subclassification"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.subclassification"
      end
      # resource path
      local_var_path = '/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.subclassification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#subclassification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameGeoSubclassificationOut]
    def subclassification_batch(opts = {})
      data, _status_code, _headers = subclassification_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameGeoSubclassificationOut, Integer, Hash)>] BatchFirstLastNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.subclassification_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/subclassificationBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.subclassification_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#subclassification_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
    # @param country_iso2 [String] 
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGeoSubclassificationOut]
    def subclassification_full(country_iso2, full_name, opts = {})
      data, _status_code, _headers = subclassification_full_with_http_info(country_iso2, full_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
    # @param country_iso2 [String] 
    # @param full_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGeoSubclassificationOut, Integer, Hash)>] FirstLastNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_full_with_http_info(country_iso2, full_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.subclassification_full ...'
      end
      # verify the required parameter 'country_iso2' is set
      if @api_client.config.client_side_validation && country_iso2.nil?
        fail ArgumentError, "Missing the required parameter 'country_iso2' when calling PersonalApi.subclassification_full"
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling PersonalApi.subclassification_full"
      end
      # resource path
      local_var_path = '/api2/json/subclassificationFull/{countryIso2}/{fullName}'.sub('{' + 'countryIso2' + '}', CGI.escape(country_iso2.to_s)).sub('{' + 'fullName' + '}', CGI.escape(full_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.subclassification_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#subclassification_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameGeoSubclassificationOut]
    def subclassification_full_batch(opts = {})
      data, _status_code, _headers = subclassification_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code &#39;IN&#39;).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameGeoSubclassificationOut, Integer, Hash)>] BatchPersonalNameGeoSubclassificationOut data, response status code and response headers
    def subclassification_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.subclassification_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/subclassificationFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGeoSubclassificationOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.subclassification_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#subclassification_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity(first_name, last_name, opts = {})
      data, _status_code, _headers = us_race_ethnicity_with_http_info(first_name, last_name, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameUSRaceEthnicityOut, Integer, Hash)>] FirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_with_http_info(first_name, last_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.us_race_ethnicity"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.us_race_ethnicity"
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicity/{firstName}/{lastName}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_race_ethnicity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [BatchFirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity_batch(opts = {})
      data, _status_code, _headers = us_race_ethnicity_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoIn] :batch_first_last_name_geo_in A list of personal names
    # @return [Array<(BatchFirstLastNameUSRaceEthnicityOut, Integer, Hash)>] BatchFirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_race_ethnicity_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameUSRaceEthnicityOut]
    def us_race_ethnicity_full(personal_name_full, opts = {})
      data, _status_code, _headers = us_race_ethnicity_full_with_http_info(personal_name_full, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param personal_name_full [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameUSRaceEthnicityOut, Integer, Hash)>] PersonalNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_full_with_http_info(personal_name_full, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_full ...'
      end
      # verify the required parameter 'personal_name_full' is set
      if @api_client.config.client_side_validation && personal_name_full.nil?
        fail ArgumentError, "Missing the required parameter 'personal_name_full' when calling PersonalApi.us_race_ethnicity_full"
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityFull/{personalNameFull}'.sub('{' + 'personalNameFull' + '}', CGI.escape(personal_name_full.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_race_ethnicity_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [BatchPersonalNameUSRaceEthnicityOut]
    def us_race_ethnicity_full_batch(opts = {})
      data, _status_code, _headers = us_race_ethnicity_full_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameGeoIn] :batch_personal_name_geo_in A list of personal names
    # @return [Array<(BatchPersonalNameUSRaceEthnicityOut, Integer, Hash)>] BatchPersonalNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_geo_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_race_ethnicity_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param zip5_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameUSRaceEthnicityOut]
    def us_race_ethnicity_zip5(first_name, last_name, zip5_code, opts = {})
      data, _status_code, _headers = us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer a US resident&#39;s likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param first_name [String] 
    # @param last_name [String] 
    # @param zip5_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameUSRaceEthnicityOut, Integer, Hash)>] FirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_race_ethnicity_zip5 ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # verify the required parameter 'zip5_code' is set
      if @api_client.config.client_side_validation && zip5_code.nil?
        fail ArgumentError, "Missing the required parameter 'zip5_code' when calling PersonalApi.us_race_ethnicity_zip5"
      end
      # resource path
      local_var_path = '/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}'.sub('{' + 'firstName' + '}', CGI.escape(first_name.to_s)).sub('{' + 'lastName' + '}', CGI.escape(last_name.to_s)).sub('{' + 'zip5Code' + '}', CGI.escape(zip5_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_race_ethnicity_zip5",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_race_ethnicity_zip5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoZippedIn] :batch_first_last_name_geo_zipped_in A list of personal names
    # @return [BatchFirstLastNameUSRaceEthnicityOut]
    def us_zip_race_ethnicity_batch(opts = {})
      data, _status_code, _headers = us_zip_race_ethnicity_batch_with_http_info(opts)
      data
    end

    # [USES 10 UNITS PER NAME] Infer up-to 100 US resident&#39;s likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGeoZippedIn] :batch_first_last_name_geo_zipped_in A list of personal names
    # @return [Array<(BatchFirstLastNameUSRaceEthnicityOut, Integer, Hash)>] BatchFirstLastNameUSRaceEthnicityOut data, response status code and response headers
    def us_zip_race_ethnicity_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonalApi.us_zip_race_ethnicity_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/usZipRaceEthnicityBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_geo_zipped_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameUSRaceEthnicityOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"PersonalApi.us_zip_race_ethnicity_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonalApi#us_zip_race_ethnicity_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
