=begin
#NamSor API v2

#NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

The version of the OpenAPI document: 2.0.29
Contact: contact@namsor.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module NamsorClient
  class JapaneseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Infer the likely gender of a Japanese full name ex. 王晓明
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameGenderedOut]
    def gender_japanese_name_full(japanese_name, opts = {})
      data, _status_code, _headers = gender_japanese_name_full_with_http_info(japanese_name, opts)
      data
    end

    # Infer the likely gender of a Japanese full name ex. 王晓明
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameGenderedOut, Integer, Hash)>] PersonalNameGenderedOut data, response status code and response headers
    def gender_japanese_name_full_with_http_info(japanese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.gender_japanese_name_full ...'
      end
      # verify the required parameter 'japanese_name' is set
      if @api_client.config.client_side_validation && japanese_name.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_name' when calling JapaneseApi.gender_japanese_name_full"
      end
      # resource path
      local_var_path = '/api2/json/genderJapaneseNameFull/{japaneseName}'.sub('{' + 'japaneseName' + '}', CGI.escape(japanese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.gender_japanese_name_full",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#gender_japanese_name_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 full names
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameGenderedOut]
    def gender_japanese_name_full_batch(opts = {})
      data, _status_code, _headers = gender_japanese_name_full_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 full names
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameGenderedOut, Integer, Hash)>] BatchPersonalNameGenderedOut data, response status code and response headers
    def gender_japanese_name_full_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.gender_japanese_name_full_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderJapaneseNameFullBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.gender_japanese_name_full_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#gender_japanese_name_full_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of a Japanese name in LATIN (Pinyin).
    # @param japanese_surname [String] 
    # @param japanese_given_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FirstLastNameGenderedOut]
    def gender_japanese_name_pinyin(japanese_surname, japanese_given_name, opts = {})
      data, _status_code, _headers = gender_japanese_name_pinyin_with_http_info(japanese_surname, japanese_given_name, opts)
      data
    end

    # Infer the likely gender of a Japanese name in LATIN (Pinyin).
    # @param japanese_surname [String] 
    # @param japanese_given_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FirstLastNameGenderedOut, Integer, Hash)>] FirstLastNameGenderedOut data, response status code and response headers
    def gender_japanese_name_pinyin_with_http_info(japanese_surname, japanese_given_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.gender_japanese_name_pinyin ...'
      end
      # verify the required parameter 'japanese_surname' is set
      if @api_client.config.client_side_validation && japanese_surname.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname' when calling JapaneseApi.gender_japanese_name_pinyin"
      end
      # verify the required parameter 'japanese_given_name' is set
      if @api_client.config.client_side_validation && japanese_given_name.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name' when calling JapaneseApi.gender_japanese_name_pinyin"
      end
      # resource path
      local_var_path = '/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}'.sub('{' + 'japaneseSurname' + '}', CGI.escape(japanese_surname.to_s)).sub('{' + 'japaneseGivenName' + '}', CGI.escape(japanese_given_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.gender_japanese_name_pinyin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#gender_japanese_name_pinyin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of names, with country code.
    # @return [BatchFirstLastNameGenderedOut]
    def gender_japanese_name_pinyin_batch(opts = {})
      data, _status_code, _headers = gender_japanese_name_pinyin_batch_with_http_info(opts)
      data
    end

    # Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of names, with country code.
    # @return [Array<(BatchFirstLastNameGenderedOut, Integer, Hash)>] BatchFirstLastNameGenderedOut data, response status code and response headers
    def gender_japanese_name_pinyin_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.gender_japanese_name_pinyin_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/genderJapaneseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchFirstLastNameGenderedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.gender_japanese_name_pinyin_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#gender_japanese_name_pinyin_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGenderIn] :batch_first_last_name_gender_in A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender
    # @return [BatchNameMatchCandidatesOut]
    def japanese_name_gender_kanji_candidates_batch(opts = {})
      data, _status_code, _headers = japanese_name_gender_kanji_candidates_batch_with_http_info(opts)
      data
    end

    # Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameGenderIn] :batch_first_last_name_gender_in A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname and known gender
    # @return [Array<(BatchNameMatchCandidatesOut, Integer, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def japanese_name_gender_kanji_candidates_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_gender_kanji_candidates_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameGenderKanjiCandidatesBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_gender_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_gender_kanji_candidates_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_gender_kanji_candidates_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param known_gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchCandidatesOut]
    def japanese_name_kanji_candidates(japanese_surname_latin, japanese_given_name_latin, known_gender, opts = {})
      data, _status_code, _headers = japanese_name_kanji_candidates_with_http_info(japanese_surname_latin, japanese_given_name_latin, known_gender, opts)
      data
    end

    # Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender.
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param known_gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchCandidatesOut, Integer, Hash)>] NameMatchCandidatesOut data, response status code and response headers
    def japanese_name_kanji_candidates_with_http_info(japanese_surname_latin, japanese_given_name_latin, known_gender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_kanji_candidates ...'
      end
      # verify the required parameter 'japanese_surname_latin' is set
      if @api_client.config.client_side_validation && japanese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname_latin' when calling JapaneseApi.japanese_name_kanji_candidates"
      end
      # verify the required parameter 'japanese_given_name_latin' is set
      if @api_client.config.client_side_validation && japanese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name_latin' when calling JapaneseApi.japanese_name_kanji_candidates"
      end
      # verify the required parameter 'known_gender' is set
      if @api_client.config.client_side_validation && known_gender.nil?
        fail ArgumentError, "Missing the required parameter 'known_gender' when calling JapaneseApi.japanese_name_kanji_candidates"
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}'.sub('{' + 'japaneseSurnameLatin' + '}', CGI.escape(japanese_surname_latin.to_s)).sub('{' + 'japaneseGivenNameLatin' + '}', CGI.escape(japanese_given_name_latin.to_s)).sub('{' + 'knownGender' + '}', CGI.escape(known_gender.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_kanji_candidates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_kanji_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchCandidatesOut]
    def japanese_name_kanji_candidates1(japanese_surname_latin, japanese_given_name_latin, opts = {})
      data, _status_code, _headers = japanese_name_kanji_candidates1_with_http_info(japanese_surname_latin, japanese_given_name_latin, opts)
      data
    end

    # Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchCandidatesOut, Integer, Hash)>] NameMatchCandidatesOut data, response status code and response headers
    def japanese_name_kanji_candidates1_with_http_info(japanese_surname_latin, japanese_given_name_latin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_kanji_candidates1 ...'
      end
      # verify the required parameter 'japanese_surname_latin' is set
      if @api_client.config.client_side_validation && japanese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname_latin' when calling JapaneseApi.japanese_name_kanji_candidates1"
      end
      # verify the required parameter 'japanese_given_name_latin' is set
      if @api_client.config.client_side_validation && japanese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name_latin' when calling JapaneseApi.japanese_name_kanji_candidates1"
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}'.sub('{' + 'japaneseSurnameLatin' + '}', CGI.escape(japanese_surname_latin.to_s)).sub('{' + 'japaneseGivenNameLatin' + '}', CGI.escape(japanese_given_name_latin.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_kanji_candidates1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_kanji_candidates1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [BatchNameMatchCandidatesOut]
    def japanese_name_kanji_candidates_batch(opts = {})
      data, _status_code, _headers = japanese_name_kanji_candidates_batch_with_http_info(opts)
      data
    end

    # Identify japanese name candidates in KANJI, based on the romanized name (firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname), ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Integer, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def japanese_name_kanji_candidates_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_kanji_candidates_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameKanjiCandidatesBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_kanji_candidates_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_kanji_candidates_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Romanize japanese name, based on the name in Kanji.
    # @param japanese_surname_kanji [String] 
    # @param japanese_given_name_kanji [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchCandidatesOut]
    def japanese_name_latin_candidates(japanese_surname_kanji, japanese_given_name_kanji, opts = {})
      data, _status_code, _headers = japanese_name_latin_candidates_with_http_info(japanese_surname_kanji, japanese_given_name_kanji, opts)
      data
    end

    # Romanize japanese name, based on the name in Kanji.
    # @param japanese_surname_kanji [String] 
    # @param japanese_given_name_kanji [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchCandidatesOut, Integer, Hash)>] NameMatchCandidatesOut data, response status code and response headers
    def japanese_name_latin_candidates_with_http_info(japanese_surname_kanji, japanese_given_name_kanji, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_latin_candidates ...'
      end
      # verify the required parameter 'japanese_surname_kanji' is set
      if @api_client.config.client_side_validation && japanese_surname_kanji.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname_kanji' when calling JapaneseApi.japanese_name_latin_candidates"
      end
      # verify the required parameter 'japanese_given_name_kanji' is set
      if @api_client.config.client_side_validation && japanese_given_name_kanji.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name_kanji' when calling JapaneseApi.japanese_name_latin_candidates"
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}'.sub('{' + 'japaneseSurnameKanji' + '}', CGI.escape(japanese_surname_kanji.to_s)).sub('{' + 'japaneseGivenNameKanji' + '}', CGI.escape(japanese_given_name_kanji.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_latin_candidates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_latin_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Romanize japanese names, based on the name in KANJI
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [BatchNameMatchCandidatesOut]
    def japanese_name_latin_candidates_batch(opts = {})
      data, _status_code, _headers = japanese_name_latin_candidates_batch_with_http_info(opts)
      data
    end

    # Romanize japanese names, based on the name in KANJI
    # @param [Hash] opts the optional parameters
    # @option opts [BatchFirstLastNameIn] :batch_first_last_name_in A list of personal japanese names in KANJI, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [Array<(BatchNameMatchCandidatesOut, Integer, Hash)>] BatchNameMatchCandidatesOut data, response status code and response headers
    def japanese_name_latin_candidates_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_latin_candidates_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameLatinCandidatesBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchCandidatesOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_latin_candidates_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_latin_candidates_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [NameMatchedOut]
    def japanese_name_match(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts = {})
      data, _status_code, _headers = japanese_name_match_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts)
      data
    end

    # Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NameMatchedOut, Integer, Hash)>] NameMatchedOut data, response status code and response headers
    def japanese_name_match_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_match ...'
      end
      # verify the required parameter 'japanese_surname_latin' is set
      if @api_client.config.client_side_validation && japanese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname_latin' when calling JapaneseApi.japanese_name_match"
      end
      # verify the required parameter 'japanese_given_name_latin' is set
      if @api_client.config.client_side_validation && japanese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name_latin' when calling JapaneseApi.japanese_name_match"
      end
      # verify the required parameter 'japanese_name' is set
      if @api_client.config.client_side_validation && japanese_name.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_name' when calling JapaneseApi.japanese_name_match"
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}'.sub('{' + 'japaneseSurnameLatin' + '}', CGI.escape(japanese_surname_latin.to_s)).sub('{' + 'japaneseGivenNameLatin' + '}', CGI.escape(japanese_given_name_latin.to_s)).sub('{' + 'japaneseName' + '}', CGI.escape(japanese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NameMatchedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_match",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_match\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchMatchPersonalFirstLastNameIn] :batch_match_personal_first_last_name_in A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [BatchNameMatchedOut]
    def japanese_name_match_batch(opts = {})
      data, _status_code, _headers = japanese_name_match_batch_with_http_info(opts)
      data
    end

    # Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae
    # @param [Hash] opts the optional parameters
    # @option opts [BatchMatchPersonalFirstLastNameIn] :batch_match_personal_first_last_name_in A list of personal Japanese names in LATIN, firstName &#x3D; japaneseGivenName; lastName&#x3D;japaneseSurname
    # @return [Array<(BatchNameMatchedOut, Integer, Hash)>] BatchNameMatchedOut data, response status code and response headers
    def japanese_name_match_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_match_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameMatchBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_match_personal_first_last_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchNameMatchedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_match_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_match_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [FeedbackLoopOut]
    def japanese_name_match_feedback_loop(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts = {})
      data, _status_code, _headers = japanese_name_match_feedback_loop_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts)
      data
    end

    # [CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae
    # @param japanese_surname_latin [String] 
    # @param japanese_given_name_latin [String] 
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeedbackLoopOut, Integer, Hash)>] FeedbackLoopOut data, response status code and response headers
    def japanese_name_match_feedback_loop_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.japanese_name_match_feedback_loop ...'
      end
      # verify the required parameter 'japanese_surname_latin' is set
      if @api_client.config.client_side_validation && japanese_surname_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_surname_latin' when calling JapaneseApi.japanese_name_match_feedback_loop"
      end
      # verify the required parameter 'japanese_given_name_latin' is set
      if @api_client.config.client_side_validation && japanese_given_name_latin.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_given_name_latin' when calling JapaneseApi.japanese_name_match_feedback_loop"
      end
      # verify the required parameter 'japanese_name' is set
      if @api_client.config.client_side_validation && japanese_name.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_name' when calling JapaneseApi.japanese_name_match_feedback_loop"
      end
      # resource path
      local_var_path = '/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}'.sub('{' + 'japaneseSurnameLatin' + '}', CGI.escape(japanese_surname_latin.to_s)).sub('{' + 'japaneseGivenNameLatin' + '}', CGI.escape(japanese_given_name_latin.to_s)).sub('{' + 'japaneseName' + '}', CGI.escape(japanese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeedbackLoopOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.japanese_name_match_feedback_loop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#japanese_name_match_feedback_loop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [PersonalNameParsedOut]
    def parse_japanese_name(japanese_name, opts = {})
      data, _status_code, _headers = parse_japanese_name_with_http_info(japanese_name, opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae
    # @param japanese_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalNameParsedOut, Integer, Hash)>] PersonalNameParsedOut data, response status code and response headers
    def parse_japanese_name_with_http_info(japanese_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.parse_japanese_name ...'
      end
      # verify the required parameter 'japanese_name' is set
      if @api_client.config.client_side_validation && japanese_name.nil?
        fail ArgumentError, "Missing the required parameter 'japanese_name' when calling JapaneseApi.parse_japanese_name"
      end
      # resource path
      local_var_path = '/api2/json/parseJapaneseName/{japaneseName}'.sub('{' + 'japaneseName' + '}', CGI.escape(japanese_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.parse_japanese_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#parse_japanese_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [BatchPersonalNameParsedOut]
    def parse_japanese_name_batch(opts = {})
      data, _status_code, _headers = parse_japanese_name_batch_with_http_info(opts)
      data
    end

    # Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchPersonalNameIn] :batch_personal_name_in A list of personal names
    # @return [Array<(BatchPersonalNameParsedOut, Integer, Hash)>] BatchPersonalNameParsedOut data, response status code and response headers
    def parse_japanese_name_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JapaneseApi.parse_japanese_name_batch ...'
      end
      # resource path
      local_var_path = '/api2/json/parseJapaneseNameBatch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'batch_personal_name_in'])

      # return_type
      return_type = opts[:debug_return_type] || 'BatchPersonalNameParsedOut'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"JapaneseApi.parse_japanese_name_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JapaneseApi#parse_japanese_name_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
