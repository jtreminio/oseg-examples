/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.namsor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import app.namsor.client.JSON;

/**
 * CommunityEngageOptionOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class CommunityEngageOptionOut {
  public static final String SERIALIZED_NAME_GENDER_FILTER = "genderFilter";
  @SerializedName(SERIALIZED_NAME_GENDER_FILTER)
  @javax.annotation.Nullable
  private List<String> genderFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETHNICITY_FILTER = "ethnicityFilter";
  @SerializedName(SERIALIZED_NAME_ETHNICITY_FILTER)
  @javax.annotation.Nullable
  private List<String> ethnicityFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY_OUT_FILTER = "countryOutFilter";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OUT_FILTER)
  @javax.annotation.Nullable
  private List<String> countryOutFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_US_RACE_ETHNICITY_FILTER = "usRaceEthnicityFilter";
  @SerializedName(SERIALIZED_NAME_US_RACE_ETHNICITY_FILTER)
  @javax.annotation.Nullable
  private List<String> usRaceEthnicityFilter = new ArrayList<>();

  public CommunityEngageOptionOut() {
  }

  public CommunityEngageOptionOut genderFilter(@javax.annotation.Nullable List<String> genderFilter) {
    this.genderFilter = genderFilter;
    return this;
  }

  public CommunityEngageOptionOut addGenderFilterItem(String genderFilterItem) {
    if (this.genderFilter == null) {
      this.genderFilter = new ArrayList<>();
    }
    this.genderFilter.add(genderFilterItem);
    return this;
  }

  /**
   * The gender filter (null to allow all)
   * @return genderFilter
   */
  @javax.annotation.Nullable
  public List<String> getGenderFilter() {
    return genderFilter;
  }

  public void setGenderFilter(@javax.annotation.Nullable List<String> genderFilter) {
    this.genderFilter = genderFilter;
  }


  public CommunityEngageOptionOut ethnicityFilter(@javax.annotation.Nullable List<String> ethnicityFilter) {
    this.ethnicityFilter = ethnicityFilter;
    return this;
  }

  public CommunityEngageOptionOut addEthnicityFilterItem(String ethnicityFilterItem) {
    if (this.ethnicityFilter == null) {
      this.ethnicityFilter = new ArrayList<>();
    }
    this.ethnicityFilter.add(ethnicityFilterItem);
    return this;
  }

  /**
   * The ethnicity filter (null to allow all)
   * @return ethnicityFilter
   */
  @javax.annotation.Nullable
  public List<String> getEthnicityFilter() {
    return ethnicityFilter;
  }

  public void setEthnicityFilter(@javax.annotation.Nullable List<String> ethnicityFilter) {
    this.ethnicityFilter = ethnicityFilter;
  }


  public CommunityEngageOptionOut countryOutFilter(@javax.annotation.Nullable List<String> countryOutFilter) {
    this.countryOutFilter = countryOutFilter;
    return this;
  }

  public CommunityEngageOptionOut addCountryOutFilterItem(String countryOutFilterItem) {
    if (this.countryOutFilter == null) {
      this.countryOutFilter = new ArrayList<>();
    }
    this.countryOutFilter.add(countryOutFilterItem);
    return this;
  }

  /**
   * The output country filter (null to allow all)
   * @return countryOutFilter
   */
  @javax.annotation.Nullable
  public List<String> getCountryOutFilter() {
    return countryOutFilter;
  }

  public void setCountryOutFilter(@javax.annotation.Nullable List<String> countryOutFilter) {
    this.countryOutFilter = countryOutFilter;
  }


  public CommunityEngageOptionOut usRaceEthnicityFilter(@javax.annotation.Nullable List<String> usRaceEthnicityFilter) {
    this.usRaceEthnicityFilter = usRaceEthnicityFilter;
    return this;
  }

  public CommunityEngageOptionOut addUsRaceEthnicityFilterItem(String usRaceEthnicityFilterItem) {
    if (this.usRaceEthnicityFilter == null) {
      this.usRaceEthnicityFilter = new ArrayList<>();
    }
    this.usRaceEthnicityFilter.add(usRaceEthnicityFilterItem);
    return this;
  }

  /**
   * The output US race/ethnicity filter (null to allow all)
   * @return usRaceEthnicityFilter
   */
  @javax.annotation.Nullable
  public List<String> getUsRaceEthnicityFilter() {
    return usRaceEthnicityFilter;
  }

  public void setUsRaceEthnicityFilter(@javax.annotation.Nullable List<String> usRaceEthnicityFilter) {
    this.usRaceEthnicityFilter = usRaceEthnicityFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunityEngageOptionOut communityEngageOptionOut = (CommunityEngageOptionOut) o;
    return Objects.equals(this.genderFilter, communityEngageOptionOut.genderFilter) &&
        Objects.equals(this.ethnicityFilter, communityEngageOptionOut.ethnicityFilter) &&
        Objects.equals(this.countryOutFilter, communityEngageOptionOut.countryOutFilter) &&
        Objects.equals(this.usRaceEthnicityFilter, communityEngageOptionOut.usRaceEthnicityFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(genderFilter, ethnicityFilter, countryOutFilter, usRaceEthnicityFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunityEngageOptionOut {\n");
    sb.append("    genderFilter: ").append(toIndentedString(genderFilter)).append("\n");
    sb.append("    ethnicityFilter: ").append(toIndentedString(ethnicityFilter)).append("\n");
    sb.append("    countryOutFilter: ").append(toIndentedString(countryOutFilter)).append("\n");
    sb.append("    usRaceEthnicityFilter: ").append(toIndentedString(usRaceEthnicityFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("genderFilter");
    openapiFields.add("ethnicityFilter");
    openapiFields.add("countryOutFilter");
    openapiFields.add("usRaceEthnicityFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommunityEngageOptionOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunityEngageOptionOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunityEngageOptionOut is not found in the empty JSON string", CommunityEngageOptionOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommunityEngageOptionOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunityEngageOptionOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("genderFilter") != null && !jsonObj.get("genderFilter").isJsonNull() && !jsonObj.get("genderFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genderFilter` to be an array in the JSON string but got `%s`", jsonObj.get("genderFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ethnicityFilter") != null && !jsonObj.get("ethnicityFilter").isJsonNull() && !jsonObj.get("ethnicityFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicityFilter` to be an array in the JSON string but got `%s`", jsonObj.get("ethnicityFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countryOutFilter") != null && !jsonObj.get("countryOutFilter").isJsonNull() && !jsonObj.get("countryOutFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOutFilter` to be an array in the JSON string but got `%s`", jsonObj.get("countryOutFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usRaceEthnicityFilter") != null && !jsonObj.get("usRaceEthnicityFilter").isJsonNull() && !jsonObj.get("usRaceEthnicityFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usRaceEthnicityFilter` to be an array in the JSON string but got `%s`", jsonObj.get("usRaceEthnicityFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunityEngageOptionOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunityEngageOptionOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunityEngageOptionOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunityEngageOptionOut.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunityEngageOptionOut>() {
           @Override
           public void write(JsonWriter out, CommunityEngageOptionOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunityEngageOptionOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommunityEngageOptionOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommunityEngageOptionOut
   * @throws IOException if the JSON string is invalid with respect to CommunityEngageOptionOut
   */
  public static CommunityEngageOptionOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunityEngageOptionOut.class);
  }

  /**
   * Convert an instance of CommunityEngageOptionOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

