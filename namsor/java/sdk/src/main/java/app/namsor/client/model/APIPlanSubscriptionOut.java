/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.namsor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import app.namsor.client.JSON;

/**
 * The API Plan governing the subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class APIPlanSubscriptionOut {
  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_PLAN_STARTED = "planStarted";
  @SerializedName(SERIALIZED_NAME_PLAN_STARTED)
  @javax.annotation.Nullable
  private Long planStarted;

  public static final String SERIALIZED_NAME_PRIOR_PLAN_STARTED = "priorPlanStarted";
  @SerializedName(SERIALIZED_NAME_PRIOR_PLAN_STARTED)
  @javax.annotation.Nullable
  private Long priorPlanStarted;

  public static final String SERIALIZED_NAME_PLAN_ENDED = "planEnded";
  @SerializedName(SERIALIZED_NAME_PLAN_ENDED)
  @javax.annotation.Nullable
  private Long planEnded;

  public static final String SERIALIZED_NAME_TAX_RATE = "taxRate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  @javax.annotation.Nullable
  private Double taxRate;

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  @javax.annotation.Nullable
  private String planName;

  public static final String SERIALIZED_NAME_PLAN_BASE_FEES_KEY = "planBaseFeesKey";
  @SerializedName(SERIALIZED_NAME_PLAN_BASE_FEES_KEY)
  @javax.annotation.Nullable
  private String planBaseFeesKey;

  public static final String SERIALIZED_NAME_PLAN_STATUS = "planStatus";
  @SerializedName(SERIALIZED_NAME_PLAN_STATUS)
  @javax.annotation.Nullable
  private String planStatus;

  public static final String SERIALIZED_NAME_PLAN_QUOTA = "planQuota";
  @SerializedName(SERIALIZED_NAME_PLAN_QUOTA)
  @javax.annotation.Nullable
  private Long planQuota;

  public static final String SERIALIZED_NAME_PRICE_U_S_D = "priceUSD";
  @SerializedName(SERIALIZED_NAME_PRICE_U_S_D)
  @javax.annotation.Nullable
  private Double priceUSD;

  public static final String SERIALIZED_NAME_PRICE_OVERAGE_U_S_D = "priceOverageUSD";
  @SerializedName(SERIALIZED_NAME_PRICE_OVERAGE_U_S_D)
  @javax.annotation.Nullable
  private Double priceOverageUSD;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private Double price;

  public static final String SERIALIZED_NAME_PRICE_OVERAGE = "priceOverage";
  @SerializedName(SERIALIZED_NAME_PRICE_OVERAGE)
  @javax.annotation.Nullable
  private Double priceOverage;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_CURRENCY_FACTOR = "currencyFactor";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FACTOR)
  @javax.annotation.Nullable
  private Double currencyFactor;

  public static final String SERIALIZED_NAME_STRIPE_CUSTOMER_ID = "stripeCustomerId";
  @SerializedName(SERIALIZED_NAME_STRIPE_CUSTOMER_ID)
  @javax.annotation.Nullable
  private String stripeCustomerId;

  public static final String SERIALIZED_NAME_STRIPE_STATUS = "stripeStatus";
  @SerializedName(SERIALIZED_NAME_STRIPE_STATUS)
  @javax.annotation.Nullable
  private String stripeStatus;

  public static final String SERIALIZED_NAME_STRIPE_SUBSCRIPTION = "stripeSubscription";
  @SerializedName(SERIALIZED_NAME_STRIPE_SUBSCRIPTION)
  @javax.annotation.Nullable
  private String stripeSubscription;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private String userId;

  public APIPlanSubscriptionOut() {
  }

  public APIPlanSubscriptionOut apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * User API Key.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public APIPlanSubscriptionOut planStarted(@javax.annotation.Nullable Long planStarted) {
    this.planStarted = planStarted;
    return this;
  }

  /**
   * Datetime when the user subscribed to the current plan.
   * @return planStarted
   */
  @javax.annotation.Nullable
  public Long getPlanStarted() {
    return planStarted;
  }

  public void setPlanStarted(@javax.annotation.Nullable Long planStarted) {
    this.planStarted = planStarted;
  }


  public APIPlanSubscriptionOut priorPlanStarted(@javax.annotation.Nullable Long priorPlanStarted) {
    this.priorPlanStarted = priorPlanStarted;
    return this;
  }

  /**
   * Datetime when the user subscribed to the prior plan.
   * @return priorPlanStarted
   */
  @javax.annotation.Nullable
  public Long getPriorPlanStarted() {
    return priorPlanStarted;
  }

  public void setPriorPlanStarted(@javax.annotation.Nullable Long priorPlanStarted) {
    this.priorPlanStarted = priorPlanStarted;
  }


  public APIPlanSubscriptionOut planEnded(@javax.annotation.Nullable Long planEnded) {
    this.planEnded = planEnded;
    return this;
  }

  /**
   * Datetime when the user ended the plan.
   * @return planEnded
   */
  @javax.annotation.Nullable
  public Long getPlanEnded() {
    return planEnded;
  }

  public void setPlanEnded(@javax.annotation.Nullable Long planEnded) {
    this.planEnded = planEnded;
  }


  public APIPlanSubscriptionOut taxRate(@javax.annotation.Nullable Double taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Applicable tax rate for the plan.
   * @return taxRate
   */
  @javax.annotation.Nullable
  public Double getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(@javax.annotation.Nullable Double taxRate) {
    this.taxRate = taxRate;
  }


  public APIPlanSubscriptionOut planName(@javax.annotation.Nullable String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * Current plan name.
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(@javax.annotation.Nullable String planName) {
    this.planName = planName;
  }


  public APIPlanSubscriptionOut planBaseFeesKey(@javax.annotation.Nullable String planBaseFeesKey) {
    this.planBaseFeesKey = planBaseFeesKey;
    return this;
  }

  /**
   * Current plan key (as in Stripe product).
   * @return planBaseFeesKey
   */
  @javax.annotation.Nullable
  public String getPlanBaseFeesKey() {
    return planBaseFeesKey;
  }

  public void setPlanBaseFeesKey(@javax.annotation.Nullable String planBaseFeesKey) {
    this.planBaseFeesKey = planBaseFeesKey;
  }


  public APIPlanSubscriptionOut planStatus(@javax.annotation.Nullable String planStatus) {
    this.planStatus = planStatus;
    return this;
  }

  /**
   * Plan status.
   * @return planStatus
   */
  @javax.annotation.Nullable
  public String getPlanStatus() {
    return planStatus;
  }

  public void setPlanStatus(@javax.annotation.Nullable String planStatus) {
    this.planStatus = planStatus;
  }


  public APIPlanSubscriptionOut planQuota(@javax.annotation.Nullable Long planQuota) {
    this.planQuota = planQuota;
    return this;
  }

  /**
   * Current plan quota in quantity of units (NB: some API use several units per name).
   * @return planQuota
   */
  @javax.annotation.Nullable
  public Long getPlanQuota() {
    return planQuota;
  }

  public void setPlanQuota(@javax.annotation.Nullable Long planQuota) {
    this.planQuota = planQuota;
  }


  public APIPlanSubscriptionOut priceUSD(@javax.annotation.Nullable Double priceUSD) {
    this.priceUSD = priceUSD;
    return this;
  }

  /**
   * Current plan monthly price expressed in USD (includes a free quota).
   * @return priceUSD
   */
  @javax.annotation.Nullable
  public Double getPriceUSD() {
    return priceUSD;
  }

  public void setPriceUSD(@javax.annotation.Nullable Double priceUSD) {
    this.priceUSD = priceUSD;
  }


  public APIPlanSubscriptionOut priceOverageUSD(@javax.annotation.Nullable Double priceOverageUSD) {
    this.priceOverageUSD = priceOverageUSD;
    return this;
  }

  /**
   * Current plan price for overages expressed in USD (extra price per unit above the free quota).
   * @return priceOverageUSD
   */
  @javax.annotation.Nullable
  public Double getPriceOverageUSD() {
    return priceOverageUSD;
  }

  public void setPriceOverageUSD(@javax.annotation.Nullable Double priceOverageUSD) {
    this.priceOverageUSD = priceOverageUSD;
  }


  public APIPlanSubscriptionOut price(@javax.annotation.Nullable Double price) {
    this.price = price;
    return this;
  }

  /**
   * Current plan price for overages expressed in Currency (extra price per unit above the free quota).
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable Double price) {
    this.price = price;
  }


  public APIPlanSubscriptionOut priceOverage(@javax.annotation.Nullable Double priceOverage) {
    this.priceOverage = priceOverage;
    return this;
  }

  /**
   * Current plan price for overages expressed in Currency (extra price per unit above the free quota).
   * @return priceOverage
   */
  @javax.annotation.Nullable
  public Double getPriceOverage() {
    return priceOverage;
  }

  public void setPriceOverage(@javax.annotation.Nullable Double priceOverage) {
    this.priceOverage = priceOverage;
  }


  public APIPlanSubscriptionOut currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Current plan Currency for prices.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public APIPlanSubscriptionOut currencyFactor(@javax.annotation.Nullable Double currencyFactor) {
    this.currencyFactor = currencyFactor;
    return this;
  }

  /**
   * For USD, GBP, EUR - the factor is 1.
   * @return currencyFactor
   */
  @javax.annotation.Nullable
  public Double getCurrencyFactor() {
    return currencyFactor;
  }

  public void setCurrencyFactor(@javax.annotation.Nullable Double currencyFactor) {
    this.currencyFactor = currencyFactor;
  }


  public APIPlanSubscriptionOut stripeCustomerId(@javax.annotation.Nullable String stripeCustomerId) {
    this.stripeCustomerId = stripeCustomerId;
    return this;
  }

  /**
   * Stripe customer identifier.
   * @return stripeCustomerId
   */
  @javax.annotation.Nullable
  public String getStripeCustomerId() {
    return stripeCustomerId;
  }

  public void setStripeCustomerId(@javax.annotation.Nullable String stripeCustomerId) {
    this.stripeCustomerId = stripeCustomerId;
  }


  public APIPlanSubscriptionOut stripeStatus(@javax.annotation.Nullable String stripeStatus) {
    this.stripeStatus = stripeStatus;
    return this;
  }

  /**
   * Stripe status ex active.
   * @return stripeStatus
   */
  @javax.annotation.Nullable
  public String getStripeStatus() {
    return stripeStatus;
  }

  public void setStripeStatus(@javax.annotation.Nullable String stripeStatus) {
    this.stripeStatus = stripeStatus;
  }


  public APIPlanSubscriptionOut stripeSubscription(@javax.annotation.Nullable String stripeSubscription) {
    this.stripeSubscription = stripeSubscription;
    return this;
  }

  /**
   * Stripe subscription identifier.
   * @return stripeSubscription
   */
  @javax.annotation.Nullable
  public String getStripeSubscription() {
    return stripeSubscription;
  }

  public void setStripeSubscription(@javax.annotation.Nullable String stripeSubscription) {
    this.stripeSubscription = stripeSubscription;
  }


  public APIPlanSubscriptionOut userId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Internal user identifier.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIPlanSubscriptionOut apIPlanSubscriptionOut = (APIPlanSubscriptionOut) o;
    return Objects.equals(this.apiKey, apIPlanSubscriptionOut.apiKey) &&
        Objects.equals(this.planStarted, apIPlanSubscriptionOut.planStarted) &&
        Objects.equals(this.priorPlanStarted, apIPlanSubscriptionOut.priorPlanStarted) &&
        Objects.equals(this.planEnded, apIPlanSubscriptionOut.planEnded) &&
        Objects.equals(this.taxRate, apIPlanSubscriptionOut.taxRate) &&
        Objects.equals(this.planName, apIPlanSubscriptionOut.planName) &&
        Objects.equals(this.planBaseFeesKey, apIPlanSubscriptionOut.planBaseFeesKey) &&
        Objects.equals(this.planStatus, apIPlanSubscriptionOut.planStatus) &&
        Objects.equals(this.planQuota, apIPlanSubscriptionOut.planQuota) &&
        Objects.equals(this.priceUSD, apIPlanSubscriptionOut.priceUSD) &&
        Objects.equals(this.priceOverageUSD, apIPlanSubscriptionOut.priceOverageUSD) &&
        Objects.equals(this.price, apIPlanSubscriptionOut.price) &&
        Objects.equals(this.priceOverage, apIPlanSubscriptionOut.priceOverage) &&
        Objects.equals(this.currency, apIPlanSubscriptionOut.currency) &&
        Objects.equals(this.currencyFactor, apIPlanSubscriptionOut.currencyFactor) &&
        Objects.equals(this.stripeCustomerId, apIPlanSubscriptionOut.stripeCustomerId) &&
        Objects.equals(this.stripeStatus, apIPlanSubscriptionOut.stripeStatus) &&
        Objects.equals(this.stripeSubscription, apIPlanSubscriptionOut.stripeSubscription) &&
        Objects.equals(this.userId, apIPlanSubscriptionOut.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, planStarted, priorPlanStarted, planEnded, taxRate, planName, planBaseFeesKey, planStatus, planQuota, priceUSD, priceOverageUSD, price, priceOverage, currency, currencyFactor, stripeCustomerId, stripeStatus, stripeSubscription, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIPlanSubscriptionOut {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    planStarted: ").append(toIndentedString(planStarted)).append("\n");
    sb.append("    priorPlanStarted: ").append(toIndentedString(priorPlanStarted)).append("\n");
    sb.append("    planEnded: ").append(toIndentedString(planEnded)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    planBaseFeesKey: ").append(toIndentedString(planBaseFeesKey)).append("\n");
    sb.append("    planStatus: ").append(toIndentedString(planStatus)).append("\n");
    sb.append("    planQuota: ").append(toIndentedString(planQuota)).append("\n");
    sb.append("    priceUSD: ").append(toIndentedString(priceUSD)).append("\n");
    sb.append("    priceOverageUSD: ").append(toIndentedString(priceOverageUSD)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceOverage: ").append(toIndentedString(priceOverage)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyFactor: ").append(toIndentedString(currencyFactor)).append("\n");
    sb.append("    stripeCustomerId: ").append(toIndentedString(stripeCustomerId)).append("\n");
    sb.append("    stripeStatus: ").append(toIndentedString(stripeStatus)).append("\n");
    sb.append("    stripeSubscription: ").append(toIndentedString(stripeSubscription)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey");
    openapiFields.add("planStarted");
    openapiFields.add("priorPlanStarted");
    openapiFields.add("planEnded");
    openapiFields.add("taxRate");
    openapiFields.add("planName");
    openapiFields.add("planBaseFeesKey");
    openapiFields.add("planStatus");
    openapiFields.add("planQuota");
    openapiFields.add("priceUSD");
    openapiFields.add("priceOverageUSD");
    openapiFields.add("price");
    openapiFields.add("priceOverage");
    openapiFields.add("currency");
    openapiFields.add("currencyFactor");
    openapiFields.add("stripeCustomerId");
    openapiFields.add("stripeStatus");
    openapiFields.add("stripeSubscription");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIPlanSubscriptionOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIPlanSubscriptionOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIPlanSubscriptionOut is not found in the empty JSON string", APIPlanSubscriptionOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIPlanSubscriptionOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIPlanSubscriptionOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull()) && !jsonObj.get("planName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planName").toString()));
      }
      if ((jsonObj.get("planBaseFeesKey") != null && !jsonObj.get("planBaseFeesKey").isJsonNull()) && !jsonObj.get("planBaseFeesKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planBaseFeesKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planBaseFeesKey").toString()));
      }
      if ((jsonObj.get("planStatus") != null && !jsonObj.get("planStatus").isJsonNull()) && !jsonObj.get("planStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planStatus").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("stripeCustomerId") != null && !jsonObj.get("stripeCustomerId").isJsonNull()) && !jsonObj.get("stripeCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeCustomerId").toString()));
      }
      if ((jsonObj.get("stripeStatus") != null && !jsonObj.get("stripeStatus").isJsonNull()) && !jsonObj.get("stripeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeStatus").toString()));
      }
      if ((jsonObj.get("stripeSubscription") != null && !jsonObj.get("stripeSubscription").isJsonNull()) && !jsonObj.get("stripeSubscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeSubscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeSubscription").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIPlanSubscriptionOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIPlanSubscriptionOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIPlanSubscriptionOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIPlanSubscriptionOut.class));

       return (TypeAdapter<T>) new TypeAdapter<APIPlanSubscriptionOut>() {
           @Override
           public void write(JsonWriter out, APIPlanSubscriptionOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIPlanSubscriptionOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIPlanSubscriptionOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIPlanSubscriptionOut
   * @throws IOException if the JSON string is invalid with respect to APIPlanSubscriptionOut
   */
  public static APIPlanSubscriptionOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIPlanSubscriptionOut.class);
  }

  /**
   * Convert an instance of APIPlanSubscriptionOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

