/*
 * NamSor API v2
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package app.namsor.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import app.namsor.client.JSON;

/**
 * Represents the output of inferring the LIKELY US &#39;race/ethnicity&#39; from a personal name, given US country of residence and (optionally) a ZIP5 code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PersonalNameUSRaceEthnicityOut {
  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  @javax.annotation.Nullable
  private String script;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  @javax.annotation.Nullable
  private String explanation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  /**
   * Second most likely US &#39;race&#39;/ethnicity
   */
  @JsonAdapter(RaceEthnicityAltEnum.Adapter.class)
  public enum RaceEthnicityAltEnum {
    W_NL("W_NL"),
    
    HL("HL"),
    
    A("A"),
    
    B_NL("B_NL"),
    
    AI_AN("AI_AN"),
    
    PI("PI");

    private String value;

    RaceEthnicityAltEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaceEthnicityAltEnum fromValue(String value) {
      for (RaceEthnicityAltEnum b : RaceEthnicityAltEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RaceEthnicityAltEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaceEthnicityAltEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaceEthnicityAltEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RaceEthnicityAltEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RaceEthnicityAltEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RACE_ETHNICITY_ALT = "raceEthnicityAlt";
  @SerializedName(SERIALIZED_NAME_RACE_ETHNICITY_ALT)
  @javax.annotation.Nullable
  private RaceEthnicityAltEnum raceEthnicityAlt;

  /**
   * Most likely US &#39;race&#39;/ethnicity
   */
  @JsonAdapter(RaceEthnicityEnum.Adapter.class)
  public enum RaceEthnicityEnum {
    W_NL("W_NL"),
    
    HL("HL"),
    
    A("A"),
    
    B_NL("B_NL"),
    
    AI_AN("AI_AN"),
    
    PI("PI");

    private String value;

    RaceEthnicityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RaceEthnicityEnum fromValue(String value) {
      for (RaceEthnicityEnum b : RaceEthnicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RaceEthnicityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RaceEthnicityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RaceEthnicityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RaceEthnicityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RaceEthnicityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RACE_ETHNICITY = "raceEthnicity";
  @SerializedName(SERIALIZED_NAME_RACE_ETHNICITY)
  @javax.annotation.Nullable
  private RaceEthnicityEnum raceEthnicity;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  @javax.annotation.Nullable
  private Double score;

  public static final String SERIALIZED_NAME_RACE_ETHNICITIES_TOP = "raceEthnicitiesTop";
  @SerializedName(SERIALIZED_NAME_RACE_ETHNICITIES_TOP)
  @javax.annotation.Nullable
  private List<String> raceEthnicitiesTop = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROBABILITY_CALIBRATED = "probabilityCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_CALIBRATED)
  @javax.annotation.Nullable
  private Double probabilityCalibrated;

  public static final String SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED = "probabilityAltCalibrated";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ALT_CALIBRATED)
  @javax.annotation.Nullable
  private Double probabilityAltCalibrated;

  public PersonalNameUSRaceEthnicityOut() {
  }

  public PersonalNameUSRaceEthnicityOut script(@javax.annotation.Nullable String script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(@javax.annotation.Nullable String script) {
    this.script = script;
  }


  public PersonalNameUSRaceEthnicityOut id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public PersonalNameUSRaceEthnicityOut explanation(@javax.annotation.Nullable String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Get explanation
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(@javax.annotation.Nullable String explanation) {
    this.explanation = explanation;
  }


  public PersonalNameUSRaceEthnicityOut name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The input name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public PersonalNameUSRaceEthnicityOut raceEthnicityAlt(@javax.annotation.Nullable RaceEthnicityAltEnum raceEthnicityAlt) {
    this.raceEthnicityAlt = raceEthnicityAlt;
    return this;
  }

  /**
   * Second most likely US &#39;race&#39;/ethnicity
   * @return raceEthnicityAlt
   */
  @javax.annotation.Nullable
  public RaceEthnicityAltEnum getRaceEthnicityAlt() {
    return raceEthnicityAlt;
  }

  public void setRaceEthnicityAlt(@javax.annotation.Nullable RaceEthnicityAltEnum raceEthnicityAlt) {
    this.raceEthnicityAlt = raceEthnicityAlt;
  }


  public PersonalNameUSRaceEthnicityOut raceEthnicity(@javax.annotation.Nullable RaceEthnicityEnum raceEthnicity) {
    this.raceEthnicity = raceEthnicity;
    return this;
  }

  /**
   * Most likely US &#39;race&#39;/ethnicity
   * @return raceEthnicity
   */
  @javax.annotation.Nullable
  public RaceEthnicityEnum getRaceEthnicity() {
    return raceEthnicity;
  }

  public void setRaceEthnicity(@javax.annotation.Nullable RaceEthnicityEnum raceEthnicity) {
    this.raceEthnicity = raceEthnicity;
  }


  public PersonalNameUSRaceEthnicityOut score(@javax.annotation.Nullable Double score) {
    this.score = score;
    return this;
  }

  /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
   * minimum: 0
   * maximum: 100
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(@javax.annotation.Nullable Double score) {
    this.score = score;
  }


  public PersonalNameUSRaceEthnicityOut raceEthnicitiesTop(@javax.annotation.Nullable List<String> raceEthnicitiesTop) {
    this.raceEthnicitiesTop = raceEthnicitiesTop;
    return this;
  }

  public PersonalNameUSRaceEthnicityOut addRaceEthnicitiesTopItem(String raceEthnicitiesTopItem) {
    if (this.raceEthnicitiesTop == null) {
      this.raceEthnicitiesTop = new ArrayList<>();
    }
    this.raceEthnicitiesTop.add(raceEthnicitiesTopItem);
    return this;
  }

  /**
   * List &#39;race&#39;/ethnicities
   * @return raceEthnicitiesTop
   */
  @javax.annotation.Nullable
  public List<String> getRaceEthnicitiesTop() {
    return raceEthnicitiesTop;
  }

  public void setRaceEthnicitiesTop(@javax.annotation.Nullable List<String> raceEthnicitiesTop) {
    this.raceEthnicitiesTop = raceEthnicitiesTop;
  }


  public PersonalNameUSRaceEthnicityOut probabilityCalibrated(@javax.annotation.Nullable Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
    return this;
  }

  /**
   * The calibrated probability for raceEthnicity to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityCalibrated
   */
  @javax.annotation.Nullable
  public Double getProbabilityCalibrated() {
    return probabilityCalibrated;
  }

  public void setProbabilityCalibrated(@javax.annotation.Nullable Double probabilityCalibrated) {
    this.probabilityCalibrated = probabilityCalibrated;
  }


  public PersonalNameUSRaceEthnicityOut probabilityAltCalibrated(@javax.annotation.Nullable Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
    return this;
  }

  /**
   * The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 &#x3D; still calibrating. 
   * minimum: -1
   * maximum: 1
   * @return probabilityAltCalibrated
   */
  @javax.annotation.Nullable
  public Double getProbabilityAltCalibrated() {
    return probabilityAltCalibrated;
  }

  public void setProbabilityAltCalibrated(@javax.annotation.Nullable Double probabilityAltCalibrated) {
    this.probabilityAltCalibrated = probabilityAltCalibrated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalNameUSRaceEthnicityOut personalNameUSRaceEthnicityOut = (PersonalNameUSRaceEthnicityOut) o;
    return Objects.equals(this.script, personalNameUSRaceEthnicityOut.script) &&
        Objects.equals(this.id, personalNameUSRaceEthnicityOut.id) &&
        Objects.equals(this.explanation, personalNameUSRaceEthnicityOut.explanation) &&
        Objects.equals(this.name, personalNameUSRaceEthnicityOut.name) &&
        Objects.equals(this.raceEthnicityAlt, personalNameUSRaceEthnicityOut.raceEthnicityAlt) &&
        Objects.equals(this.raceEthnicity, personalNameUSRaceEthnicityOut.raceEthnicity) &&
        Objects.equals(this.score, personalNameUSRaceEthnicityOut.score) &&
        Objects.equals(this.raceEthnicitiesTop, personalNameUSRaceEthnicityOut.raceEthnicitiesTop) &&
        Objects.equals(this.probabilityCalibrated, personalNameUSRaceEthnicityOut.probabilityCalibrated) &&
        Objects.equals(this.probabilityAltCalibrated, personalNameUSRaceEthnicityOut.probabilityAltCalibrated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(script, id, explanation, name, raceEthnicityAlt, raceEthnicity, score, raceEthnicitiesTop, probabilityCalibrated, probabilityAltCalibrated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalNameUSRaceEthnicityOut {\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    raceEthnicityAlt: ").append(toIndentedString(raceEthnicityAlt)).append("\n");
    sb.append("    raceEthnicity: ").append(toIndentedString(raceEthnicity)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    raceEthnicitiesTop: ").append(toIndentedString(raceEthnicitiesTop)).append("\n");
    sb.append("    probabilityCalibrated: ").append(toIndentedString(probabilityCalibrated)).append("\n");
    sb.append("    probabilityAltCalibrated: ").append(toIndentedString(probabilityAltCalibrated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("script");
    openapiFields.add("id");
    openapiFields.add("explanation");
    openapiFields.add("name");
    openapiFields.add("raceEthnicityAlt");
    openapiFields.add("raceEthnicity");
    openapiFields.add("score");
    openapiFields.add("raceEthnicitiesTop");
    openapiFields.add("probabilityCalibrated");
    openapiFields.add("probabilityAltCalibrated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalNameUSRaceEthnicityOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalNameUSRaceEthnicityOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalNameUSRaceEthnicityOut is not found in the empty JSON string", PersonalNameUSRaceEthnicityOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalNameUSRaceEthnicityOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalNameUSRaceEthnicityOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("raceEthnicityAlt") != null && !jsonObj.get("raceEthnicityAlt").isJsonNull()) && !jsonObj.get("raceEthnicityAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raceEthnicityAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raceEthnicityAlt").toString()));
      }
      // validate the optional field `raceEthnicityAlt`
      if (jsonObj.get("raceEthnicityAlt") != null && !jsonObj.get("raceEthnicityAlt").isJsonNull()) {
        RaceEthnicityAltEnum.validateJsonElement(jsonObj.get("raceEthnicityAlt"));
      }
      if ((jsonObj.get("raceEthnicity") != null && !jsonObj.get("raceEthnicity").isJsonNull()) && !jsonObj.get("raceEthnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raceEthnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raceEthnicity").toString()));
      }
      // validate the optional field `raceEthnicity`
      if (jsonObj.get("raceEthnicity") != null && !jsonObj.get("raceEthnicity").isJsonNull()) {
        RaceEthnicityEnum.validateJsonElement(jsonObj.get("raceEthnicity"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("raceEthnicitiesTop") != null && !jsonObj.get("raceEthnicitiesTop").isJsonNull() && !jsonObj.get("raceEthnicitiesTop").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `raceEthnicitiesTop` to be an array in the JSON string but got `%s`", jsonObj.get("raceEthnicitiesTop").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalNameUSRaceEthnicityOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalNameUSRaceEthnicityOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalNameUSRaceEthnicityOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalNameUSRaceEthnicityOut.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalNameUSRaceEthnicityOut>() {
           @Override
           public void write(JsonWriter out, PersonalNameUSRaceEthnicityOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalNameUSRaceEthnicityOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalNameUSRaceEthnicityOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalNameUSRaceEthnicityOut
   * @throws IOException if the JSON string is invalid with respect to PersonalNameUSRaceEthnicityOut
   */
  public static PersonalNameUSRaceEthnicityOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalNameUSRaceEthnicityOut.class);
  }

  /**
   * Convert an instance of PersonalNameUSRaceEthnicityOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

