<?php
/**
 * APICounterV2Out
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Namsor\Client\Model;

use \ArrayAccess;
use \Namsor\Client\ObjectSerializer;

/**
 * APICounterV2Out Class Doc Comment
 *
 * @category Class
 * @description Detailed usage as reported by the deduplicating API counter.
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APICounterV2Out implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APICounterV2Out';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => '\Namsor\Client\Model\APIKeyOut',
        'api_service' => 'string',
        'host_address' => 'string',
        'created_date_time' => 'int',
        'total_usage' => 'int',
        'last_flushed_date_time' => 'int',
        'last_used_date_time' => 'int',
        'service_features_usage' => 'array<string,int>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'api_service' => null,
        'host_address' => null,
        'created_date_time' => 'int64',
        'total_usage' => 'int64',
        'last_flushed_date_time' => 'int64',
        'last_used_date_time' => 'int64',
        'service_features_usage' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'api_service' => false,
        'host_address' => false,
        'created_date_time' => false,
        'total_usage' => false,
        'last_flushed_date_time' => false,
        'last_used_date_time' => false,
        'service_features_usage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'api_service' => 'apiService',
        'host_address' => 'hostAddress',
        'created_date_time' => 'createdDateTime',
        'total_usage' => 'totalUsage',
        'last_flushed_date_time' => 'lastFlushedDateTime',
        'last_used_date_time' => 'lastUsedDateTime',
        'service_features_usage' => 'serviceFeaturesUsage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'api_service' => 'setApiService',
        'host_address' => 'setHostAddress',
        'created_date_time' => 'setCreatedDateTime',
        'total_usage' => 'setTotalUsage',
        'last_flushed_date_time' => 'setLastFlushedDateTime',
        'last_used_date_time' => 'setLastUsedDateTime',
        'service_features_usage' => 'setServiceFeaturesUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'api_service' => 'getApiService',
        'host_address' => 'getHostAddress',
        'created_date_time' => 'getCreatedDateTime',
        'total_usage' => 'getTotalUsage',
        'last_flushed_date_time' => 'getLastFlushedDateTime',
        'last_used_date_time' => 'getLastUsedDateTime',
        'service_features_usage' => 'getServiceFeaturesUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('api_service', $data ?? [], null);
        $this->setIfExists('host_address', $data ?? [], null);
        $this->setIfExists('created_date_time', $data ?? [], null);
        $this->setIfExists('total_usage', $data ?? [], null);
        $this->setIfExists('last_flushed_date_time', $data ?? [], null);
        $this->setIfExists('last_used_date_time', $data ?? [], null);
        $this->setIfExists('service_features_usage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return \Namsor\Client\Model\APIKeyOut|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param \Namsor\Client\Model\APIKeyOut|null $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets api_service
     *
     * @return string|null
     */
    public function getApiService()
    {
        return $this->container['api_service'];
    }

    /**
     * Sets api_service
     *
     * @param string|null $api_service The apiService corresponds to the classifier name.
     *
     * @return self
     */
    public function setApiService($api_service)
    {
        if (is_null($api_service)) {
            throw new \InvalidArgumentException('non-nullable api_service cannot be null');
        }
        $this->container['api_service'] = $api_service;

        return $this;
    }

    /**
     * Gets host_address
     *
     * @return string|null
     */
    public function getHostAddress()
    {
        return $this->container['host_address'];
    }

    /**
     * Sets host_address
     *
     * @param string|null $host_address The processing hostAddress.
     *
     * @return self
     */
    public function setHostAddress($host_address)
    {
        if (is_null($host_address)) {
            throw new \InvalidArgumentException('non-nullable host_address cannot be null');
        }
        $this->container['host_address'] = $host_address;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return int|null
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param int|null $created_date_time The create datetime of the counter.
     *
     * @return self
     */
    public function setCreatedDateTime($created_date_time)
    {
        if (is_null($created_date_time)) {
            throw new \InvalidArgumentException('non-nullable created_date_time cannot be null');
        }
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets total_usage
     *
     * @return int|null
     */
    public function getTotalUsage()
    {
        return $this->container['total_usage'];
    }

    /**
     * Sets total_usage
     *
     * @param int|null $total_usage The usage of the counter.
     *
     * @return self
     */
    public function setTotalUsage($total_usage)
    {
        if (is_null($total_usage)) {
            throw new \InvalidArgumentException('non-nullable total_usage cannot be null');
        }
        $this->container['total_usage'] = $total_usage;

        return $this;
    }

    /**
     * Gets last_flushed_date_time
     *
     * @return int|null
     */
    public function getLastFlushedDateTime()
    {
        return $this->container['last_flushed_date_time'];
    }

    /**
     * Sets last_flushed_date_time
     *
     * @param int|null $last_flushed_date_time The flush datetime of the counter.
     *
     * @return self
     */
    public function setLastFlushedDateTime($last_flushed_date_time)
    {
        if (is_null($last_flushed_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_flushed_date_time cannot be null');
        }
        $this->container['last_flushed_date_time'] = $last_flushed_date_time;

        return $this;
    }

    /**
     * Gets last_used_date_time
     *
     * @return int|null
     */
    public function getLastUsedDateTime()
    {
        return $this->container['last_used_date_time'];
    }

    /**
     * Sets last_used_date_time
     *
     * @param int|null $last_used_date_time The last usage datetime of the counter.
     *
     * @return self
     */
    public function setLastUsedDateTime($last_used_date_time)
    {
        if (is_null($last_used_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_used_date_time cannot be null');
        }
        $this->container['last_used_date_time'] = $last_used_date_time;

        return $this;
    }

    /**
     * Gets service_features_usage
     *
     * @return array<string,int>|null
     */
    public function getServiceFeaturesUsage()
    {
        return $this->container['service_features_usage'];
    }

    /**
     * Sets service_features_usage
     *
     * @param array<string,int>|null $service_features_usage Usage of special features, such as Chinese, Japanese.
     *
     * @return self
     */
    public function setServiceFeaturesUsage($service_features_usage)
    {
        if (is_null($service_features_usage)) {
            throw new \InvalidArgumentException('non-nullable service_features_usage cannot be null');
        }
        $this->container['service_features_usage'] = $service_features_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


