<?php
/**
 * FirstLastNameDiasporaedOut
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Namsor\Client\Model;

use \ArrayAccess;
use \Namsor\Client\ObjectSerializer;

/**
 * FirstLastNameDiasporaedOut Class Doc Comment
 *
 * @category Class
 * @description Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FirstLastNameDiasporaedOut implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FirstLastNameDiasporaedOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'script' => 'string',
        'id' => 'string',
        'explanation' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'score' => 'float',
        'ethnicity_alt' => 'string',
        'ethnicity' => 'string',
        'lifted' => 'bool',
        'country_iso2' => 'string',
        'ethnicities_top' => 'string[]',
        'probability_calibrated' => 'float',
        'probability_alt_calibrated' => 'float',
        'religion_stats' => '\Namsor\Client\Model\ReligionStatOut[]',
        'religion_stats_alt' => '\Namsor\Client\Model\ReligionStatOut[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'script' => null,
        'id' => null,
        'explanation' => null,
        'first_name' => null,
        'last_name' => null,
        'score' => 'double',
        'ethnicity_alt' => null,
        'ethnicity' => null,
        'lifted' => null,
        'country_iso2' => null,
        'ethnicities_top' => null,
        'probability_calibrated' => 'double',
        'probability_alt_calibrated' => 'double',
        'religion_stats' => null,
        'religion_stats_alt' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'script' => false,
        'id' => false,
        'explanation' => false,
        'first_name' => false,
        'last_name' => false,
        'score' => false,
        'ethnicity_alt' => false,
        'ethnicity' => false,
        'lifted' => false,
        'country_iso2' => false,
        'ethnicities_top' => false,
        'probability_calibrated' => false,
        'probability_alt_calibrated' => false,
        'religion_stats' => false,
        'religion_stats_alt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'script' => 'script',
        'id' => 'id',
        'explanation' => 'explanation',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'score' => 'score',
        'ethnicity_alt' => 'ethnicityAlt',
        'ethnicity' => 'ethnicity',
        'lifted' => 'lifted',
        'country_iso2' => 'countryIso2',
        'ethnicities_top' => 'ethnicitiesTop',
        'probability_calibrated' => 'probabilityCalibrated',
        'probability_alt_calibrated' => 'probabilityAltCalibrated',
        'religion_stats' => 'religionStats',
        'religion_stats_alt' => 'religionStatsAlt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'script' => 'setScript',
        'id' => 'setId',
        'explanation' => 'setExplanation',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'score' => 'setScore',
        'ethnicity_alt' => 'setEthnicityAlt',
        'ethnicity' => 'setEthnicity',
        'lifted' => 'setLifted',
        'country_iso2' => 'setCountryIso2',
        'ethnicities_top' => 'setEthnicitiesTop',
        'probability_calibrated' => 'setProbabilityCalibrated',
        'probability_alt_calibrated' => 'setProbabilityAltCalibrated',
        'religion_stats' => 'setReligionStats',
        'religion_stats_alt' => 'setReligionStatsAlt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'script' => 'getScript',
        'id' => 'getId',
        'explanation' => 'getExplanation',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'score' => 'getScore',
        'ethnicity_alt' => 'getEthnicityAlt',
        'ethnicity' => 'getEthnicity',
        'lifted' => 'getLifted',
        'country_iso2' => 'getCountryIso2',
        'ethnicities_top' => 'getEthnicitiesTop',
        'probability_calibrated' => 'getProbabilityCalibrated',
        'probability_alt_calibrated' => 'getProbabilityAltCalibrated',
        'religion_stats' => 'getReligionStats',
        'religion_stats_alt' => 'getReligionStatsAlt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('script', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('explanation', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('ethnicity_alt', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('lifted', $data ?? [], null);
        $this->setIfExists('country_iso2', $data ?? [], null);
        $this->setIfExists('ethnicities_top', $data ?? [], null);
        $this->setIfExists('probability_calibrated', $data ?? [], null);
        $this->setIfExists('probability_alt_calibrated', $data ?? [], null);
        $this->setIfExists('religion_stats', $data ?? [], null);
        $this->setIfExists('religion_stats_alt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['score']) && ($this->container['score'] > 100)) {
            $invalidProperties[] = "invalid value for 'score', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['score']) && ($this->container['score'] < 0)) {
            $invalidProperties[] = "invalid value for 'score', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['probability_calibrated']) && ($this->container['probability_calibrated'] > 1)) {
            $invalidProperties[] = "invalid value for 'probability_calibrated', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['probability_calibrated']) && ($this->container['probability_calibrated'] < -1)) {
            $invalidProperties[] = "invalid value for 'probability_calibrated', must be bigger than or equal to -1.";
        }

        if (!is_null($this->container['probability_alt_calibrated']) && ($this->container['probability_alt_calibrated'] > 1)) {
            $invalidProperties[] = "invalid value for 'probability_alt_calibrated', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['probability_alt_calibrated']) && ($this->container['probability_alt_calibrated'] < -1)) {
            $invalidProperties[] = "invalid value for 'probability_alt_calibrated', must be bigger than or equal to -1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets script
     *
     * @return string|null
     */
    public function getScript()
    {
        return $this->container['script'];
    }

    /**
     * Sets script
     *
     * @param string|null $script script
     *
     * @return self
     */
    public function setScript($script)
    {
        if (is_null($script)) {
            throw new \InvalidArgumentException('non-nullable script cannot be null');
        }
        $this->container['script'] = $script;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets explanation
     *
     * @return string|null
     */
    public function getExplanation()
    {
        return $this->container['explanation'];
    }

    /**
     * Sets explanation
     *
     * @param string|null $explanation explanation
     *
     * @return self
     */
    public function setExplanation($explanation)
    {
        if (is_null($explanation)) {
            throw new \InvalidArgumentException('non-nullable explanation cannot be null');
        }
        $this->container['explanation'] = $explanation;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name (also known as given name)
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name (also known as family name, or surname)
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float|null $score Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available.
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }

        if (($score > 100)) {
            throw new \InvalidArgumentException('invalid value for $score when calling FirstLastNameDiasporaedOut., must be smaller than or equal to 100.');
        }
        if (($score < 0)) {
            throw new \InvalidArgumentException('invalid value for $score when calling FirstLastNameDiasporaedOut., must be bigger than or equal to 0.');
        }

        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets ethnicity_alt
     *
     * @return string|null
     */
    public function getEthnicityAlt()
    {
        return $this->container['ethnicity_alt'];
    }

    /**
     * Sets ethnicity_alt
     *
     * @param string|null $ethnicity_alt The second best alternative ethnicity
     *
     * @return self
     */
    public function setEthnicityAlt($ethnicity_alt)
    {
        if (is_null($ethnicity_alt)) {
            throw new \InvalidArgumentException('non-nullable ethnicity_alt cannot be null');
        }
        $this->container['ethnicity_alt'] = $ethnicity_alt;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The most likely ethnicity
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            throw new \InvalidArgumentException('non-nullable ethnicity cannot be null');
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets lifted
     *
     * @return bool|null
     */
    public function getLifted()
    {
        return $this->container['lifted'];
    }

    /**
     * Sets lifted
     *
     * @param bool|null $lifted Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.
     *
     * @return self
     */
    public function setLifted($lifted)
    {
        if (is_null($lifted)) {
            throw new \InvalidArgumentException('non-nullable lifted cannot be null');
        }
        $this->container['lifted'] = $lifted;

        return $this;
    }

    /**
     * Gets country_iso2
     *
     * @return string|null
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string|null $country_iso2 From input data, the countryIso2 of geographic context (US,CA etc.)
     *
     * @return self
     */
    public function setCountryIso2($country_iso2)
    {
        if (is_null($country_iso2)) {
            throw new \InvalidArgumentException('non-nullable country_iso2 cannot be null');
        }
        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }

    /**
     * Gets ethnicities_top
     *
     * @return string[]|null
     */
    public function getEthnicitiesTop()
    {
        return $this->container['ethnicities_top'];
    }

    /**
     * Sets ethnicities_top
     *
     * @param string[]|null $ethnicities_top List most likely ethnicities (top 10)
     *
     * @return self
     */
    public function setEthnicitiesTop($ethnicities_top)
    {
        if (is_null($ethnicities_top)) {
            throw new \InvalidArgumentException('non-nullable ethnicities_top cannot be null');
        }
        $this->container['ethnicities_top'] = $ethnicities_top;

        return $this;
    }

    /**
     * Gets probability_calibrated
     *
     * @return float|null
     */
    public function getProbabilityCalibrated()
    {
        return $this->container['probability_calibrated'];
    }

    /**
     * Sets probability_calibrated
     *
     * @param float|null $probability_calibrated The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating.
     *
     * @return self
     */
    public function setProbabilityCalibrated($probability_calibrated)
    {
        if (is_null($probability_calibrated)) {
            throw new \InvalidArgumentException('non-nullable probability_calibrated cannot be null');
        }

        if (($probability_calibrated > 1)) {
            throw new \InvalidArgumentException('invalid value for $probability_calibrated when calling FirstLastNameDiasporaedOut., must be smaller than or equal to 1.');
        }
        if (($probability_calibrated < -1)) {
            throw new \InvalidArgumentException('invalid value for $probability_calibrated when calling FirstLastNameDiasporaedOut., must be bigger than or equal to -1.');
        }

        $this->container['probability_calibrated'] = $probability_calibrated;

        return $this;
    }

    /**
     * Gets probability_alt_calibrated
     *
     * @return float|null
     */
    public function getProbabilityAltCalibrated()
    {
        return $this->container['probability_alt_calibrated'];
    }

    /**
     * Sets probability_alt_calibrated
     *
     * @param float|null $probability_alt_calibrated The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating.
     *
     * @return self
     */
    public function setProbabilityAltCalibrated($probability_alt_calibrated)
    {
        if (is_null($probability_alt_calibrated)) {
            throw new \InvalidArgumentException('non-nullable probability_alt_calibrated cannot be null');
        }

        if (($probability_alt_calibrated > 1)) {
            throw new \InvalidArgumentException('invalid value for $probability_alt_calibrated when calling FirstLastNameDiasporaedOut., must be smaller than or equal to 1.');
        }
        if (($probability_alt_calibrated < -1)) {
            throw new \InvalidArgumentException('invalid value for $probability_alt_calibrated when calling FirstLastNameDiasporaedOut., must be bigger than or equal to -1.');
        }

        $this->container['probability_alt_calibrated'] = $probability_alt_calibrated;

        return $this;
    }

    /**
     * Gets religion_stats
     *
     * @return \Namsor\Client\Model\ReligionStatOut[]|null
     */
    public function getReligionStats()
    {
        return $this->container['religion_stats'];
    }

    /**
     * Sets religion_stats
     *
     * @param \Namsor\Client\Model\ReligionStatOut[]|null $religion_stats Geographic religious statistics, assuming ethnicity is correctly predicted.
     *
     * @return self
     */
    public function setReligionStats($religion_stats)
    {
        if (is_null($religion_stats)) {
            throw new \InvalidArgumentException('non-nullable religion_stats cannot be null');
        }
        $this->container['religion_stats'] = $religion_stats;

        return $this;
    }

    /**
     * Gets religion_stats_alt
     *
     * @return \Namsor\Client\Model\ReligionStatOut[]|null
     */
    public function getReligionStatsAlt()
    {
        return $this->container['religion_stats_alt'];
    }

    /**
     * Sets religion_stats_alt
     *
     * @param \Namsor\Client\Model\ReligionStatOut[]|null $religion_stats_alt Geographic religious statistics, for country best alternative.
     *
     * @return self
     */
    public function setReligionStatsAlt($religion_stats_alt)
    {
        if (is_null($religion_stats_alt)) {
            throw new \InvalidArgumentException('non-nullable religion_stats_alt cannot be null');
        }
        $this->container['religion_stats_alt'] = $religion_stats_alt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


