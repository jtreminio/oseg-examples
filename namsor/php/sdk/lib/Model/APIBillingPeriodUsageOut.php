<?php
/**
 * APIBillingPeriodUsageOut
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Namsor\Client\Model;

use \ArrayAccess;
use \Namsor\Client\ObjectSerializer;

/**
 * APIBillingPeriodUsageOut Class Doc Comment
 *
 * @category Class
 * @description The current billing period.
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBillingPeriodUsageOut implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APIBillingPeriodUsageOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'subscription_started' => 'int',
        'period_started' => 'int',
        'period_ended' => 'int',
        'stripe_current_period_end' => 'int',
        'stripe_current_period_start' => 'int',
        'billing_status' => 'string',
        'usage' => 'int',
        'soft_limit' => 'int',
        'hard_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'subscription_started' => 'int64',
        'period_started' => 'int64',
        'period_ended' => 'int64',
        'stripe_current_period_end' => 'int64',
        'stripe_current_period_start' => 'int64',
        'billing_status' => null,
        'usage' => 'int64',
        'soft_limit' => 'int64',
        'hard_limit' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'subscription_started' => false,
        'period_started' => false,
        'period_ended' => false,
        'stripe_current_period_end' => false,
        'stripe_current_period_start' => false,
        'billing_status' => false,
        'usage' => false,
        'soft_limit' => false,
        'hard_limit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'subscription_started' => 'subscriptionStarted',
        'period_started' => 'periodStarted',
        'period_ended' => 'periodEnded',
        'stripe_current_period_end' => 'stripeCurrentPeriodEnd',
        'stripe_current_period_start' => 'stripeCurrentPeriodStart',
        'billing_status' => 'billingStatus',
        'usage' => 'usage',
        'soft_limit' => 'softLimit',
        'hard_limit' => 'hardLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'subscription_started' => 'setSubscriptionStarted',
        'period_started' => 'setPeriodStarted',
        'period_ended' => 'setPeriodEnded',
        'stripe_current_period_end' => 'setStripeCurrentPeriodEnd',
        'stripe_current_period_start' => 'setStripeCurrentPeriodStart',
        'billing_status' => 'setBillingStatus',
        'usage' => 'setUsage',
        'soft_limit' => 'setSoftLimit',
        'hard_limit' => 'setHardLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'subscription_started' => 'getSubscriptionStarted',
        'period_started' => 'getPeriodStarted',
        'period_ended' => 'getPeriodEnded',
        'stripe_current_period_end' => 'getStripeCurrentPeriodEnd',
        'stripe_current_period_start' => 'getStripeCurrentPeriodStart',
        'billing_status' => 'getBillingStatus',
        'usage' => 'getUsage',
        'soft_limit' => 'getSoftLimit',
        'hard_limit' => 'getHardLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('subscription_started', $data ?? [], null);
        $this->setIfExists('period_started', $data ?? [], null);
        $this->setIfExists('period_ended', $data ?? [], null);
        $this->setIfExists('stripe_current_period_end', $data ?? [], null);
        $this->setIfExists('stripe_current_period_start', $data ?? [], null);
        $this->setIfExists('billing_status', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('soft_limit', $data ?? [], null);
        $this->setIfExists('hard_limit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key User API Key.
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets subscription_started
     *
     * @return int|null
     */
    public function getSubscriptionStarted()
    {
        return $this->container['subscription_started'];
    }

    /**
     * Sets subscription_started
     *
     * @param int|null $subscription_started Datetime when the user subscribed to the plan.
     *
     * @return self
     */
    public function setSubscriptionStarted($subscription_started)
    {
        if (is_null($subscription_started)) {
            throw new \InvalidArgumentException('non-nullable subscription_started cannot be null');
        }
        $this->container['subscription_started'] = $subscription_started;

        return $this;
    }

    /**
     * Gets period_started
     *
     * @return int|null
     */
    public function getPeriodStarted()
    {
        return $this->container['period_started'];
    }

    /**
     * Sets period_started
     *
     * @param int|null $period_started Datetime when the the plan's current period started.
     *
     * @return self
     */
    public function setPeriodStarted($period_started)
    {
        if (is_null($period_started)) {
            throw new \InvalidArgumentException('non-nullable period_started cannot be null');
        }
        $this->container['period_started'] = $period_started;

        return $this;
    }

    /**
     * Gets period_ended
     *
     * @return int|null
     */
    public function getPeriodEnded()
    {
        return $this->container['period_ended'];
    }

    /**
     * Sets period_ended
     *
     * @param int|null $period_ended Datetime when the the plan's current period endend.
     *
     * @return self
     */
    public function setPeriodEnded($period_ended)
    {
        if (is_null($period_ended)) {
            throw new \InvalidArgumentException('non-nullable period_ended cannot be null');
        }
        $this->container['period_ended'] = $period_ended;

        return $this;
    }

    /**
     * Gets stripe_current_period_end
     *
     * @return int|null
     */
    public function getStripeCurrentPeriodEnd()
    {
        return $this->container['stripe_current_period_end'];
    }

    /**
     * Sets stripe_current_period_end
     *
     * @param int|null $stripe_current_period_end Datetime when the the plan's current period endend (in Stripe). Internal and Stripe periodicity should ~coincide.
     *
     * @return self
     */
    public function setStripeCurrentPeriodEnd($stripe_current_period_end)
    {
        if (is_null($stripe_current_period_end)) {
            throw new \InvalidArgumentException('non-nullable stripe_current_period_end cannot be null');
        }
        $this->container['stripe_current_period_end'] = $stripe_current_period_end;

        return $this;
    }

    /**
     * Gets stripe_current_period_start
     *
     * @return int|null
     */
    public function getStripeCurrentPeriodStart()
    {
        return $this->container['stripe_current_period_start'];
    }

    /**
     * Sets stripe_current_period_start
     *
     * @param int|null $stripe_current_period_start Datetime when the the plan's current period started (in Stripe). Internal and Stripe periodicity should ~coincide.
     *
     * @return self
     */
    public function setStripeCurrentPeriodStart($stripe_current_period_start)
    {
        if (is_null($stripe_current_period_start)) {
            throw new \InvalidArgumentException('non-nullable stripe_current_period_start cannot be null');
        }
        $this->container['stripe_current_period_start'] = $stripe_current_period_start;

        return $this;
    }

    /**
     * Gets billing_status
     *
     * @return string|null
     */
    public function getBillingStatus()
    {
        return $this->container['billing_status'];
    }

    /**
     * Sets billing_status
     *
     * @param string|null $billing_status Current period billing status ex OPEN.
     *
     * @return self
     */
    public function setBillingStatus($billing_status)
    {
        if (is_null($billing_status)) {
            throw new \InvalidArgumentException('non-nullable billing_status cannot be null');
        }
        $this->container['billing_status'] = $billing_status;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return int|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param int|null $usage Current period usage in units (NB some API endpoints use more than one unit).
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets soft_limit
     *
     * @return int|null
     */
    public function getSoftLimit()
    {
        return $this->container['soft_limit'];
    }

    /**
     * Sets soft_limit
     *
     * @param int|null $soft_limit Current period soft limit (reaching the limit sends an email notification).
     *
     * @return self
     */
    public function setSoftLimit($soft_limit)
    {
        if (is_null($soft_limit)) {
            throw new \InvalidArgumentException('non-nullable soft_limit cannot be null');
        }
        $this->container['soft_limit'] = $soft_limit;

        return $this;
    }

    /**
     * Gets hard_limit
     *
     * @return int|null
     */
    public function getHardLimit()
    {
        return $this->container['hard_limit'];
    }

    /**
     * Sets hard_limit
     *
     * @param int|null $hard_limit Current period hard limit (reaching the limit sends an email notification and blocks the API Key).
     *
     * @return self
     */
    public function setHardLimit($hard_limit)
    {
        if (is_null($hard_limit)) {
            throw new \InvalidArgumentException('non-nullable hard_limit cannot be null');
        }
        $this->container['hard_limit'] = $hard_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


