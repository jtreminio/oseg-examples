<?php
/**
 * APIKeyOut
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Namsor\Client\Model;

use \ArrayAccess;
use \Namsor\Client\ObjectSerializer;

/**
 * APIKeyOut Class Doc Comment
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIKeyOut implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'APIKeyOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'user_id' => 'string',
        'admin' => 'bool',
        'vetted' => 'bool',
        'learnable' => 'bool',
        'anonymized' => 'bool',
        'partner' => 'bool',
        'striped' => 'bool',
        'corporate' => 'bool',
        'disabled' => 'bool',
        'explainable' => 'bool',
        'ip_address' => 'string',
        'community_engage_option' => '\Namsor\Client\Model\CommunityEngageOptionOut'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'user_id' => null,
        'admin' => null,
        'vetted' => null,
        'learnable' => null,
        'anonymized' => null,
        'partner' => null,
        'striped' => null,
        'corporate' => null,
        'disabled' => null,
        'explainable' => null,
        'ip_address' => null,
        'community_engage_option' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'user_id' => false,
        'admin' => false,
        'vetted' => false,
        'learnable' => false,
        'anonymized' => false,
        'partner' => false,
        'striped' => false,
        'corporate' => false,
        'disabled' => false,
        'explainable' => false,
        'ip_address' => false,
        'community_engage_option' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'user_id' => 'userId',
        'admin' => 'admin',
        'vetted' => 'vetted',
        'learnable' => 'learnable',
        'anonymized' => 'anonymized',
        'partner' => 'partner',
        'striped' => 'striped',
        'corporate' => 'corporate',
        'disabled' => 'disabled',
        'explainable' => 'explainable',
        'ip_address' => 'ipAddress',
        'community_engage_option' => 'communityEngageOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'user_id' => 'setUserId',
        'admin' => 'setAdmin',
        'vetted' => 'setVetted',
        'learnable' => 'setLearnable',
        'anonymized' => 'setAnonymized',
        'partner' => 'setPartner',
        'striped' => 'setStriped',
        'corporate' => 'setCorporate',
        'disabled' => 'setDisabled',
        'explainable' => 'setExplainable',
        'ip_address' => 'setIpAddress',
        'community_engage_option' => 'setCommunityEngageOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'user_id' => 'getUserId',
        'admin' => 'getAdmin',
        'vetted' => 'getVetted',
        'learnable' => 'getLearnable',
        'anonymized' => 'getAnonymized',
        'partner' => 'getPartner',
        'striped' => 'getStriped',
        'corporate' => 'getCorporate',
        'disabled' => 'getDisabled',
        'explainable' => 'getExplainable',
        'ip_address' => 'getIpAddress',
        'community_engage_option' => 'getCommunityEngageOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('admin', $data ?? [], null);
        $this->setIfExists('vetted', $data ?? [], null);
        $this->setIfExists('learnable', $data ?? [], null);
        $this->setIfExists('anonymized', $data ?? [], null);
        $this->setIfExists('partner', $data ?? [], null);
        $this->setIfExists('striped', $data ?? [], null);
        $this->setIfExists('corporate', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('explainable', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('community_engage_option', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key The user API Key.
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The user identifier.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets admin
     *
     * @return bool|null
     */
    public function getAdmin()
    {
        return $this->container['admin'];
    }

    /**
     * Sets admin
     *
     * @param bool|null $admin The API Key has admin role.
     *
     * @return self
     */
    public function setAdmin($admin)
    {
        if (is_null($admin)) {
            throw new \InvalidArgumentException('non-nullable admin cannot be null');
        }
        $this->container['admin'] = $admin;

        return $this;
    }

    /**
     * Gets vetted
     *
     * @return bool|null
     */
    public function getVetted()
    {
        return $this->container['vetted'];
    }

    /**
     * Sets vetted
     *
     * @param bool|null $vetted The API Key is vetted (assumed truthful) for machine learning.
     *
     * @return self
     */
    public function setVetted($vetted)
    {
        if (is_null($vetted)) {
            throw new \InvalidArgumentException('non-nullable vetted cannot be null');
        }
        $this->container['vetted'] = $vetted;

        return $this;
    }

    /**
     * Gets learnable
     *
     * @return bool|null
     */
    public function getLearnable()
    {
        return $this->container['learnable'];
    }

    /**
     * Sets learnable
     *
     * @param bool|null $learnable The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
     *
     * @return self
     */
    public function setLearnable($learnable)
    {
        if (is_null($learnable)) {
            throw new \InvalidArgumentException('non-nullable learnable cannot be null');
        }
        $this->container['learnable'] = $learnable;

        return $this;
    }

    /**
     * Gets anonymized
     *
     * @return bool|null
     */
    public function getAnonymized()
    {
        return $this->container['anonymized'];
    }

    /**
     * Sets anonymized
     *
     * @param bool|null $anonymized The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).
     *
     * @return self
     */
    public function setAnonymized($anonymized)
    {
        if (is_null($anonymized)) {
            throw new \InvalidArgumentException('non-nullable anonymized cannot be null');
        }
        $this->container['anonymized'] = $anonymized;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return bool|null
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param bool|null $partner The API Key has partner role.
     *
     * @return self
     */
    public function setPartner($partner)
    {
        if (is_null($partner)) {
            throw new \InvalidArgumentException('non-nullable partner cannot be null');
        }
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets striped
     *
     * @return bool|null
     */
    public function getStriped()
    {
        return $this->container['striped'];
    }

    /**
     * Sets striped
     *
     * @param bool|null $striped The API Key is associated to a valid Stripe account.
     *
     * @return self
     */
    public function setStriped($striped)
    {
        if (is_null($striped)) {
            throw new \InvalidArgumentException('non-nullable striped cannot be null');
        }
        $this->container['striped'] = $striped;

        return $this;
    }

    /**
     * Gets corporate
     *
     * @return bool|null
     */
    public function getCorporate()
    {
        return $this->container['corporate'];
    }

    /**
     * Sets corporate
     *
     * @param bool|null $corporate The API Key has role corporate (ex SWIFT payments instead of Stripe payments).
     *
     * @return self
     */
    public function setCorporate($corporate)
    {
        if (is_null($corporate)) {
            throw new \InvalidArgumentException('non-nullable corporate cannot be null');
        }
        $this->container['corporate'] = $corporate;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled The API Key is temporarily or permanently disabled.
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets explainable
     *
     * @return bool|null
     */
    public function getExplainable()
    {
        return $this->container['explainable'];
    }

    /**
     * Sets explainable
     *
     * @param bool|null $explainable The API Key supports the AI explainability option (may require a specific license).
     *
     * @return self
     */
    public function setExplainable($explainable)
    {
        if (is_null($explainable)) {
            throw new \InvalidArgumentException('non-nullable explainable cannot be null');
        }
        $this->container['explainable'] = $explainable;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets community_engage_option
     *
     * @return \Namsor\Client\Model\CommunityEngageOptionOut|null
     */
    public function getCommunityEngageOption()
    {
        return $this->container['community_engage_option'];
    }

    /**
     * Sets community_engage_option
     *
     * @param \Namsor\Client\Model\CommunityEngageOptionOut|null $community_engage_option community_engage_option
     *
     * @return self
     */
    public function setCommunityEngageOption($community_engage_option)
    {
        if (is_null($community_engage_option)) {
            throw new \InvalidArgumentException('non-nullable community_engage_option cannot be null');
        }
        $this->container['community_engage_option'] = $community_engage_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


