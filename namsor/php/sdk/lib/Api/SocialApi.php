<?php
/**
 * SocialApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NamSor API v2
 *
 * NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: contact@namsor.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Namsor\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Namsor\Client\ApiException;
use Namsor\Client\Configuration;
use Namsor\Client\HeaderSelector;
use Namsor\Client\ObjectSerializer;

/**
 * SocialApi Class Doc Comment
 *
 * @category Class
 * @package  Namsor\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SocialApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'phoneCode' => [
            'application/json',
        ],
        'phoneCodeBatch' => [
            'application/json',
        ],
        'phoneCodeGeo' => [
            'application/json',
        ],
        'phoneCodeGeoBatch' => [
            'application/json',
        ],
        'phoneCodeGeoFeedbackLoop' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation phoneCode
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     *
     * @param  string $first_name first_name (required)
     * @param  string $last_name last_name (required)
     * @param  string $phone_number phone_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCode'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Namsor\Client\Model\FirstLastNamePhoneCodedOut
     */
    public function phoneCode($first_name, $last_name, $phone_number, string $contentType = self::contentTypes['phoneCode'][0])
    {
        list($response) = $this->phoneCodeWithHttpInfo($first_name, $last_name, $phone_number, $contentType);
        return $response;
    }

    /**
     * Operation phoneCodeWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCode'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Namsor\Client\Model\FirstLastNamePhoneCodedOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function phoneCodeWithHttpInfo($first_name, $last_name, $phone_number, string $contentType = self::contentTypes['phoneCode'][0])
    {
        $request = $this->phoneCodeRequest($first_name, $last_name, $phone_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Namsor\Client\Model\FirstLastNamePhoneCodedOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Namsor\Client\Model\FirstLastNamePhoneCodedOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation phoneCodeAsync
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeAsync($first_name, $last_name, $phone_number, string $contentType = self::contentTypes['phoneCode'][0])
    {
        return $this->phoneCodeAsyncWithHttpInfo($first_name, $last_name, $phone_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation phoneCodeAsyncWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeAsyncWithHttpInfo($first_name, $last_name, $phone_number, string $contentType = self::contentTypes['phoneCode'][0])
    {
        $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
        $request = $this->phoneCodeRequest($first_name, $last_name, $phone_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'phoneCode'
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function phoneCodeRequest($first_name, $last_name, $phone_number, string $contentType = self::contentTypes['phoneCode'][0])
    {

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling phoneCode'
            );
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling phoneCode'
            );
        }

        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling phoneCode'
            );
        }


        $resourcePath = '/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($first_name !== null) {
            $resourcePath = str_replace(
                '{' . 'firstName' . '}',
                ObjectSerializer::toPathValue($first_name),
                $resourcePath
            );
        }
        // path params
        if ($last_name !== null) {
            $resourcePath = str_replace(
                '{' . 'lastName' . '}',
                ObjectSerializer::toPathValue($last_name),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation phoneCodeBatch
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberIn|null $batch_first_last_name_phone_number_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeBatch'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut
     */
    public function phoneCodeBatch($batch_first_last_name_phone_number_in = null, string $contentType = self::contentTypes['phoneCodeBatch'][0])
    {
        list($response) = $this->phoneCodeBatchWithHttpInfo($batch_first_last_name_phone_number_in, $contentType);
        return $response;
    }

    /**
     * Operation phoneCodeBatchWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberIn|null $batch_first_last_name_phone_number_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeBatch'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function phoneCodeBatchWithHttpInfo($batch_first_last_name_phone_number_in = null, string $contentType = self::contentTypes['phoneCodeBatch'][0])
    {
        $request = $this->phoneCodeBatchRequest($batch_first_last_name_phone_number_in, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation phoneCodeBatchAsync
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberIn|null $batch_first_last_name_phone_number_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeBatchAsync($batch_first_last_name_phone_number_in = null, string $contentType = self::contentTypes['phoneCodeBatch'][0])
    {
        return $this->phoneCodeBatchAsyncWithHttpInfo($batch_first_last_name_phone_number_in, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation phoneCodeBatchAsyncWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberIn|null $batch_first_last_name_phone_number_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeBatchAsyncWithHttpInfo($batch_first_last_name_phone_number_in = null, string $contentType = self::contentTypes['phoneCodeBatch'][0])
    {
        $returnType = '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut';
        $request = $this->phoneCodeBatchRequest($batch_first_last_name_phone_number_in, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'phoneCodeBatch'
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberIn|null $batch_first_last_name_phone_number_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function phoneCodeBatchRequest($batch_first_last_name_phone_number_in = null, string $contentType = self::contentTypes['phoneCodeBatch'][0])
    {



        $resourcePath = '/api2/json/phoneCodeBatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($batch_first_last_name_phone_number_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($batch_first_last_name_phone_number_in));
            } else {
                $httpBody = $batch_first_last_name_phone_number_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation phoneCodeGeo
     *
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name first_name (required)
     * @param  string $last_name last_name (required)
     * @param  string $phone_number phone_number (required)
     * @param  string $country_iso2 country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeo'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Namsor\Client\Model\FirstLastNamePhoneCodedOut
     */
    public function phoneCodeGeo($first_name, $last_name, $phone_number, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeo'][0])
    {
        list($response) = $this->phoneCodeGeoWithHttpInfo($first_name, $last_name, $phone_number, $country_iso2, $contentType);
        return $response;
    }

    /**
     * Operation phoneCodeGeoWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeo'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Namsor\Client\Model\FirstLastNamePhoneCodedOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function phoneCodeGeoWithHttpInfo($first_name, $last_name, $phone_number, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeo'][0])
    {
        $request = $this->phoneCodeGeoRequest($first_name, $last_name, $phone_number, $country_iso2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Namsor\Client\Model\FirstLastNamePhoneCodedOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Namsor\Client\Model\FirstLastNamePhoneCodedOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation phoneCodeGeoAsync
     *
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoAsync($first_name, $last_name, $phone_number, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeo'][0])
    {
        return $this->phoneCodeGeoAsyncWithHttpInfo($first_name, $last_name, $phone_number, $country_iso2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation phoneCodeGeoAsyncWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoAsyncWithHttpInfo($first_name, $last_name, $phone_number, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeo'][0])
    {
        $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
        $request = $this->phoneCodeGeoRequest($first_name, $last_name, $phone_number, $country_iso2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'phoneCodeGeo'
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function phoneCodeGeoRequest($first_name, $last_name, $phone_number, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeo'][0])
    {

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling phoneCodeGeo'
            );
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling phoneCodeGeo'
            );
        }

        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling phoneCodeGeo'
            );
        }

        // verify the required parameter 'country_iso2' is set
        if ($country_iso2 === null || (is_array($country_iso2) && count($country_iso2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_iso2 when calling phoneCodeGeo'
            );
        }


        $resourcePath = '/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($first_name !== null) {
            $resourcePath = str_replace(
                '{' . 'firstName' . '}',
                ObjectSerializer::toPathValue($first_name),
                $resourcePath
            );
        }
        // path params
        if ($last_name !== null) {
            $resourcePath = str_replace(
                '{' . 'lastName' . '}',
                ObjectSerializer::toPathValue($last_name),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }
        // path params
        if ($country_iso2 !== null) {
            $resourcePath = str_replace(
                '{' . 'countryIso2' . '}',
                ObjectSerializer::toPathValue($country_iso2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation phoneCodeGeoBatch
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberGeoIn|null $batch_first_last_name_phone_number_geo_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoBatch'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut
     */
    public function phoneCodeGeoBatch($batch_first_last_name_phone_number_geo_in = null, string $contentType = self::contentTypes['phoneCodeGeoBatch'][0])
    {
        list($response) = $this->phoneCodeGeoBatchWithHttpInfo($batch_first_last_name_phone_number_geo_in, $contentType);
        return $response;
    }

    /**
     * Operation phoneCodeGeoBatchWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberGeoIn|null $batch_first_last_name_phone_number_geo_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoBatch'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function phoneCodeGeoBatchWithHttpInfo($batch_first_last_name_phone_number_geo_in = null, string $contentType = self::contentTypes['phoneCodeGeoBatch'][0])
    {
        $request = $this->phoneCodeGeoBatchRequest($batch_first_last_name_phone_number_geo_in, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation phoneCodeGeoBatchAsync
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberGeoIn|null $batch_first_last_name_phone_number_geo_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoBatchAsync($batch_first_last_name_phone_number_geo_in = null, string $contentType = self::contentTypes['phoneCodeGeoBatch'][0])
    {
        return $this->phoneCodeGeoBatchAsyncWithHttpInfo($batch_first_last_name_phone_number_geo_in, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation phoneCodeGeoBatchAsyncWithHttpInfo
     *
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberGeoIn|null $batch_first_last_name_phone_number_geo_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoBatchAsyncWithHttpInfo($batch_first_last_name_phone_number_geo_in = null, string $contentType = self::contentTypes['phoneCodeGeoBatch'][0])
    {
        $returnType = '\Namsor\Client\Model\BatchFirstLastNamePhoneCodedOut';
        $request = $this->phoneCodeGeoBatchRequest($batch_first_last_name_phone_number_geo_in, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'phoneCodeGeoBatch'
     *
     * @param  \Namsor\Client\Model\BatchFirstLastNamePhoneNumberGeoIn|null $batch_first_last_name_phone_number_geo_in A list of personal names (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function phoneCodeGeoBatchRequest($batch_first_last_name_phone_number_geo_in = null, string $contentType = self::contentTypes['phoneCodeGeoBatch'][0])
    {



        $resourcePath = '/api2/json/phoneCodeGeoBatch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($batch_first_last_name_phone_number_geo_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($batch_first_last_name_phone_number_geo_in));
            } else {
                $httpBody = $batch_first_last_name_phone_number_geo_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation phoneCodeGeoFeedbackLoop
     *
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name first_name (required)
     * @param  string $last_name last_name (required)
     * @param  string $phone_number phone_number (required)
     * @param  string $phone_number_e164 phone_number_e164 (required)
     * @param  string $country_iso2 country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoFeedbackLoop'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Namsor\Client\Model\FirstLastNamePhoneCodedOut
     */
    public function phoneCodeGeoFeedbackLoop($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeoFeedbackLoop'][0])
    {
        list($response) = $this->phoneCodeGeoFeedbackLoopWithHttpInfo($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, $contentType);
        return $response;
    }

    /**
     * Operation phoneCodeGeoFeedbackLoopWithHttpInfo
     *
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $phone_number_e164 (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoFeedbackLoop'] to see the possible values for this operation
     *
     * @throws \Namsor\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Namsor\Client\Model\FirstLastNamePhoneCodedOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function phoneCodeGeoFeedbackLoopWithHttpInfo($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeoFeedbackLoop'][0])
    {
        $request = $this->phoneCodeGeoFeedbackLoopRequest($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Namsor\Client\Model\FirstLastNamePhoneCodedOut' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Namsor\Client\Model\FirstLastNamePhoneCodedOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Namsor\Client\Model\FirstLastNamePhoneCodedOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation phoneCodeGeoFeedbackLoopAsync
     *
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $phone_number_e164 (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoFeedbackLoop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoFeedbackLoopAsync($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeoFeedbackLoop'][0])
    {
        return $this->phoneCodeGeoFeedbackLoopAsyncWithHttpInfo($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation phoneCodeGeoFeedbackLoopAsyncWithHttpInfo
     *
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $phone_number_e164 (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoFeedbackLoop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function phoneCodeGeoFeedbackLoopAsyncWithHttpInfo($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeoFeedbackLoop'][0])
    {
        $returnType = '\Namsor\Client\Model\FirstLastNamePhoneCodedOut';
        $request = $this->phoneCodeGeoFeedbackLoopRequest($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'phoneCodeGeoFeedbackLoop'
     *
     * @param  string $first_name (required)
     * @param  string $last_name (required)
     * @param  string $phone_number (required)
     * @param  string $phone_number_e164 (required)
     * @param  string $country_iso2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['phoneCodeGeoFeedbackLoop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function phoneCodeGeoFeedbackLoopRequest($first_name, $last_name, $phone_number, $phone_number_e164, $country_iso2, string $contentType = self::contentTypes['phoneCodeGeoFeedbackLoop'][0])
    {

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling phoneCodeGeoFeedbackLoop'
            );
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling phoneCodeGeoFeedbackLoop'
            );
        }

        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling phoneCodeGeoFeedbackLoop'
            );
        }

        // verify the required parameter 'phone_number_e164' is set
        if ($phone_number_e164 === null || (is_array($phone_number_e164) && count($phone_number_e164) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number_e164 when calling phoneCodeGeoFeedbackLoop'
            );
        }

        // verify the required parameter 'country_iso2' is set
        if ($country_iso2 === null || (is_array($country_iso2) && count($country_iso2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_iso2 when calling phoneCodeGeoFeedbackLoop'
            );
        }


        $resourcePath = '/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($first_name !== null) {
            $resourcePath = str_replace(
                '{' . 'firstName' . '}',
                ObjectSerializer::toPathValue($first_name),
                $resourcePath
            );
        }
        // path params
        if ($last_name !== null) {
            $resourcePath = str_replace(
                '{' . 'lastName' . '}',
                ObjectSerializer::toPathValue($last_name),
                $resourcePath
            );
        }
        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath
            );
        }
        // path params
        if ($phone_number_e164 !== null) {
            $resourcePath = str_replace(
                '{' . 'phoneNumberE164' . '}',
                ObjectSerializer::toPathValue($phone_number_e164),
                $resourcePath
            );
        }
        // path params
        if ($country_iso2 !== null) {
            $resourcePath = str_replace(
                '{' . 'countryIso2' . '}',
                ObjectSerializer::toPathValue($country_iso2),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
