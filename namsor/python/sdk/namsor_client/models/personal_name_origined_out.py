# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. By default, enpoints use 1 unit per name (ex. Gender), but Ethnicity classification uses 10 to 20 units per name depending on taxonomy. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it! 

    The version of the OpenAPI document: 2.0.29
    Contact: contact@namsor.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from namsor_client.models.religion_stat_out import ReligionStatOut
from typing import Optional, Set
from typing_extensions import Self

class PersonalNameOriginedOut(BaseModel):
    """
    Represents the output of inferring the LIKELY country of Origin from a personal name.
    """ # noqa: E501
    script: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    explanation: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="The input name.")
    country_origin: Optional[StrictStr] = Field(default=None, description="Most likely country of Origin", alias="countryOrigin")
    country_origin_alt: Optional[StrictStr] = Field(default=None, description="Second best alternative : country of Origin", alias="countryOriginAlt")
    countries_origin_top: Optional[List[StrictStr]] = Field(default=None, description="List countries of Origin (top 10)", alias="countriesOriginTop")
    score: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ")
    region_origin: Optional[StrictStr] = Field(default=None, description="Most likely region of Origin (based on countryOrigin ISO2 code)", alias="regionOrigin")
    top_region_origin: Optional[StrictStr] = Field(default=None, description="Most likely top region of Origin (based on countryOrigin ISO2 code)", alias="topRegionOrigin")
    sub_region_origin: Optional[StrictStr] = Field(default=None, description="Most likely sub region of Origin (based on countryOrigin ISO2 code)", alias="subRegionOrigin")
    probability_calibrated: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=-1)], Annotated[int, Field(le=1, strict=True, ge=-1)]]] = Field(default=None, description="The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. ", alias="probabilityCalibrated")
    probability_alt_calibrated: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=-1)], Annotated[int, Field(le=1, strict=True, ge=-1)]]] = Field(default=None, description="The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. ", alias="probabilityAltCalibrated")
    religion_stats: Optional[List[ReligionStatOut]] = Field(default=None, description="Geographic religious statistics, assuming country of origin is correctly predicted.", alias="religionStats")
    religion_stats_alt: Optional[List[ReligionStatOut]] = Field(default=None, description="Geographic religious statistics, for country best alternative.", alias="religionStatsAlt")
    religion_stats_synthetic: Optional[List[ReligionStatOut]] = Field(default=None, description="Geographic religious statistics, assuming country of origin OR best alternative is correctly predicted.", alias="religionStatsSynthetic")
    __properties: ClassVar[List[str]] = ["script", "id", "explanation", "name", "countryOrigin", "countryOriginAlt", "countriesOriginTop", "score", "regionOrigin", "topRegionOrigin", "subRegionOrigin", "probabilityCalibrated", "probabilityAltCalibrated", "religionStats", "religionStatsAlt", "religionStatsSynthetic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalNameOriginedOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in religion_stats (list)
        _items = []
        if self.religion_stats:
            for _item_religion_stats in self.religion_stats:
                if _item_religion_stats:
                    _items.append(_item_religion_stats.to_dict())
            _dict['religionStats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in religion_stats_alt (list)
        _items = []
        if self.religion_stats_alt:
            for _item_religion_stats_alt in self.religion_stats_alt:
                if _item_religion_stats_alt:
                    _items.append(_item_religion_stats_alt.to_dict())
            _dict['religionStatsAlt'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in religion_stats_synthetic (list)
        _items = []
        if self.religion_stats_synthetic:
            for _item_religion_stats_synthetic in self.religion_stats_synthetic:
                if _item_religion_stats_synthetic:
                    _items.append(_item_religion_stats_synthetic.to_dict())
            _dict['religionStatsSynthetic'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalNameOriginedOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "script": obj.get("script"),
            "id": obj.get("id"),
            "explanation": obj.get("explanation"),
            "name": obj.get("name"),
            "countryOrigin": obj.get("countryOrigin"),
            "countryOriginAlt": obj.get("countryOriginAlt"),
            "countriesOriginTop": obj.get("countriesOriginTop"),
            "score": obj.get("score"),
            "regionOrigin": obj.get("regionOrigin"),
            "topRegionOrigin": obj.get("topRegionOrigin"),
            "subRegionOrigin": obj.get("subRegionOrigin"),
            "probabilityCalibrated": obj.get("probabilityCalibrated"),
            "probabilityAltCalibrated": obj.get("probabilityAltCalibrated"),
            "religionStats": [ReligionStatOut.from_dict(_item) for _item in obj["religionStats"]] if obj.get("religionStats") is not None else None,
            "religionStatsAlt": [ReligionStatOut.from_dict(_item) for _item in obj["religionStatsAlt"]] if obj.get("religionStatsAlt") is not None else None,
            "religionStatsSynthetic": [ReligionStatOut.from_dict(_item) for _item in obj["religionStatsSynthetic"]] if obj.get("religionStatsSynthetic") is not None else None
        })
        return _obj


