# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chatwoot_client.models.article import Article
from chatwoot_client.models.category import Category
from typing import Optional, Set
from typing_extensions import Self

class Portal(BaseModel):
    """
    Portal
    """ # noqa: E501
    id: Optional[StrictInt] = None
    archived: Optional[StrictBool] = None
    color: Optional[StrictStr] = None
    config: Optional[Dict[str, Any]] = Field(default=None, description="Save information about locales, allowed_locales and default portal/help-center locale")
    custom_domain: Optional[StrictStr] = None
    header_text: Optional[StrictStr] = Field(default=None, description="The text content.")
    homepage_link: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    page_title: Optional[StrictStr] = None
    account_id: Optional[StrictInt] = None
    categories: Optional[List[Category]] = None
    articles: Optional[List[Article]] = None
    __properties: ClassVar[List[str]] = ["id", "archived", "color", "config", "custom_domain", "header_text", "homepage_link", "name", "slug", "page_title", "account_id", "categories", "articles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Portal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in articles (list)
        _items = []
        if self.articles:
            for _item_articles in self.articles:
                if _item_articles:
                    _items.append(_item_articles.to_dict())
            _dict['articles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Portal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "archived": obj.get("archived"),
            "color": obj.get("color"),
            "config": obj.get("config"),
            "custom_domain": obj.get("custom_domain"),
            "header_text": obj.get("header_text"),
            "homepage_link": obj.get("homepage_link"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "page_title": obj.get("page_title"),
            "account_id": obj.get("account_id"),
            "categories": [Category.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "articles": [Article.from_dict(_item) for _item in obj["articles"]] if obj.get("articles") is not None else None
        })
        return _obj


