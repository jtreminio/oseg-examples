# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing import Optional, Set
from typing_extensions import Self

class ContactCreate(BaseModel):
    """
    ContactCreate
    """ # noqa: E501
    inbox_id: Union[StrictFloat, StrictInt]
    name: Optional[StrictStr] = Field(default=None, description="name of the contact")
    email: Optional[StrictStr] = Field(default=None, description="email of the contact")
    phone_number: Optional[StrictStr] = Field(default=None, description="phone number of the contact")
    avatar: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Send the form data with the avatar image binary or use the avatar_url")
    avatar_url: Optional[StrictStr] = Field(default=None, description="The url to a jpeg, png file for the contact avatar")
    identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier for the contact in external system")
    custom_attributes: Optional[Dict[str, Any]] = Field(default=None, description="An object where you can store custom attributes for contact. example {\"type\":\"customer\", \"age\":30}")
    __properties: ClassVar[List[str]] = ["inbox_id", "name", "email", "phone_number", "avatar", "avatar_url", "identifier", "custom_attributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inbox_id": obj.get("inbox_id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "phone_number": obj.get("phone_number"),
            "avatar": obj.get("avatar"),
            "avatar_url": obj.get("avatar_url"),
            "identifier": obj.get("identifier"),
            "custom_attributes": obj.get("custom_attributes")
        })
        return _obj


