# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from chatwoot_client.models.new_conversation_request_message_template_params import NewConversationRequestMessageTemplateParams
from typing import Optional, Set
from typing_extensions import Self

class ConversationMessageCreate(BaseModel):
    """
    ConversationMessageCreate
    """ # noqa: E501
    content: StrictStr = Field(description="The content of the message")
    message_type: Optional[StrictStr] = None
    private: Optional[StrictBool] = Field(default=None, description="Flag to identify if it is a private note")
    content_type: Optional[StrictStr] = Field(default=None, description="if you want to create custom message types")
    content_attributes: Optional[Dict[str, Any]] = Field(default=None, description="attributes based on your content type")
    template_params: Optional[NewConversationRequestMessageTemplateParams] = None
    __properties: ClassVar[List[str]] = ["content", "message_type", "private", "content_type", "content_attributes", "template_params"]

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['outgoing', 'incoming']):
            raise ValueError("must be one of enum values ('outgoing', 'incoming')")
        return value

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'input_email', 'cards', 'input_select', 'form', 'article']):
            raise ValueError("must be one of enum values ('text', 'input_email', 'cards', 'input_select', 'form', 'article')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationMessageCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of template_params
        if self.template_params:
            _dict['template_params'] = self.template_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationMessageCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "message_type": obj.get("message_type"),
            "private": obj.get("private"),
            "content_type": obj.get("content_type"),
            "content_attributes": obj.get("content_attributes"),
            "template_params": NewConversationRequestMessageTemplateParams.from_dict(obj["template_params"]) if obj.get("template_params") is not None else None
        })
        return _obj


