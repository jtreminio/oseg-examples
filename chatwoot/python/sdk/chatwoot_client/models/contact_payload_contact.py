# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chatwoot_client.models.contact_inboxes import ContactInboxes
from typing import Optional, Set
from typing_extensions import Self

class ContactPayloadContact(BaseModel):
    """
    ContactPayloadContact
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Email address of the contact")
    name: Optional[StrictStr] = Field(default=None, description="The name of the contact")
    phone_number: Optional[StrictStr] = Field(default=None, description="Phone number of the contact")
    thumbnail: Optional[StrictStr] = Field(default=None, description="Avatar URL of the contact")
    additional_attributes: Optional[Dict[str, Any]] = Field(default=None, description="The object containing additional attributes related to the contact")
    custom_attributes: Optional[Dict[str, Any]] = Field(default=None, description="The object to save custom attributes for contact, accepts custom attributes key and value")
    contact_inboxes: Optional[List[ContactInboxes]] = None
    __properties: ClassVar[List[str]] = ["email", "name", "phone_number", "thumbnail", "additional_attributes", "custom_attributes", "contact_inboxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactPayloadContact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contact_inboxes (list)
        _items = []
        if self.contact_inboxes:
            for _item_contact_inboxes in self.contact_inboxes:
                if _item_contact_inboxes:
                    _items.append(_item_contact_inboxes.to_dict())
            _dict['contact_inboxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactPayloadContact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "name": obj.get("name"),
            "phone_number": obj.get("phone_number"),
            "thumbnail": obj.get("thumbnail"),
            "additional_attributes": obj.get("additional_attributes"),
            "custom_attributes": obj.get("custom_attributes"),
            "contact_inboxes": [ContactInboxes.from_dict(_item) for _item in obj["contact_inboxes"]] if obj.get("contact_inboxes") is not None else None
        })
        return _obj


