# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from chatwoot_client.models.new_conversation_request_message import NewConversationRequestMessage
from typing import Optional, Set
from typing_extensions import Self

class NewConversationRequest(BaseModel):
    """
    NewConversationRequest
    """ # noqa: E501
    source_id: StrictStr = Field(description="Conversation source id")
    inbox_id: StrictStr = Field(description="Id of inbox in which the conversation is created <br/> Allowed Inbox Types: Website, Phone, Api, Email ")
    contact_id: Optional[StrictStr] = Field(default=None, description="Contact Id for which conversation is created")
    additional_attributes: Optional[Dict[str, Any]] = Field(default=None, description="Lets you specify attributes like browser information")
    custom_attributes: Optional[Dict[str, Any]] = Field(default=None, description="The object to save custom attributes for conversation, accepts custom attributes key and value")
    status: Optional[StrictStr] = Field(default=None, description="Specify the conversation whether it's pending, open, closed")
    assignee_id: Optional[StrictStr] = Field(default=None, description="Agent Id for assigning a conversation to an agent")
    team_id: Optional[StrictStr] = Field(default=None, description="Team Id for assigning a conversation to a team")
    message: Optional[NewConversationRequestMessage] = None
    __properties: ClassVar[List[str]] = ["source_id", "inbox_id", "contact_id", "additional_attributes", "custom_attributes", "status", "assignee_id", "team_id", "message"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'resolved', 'pending']):
            raise ValueError("must be one of enum values ('open', 'resolved', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewConversationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewConversationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source_id": obj.get("source_id"),
            "inbox_id": obj.get("inbox_id"),
            "contact_id": obj.get("contact_id"),
            "additional_attributes": obj.get("additional_attributes"),
            "custom_attributes": obj.get("custom_attributes"),
            "status": obj.get("status"),
            "assignee_id": obj.get("assignee_id"),
            "team_id": obj.get("team_id"),
            "message": NewConversationRequestMessage.from_dict(obj["message"]) if obj.get("message") is not None else None
        })
        return _obj


