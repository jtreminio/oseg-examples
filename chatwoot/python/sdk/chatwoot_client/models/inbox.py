# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Inbox(BaseModel):
    """
    Inbox
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ID of the inbox")
    name: Optional[StrictStr] = Field(default=None, description="The name of the inbox")
    website_url: Optional[StrictStr] = Field(default=None, description="Website URL")
    channel_type: Optional[StrictStr] = Field(default=None, description="The type of the inbox")
    avatar_url: Optional[StrictStr] = Field(default=None, description="The avatar image of the inbox")
    widget_color: Optional[StrictStr] = Field(default=None, description="Widget Color used for customization of the widget")
    website_token: Optional[StrictStr] = Field(default=None, description="Website Token")
    enable_auto_assignment: Optional[StrictBool] = Field(default=None, description="The flag which shows whether Auto Assignment is enabled or not")
    web_widget_script: Optional[StrictStr] = Field(default=None, description="Script used to load the website widget")
    welcome_title: Optional[StrictStr] = Field(default=None, description="Welcome title to be displayed on the widget")
    welcome_tagline: Optional[StrictStr] = Field(default=None, description="Welcome tagline to be displayed on the widget")
    greeting_enabled: Optional[StrictBool] = Field(default=None, description="The flag which shows whether greeting is enabled")
    greeting_message: Optional[StrictStr] = Field(default=None, description="A greeting message when the user starts the conversation")
    __properties: ClassVar[List[str]] = ["id", "name", "website_url", "channel_type", "avatar_url", "widget_color", "website_token", "enable_auto_assignment", "web_widget_script", "welcome_title", "welcome_tagline", "greeting_enabled", "greeting_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Inbox from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Inbox from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "website_url": obj.get("website_url"),
            "channel_type": obj.get("channel_type"),
            "avatar_url": obj.get("avatar_url"),
            "widget_color": obj.get("widget_color"),
            "website_token": obj.get("website_token"),
            "enable_auto_assignment": obj.get("enable_auto_assignment"),
            "web_widget_script": obj.get("web_widget_script"),
            "welcome_title": obj.get("welcome_title"),
            "welcome_tagline": obj.get("welcome_tagline"),
            "greeting_enabled": obj.get("greeting_enabled"),
            "greeting_message": obj.get("greeting_message")
        })
        return _obj


