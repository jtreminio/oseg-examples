# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublicInboxWorkingHoursInner(BaseModel):
    """
    PublicInboxWorkingHoursInner
    """ # noqa: E501
    day_of_week: Optional[StrictInt] = Field(default=None, description="Day of the week as a number. Sunday -> 0, Saturday -> 6")
    open_all_day: Optional[StrictBool] = Field(default=None, description="Whether or not the business is open the whole day")
    closed_all_day: Optional[StrictBool] = Field(default=None, description="Whether or not the business is closed the whole day")
    open_hour: Optional[StrictInt] = Field(default=None, description="Opening hour. Can be null if closed all day")
    open_minutes: Optional[StrictInt] = Field(default=None, description="Opening minute. Can be null if closed all day")
    close_hour: Optional[StrictInt] = Field(default=None, description="Closing hour. Can be null if closed all day")
    close_minutes: Optional[StrictInt] = Field(default=None, description="Closing minute. Can be null if closed all day")
    __properties: ClassVar[List[str]] = ["day_of_week", "open_all_day", "closed_all_day", "open_hour", "open_minutes", "close_hour", "close_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicInboxWorkingHoursInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicInboxWorkingHoursInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day_of_week": obj.get("day_of_week"),
            "open_all_day": obj.get("open_all_day"),
            "closed_all_day": obj.get("closed_all_day"),
            "open_hour": obj.get("open_hour"),
            "open_minutes": obj.get("open_minutes"),
            "close_hour": obj.get("close_hour"),
            "close_minutes": obj.get("close_minutes")
        })
        return _obj


