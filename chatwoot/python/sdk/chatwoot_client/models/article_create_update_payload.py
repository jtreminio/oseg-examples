# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.

    The version of the OpenAPI document: 1.0.0
    Contact: hello@chatwoot.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArticleCreateUpdatePayload(BaseModel):
    """
    ArticleCreateUpdatePayload
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="The text content.")
    meta: Optional[Dict[str, Any]] = Field(default=None, description="Use for search")
    position: Optional[StrictInt] = Field(default=None, description="article position in category")
    status: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    views: Optional[StrictInt] = None
    portal_id: Optional[StrictInt] = None
    account_id: Optional[StrictInt] = None
    author_id: Optional[StrictInt] = None
    category_id: Optional[StrictInt] = None
    folder_id: Optional[StrictInt] = None
    associated_article_id: Optional[StrictInt] = Field(default=None, description="To associate similar articles to each other, e.g to provide the link for the reference.")
    __properties: ClassVar[List[str]] = ["content", "meta", "position", "status", "title", "slug", "views", "portal_id", "account_id", "author_id", "category_id", "folder_id", "associated_article_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArticleCreateUpdatePayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArticleCreateUpdatePayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "meta": obj.get("meta"),
            "position": obj.get("position"),
            "status": obj.get("status"),
            "title": obj.get("title"),
            "slug": obj.get("slug"),
            "views": obj.get("views"),
            "portal_id": obj.get("portal_id"),
            "account_id": obj.get("account_id"),
            "author_id": obj.get("author_id"),
            "category_id": obj.get("category_id"),
            "folder_id": obj.get("folder_id"),
            "associated_article_id": obj.get("associated_article_id")
        })
        return _obj


